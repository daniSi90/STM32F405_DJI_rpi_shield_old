
STM32F405_DJI_rpi_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e4c  08005e4c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e54  08005e54  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000090  08005ef0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000510  08005ef0  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011047  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028aa  00000000  00000000  00031107  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005f9f  00000000  00000000  000353c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c826  00000000  00000000  0003b35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be56e  00000000  00000000  00047b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001060f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  00106170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dc8 	.word	0x08005dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08005dc8 	.word	0x08005dc8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b972 	b.w	80008dc <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	4688      	mov	r8, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14b      	bne.n	80006b6 <__udivmoddi4+0xa6>
 800061e:	428a      	cmp	r2, r1
 8000620:	4615      	mov	r5, r2
 8000622:	d967      	bls.n	80006f4 <__udivmoddi4+0xe4>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b14a      	cbz	r2, 800063e <__udivmoddi4+0x2e>
 800062a:	f1c2 0720 	rsb	r7, r2, #32
 800062e:	fa01 f302 	lsl.w	r3, r1, r2
 8000632:	fa20 f707 	lsr.w	r7, r0, r7
 8000636:	4095      	lsls	r5, r2
 8000638:	ea47 0803 	orr.w	r8, r7, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000642:	0c23      	lsrs	r3, r4, #16
 8000644:	fbb8 f7fe 	udiv	r7, r8, lr
 8000648:	fa1f fc85 	uxth.w	ip, r5
 800064c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000650:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000654:	fb07 f10c 	mul.w	r1, r7, ip
 8000658:	4299      	cmp	r1, r3
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x60>
 800065c:	18eb      	adds	r3, r5, r3
 800065e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000662:	f080 811b 	bcs.w	800089c <__udivmoddi4+0x28c>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 8118 	bls.w	800089c <__udivmoddi4+0x28c>
 800066c:	3f02      	subs	r7, #2
 800066e:	442b      	add	r3, r5
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0fe 	udiv	r0, r3, lr
 8000678:	fb0e 3310 	mls	r3, lr, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 fc0c 	mul.w	ip, r0, ip
 8000684:	45a4      	cmp	ip, r4
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x8c>
 8000688:	192c      	adds	r4, r5, r4
 800068a:	f100 33ff 	add.w	r3, r0, #4294967295
 800068e:	f080 8107 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000692:	45a4      	cmp	ip, r4
 8000694:	f240 8104 	bls.w	80008a0 <__udivmoddi4+0x290>
 8000698:	3802      	subs	r0, #2
 800069a:	442c      	add	r4, r5
 800069c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a0:	eba4 040c 	sub.w	r4, r4, ip
 80006a4:	2700      	movs	r7, #0
 80006a6:	b11e      	cbz	r6, 80006b0 <__udivmoddi4+0xa0>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c6 4300 	strd	r4, r3, [r6]
 80006b0:	4639      	mov	r1, r7
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d909      	bls.n	80006ce <__udivmoddi4+0xbe>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80eb 	beq.w	8000896 <__udivmoddi4+0x286>
 80006c0:	2700      	movs	r7, #0
 80006c2:	e9c6 0100 	strd	r0, r1, [r6]
 80006c6:	4638      	mov	r0, r7
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	fab3 f783 	clz	r7, r3
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d147      	bne.n	8000766 <__udivmoddi4+0x156>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xd0>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 80fa 	bhi.w	80008d4 <__udivmoddi4+0x2c4>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb61 0303 	sbc.w	r3, r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4698      	mov	r8, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d0e0      	beq.n	80006b0 <__udivmoddi4+0xa0>
 80006ee:	e9c6 4800 	strd	r4, r8, [r6]
 80006f2:	e7dd      	b.n	80006b0 <__udivmoddi4+0xa0>
 80006f4:	b902      	cbnz	r2, 80006f8 <__udivmoddi4+0xe8>
 80006f6:	deff      	udf	#255	; 0xff
 80006f8:	fab2 f282 	clz	r2, r2
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 808f 	bne.w	8000820 <__udivmoddi4+0x210>
 8000702:	1b49      	subs	r1, r1, r5
 8000704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000708:	fa1f f885 	uxth.w	r8, r5
 800070c:	2701      	movs	r7, #1
 800070e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000712:	0c23      	lsrs	r3, r4, #16
 8000714:	fb0e 111c 	mls	r1, lr, ip, r1
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb08 f10c 	mul.w	r1, r8, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x124>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4299      	cmp	r1, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2bc>
 8000732:	4684      	mov	ip, r0
 8000734:	1a59      	subs	r1, r3, r1
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000740:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x14c>
 800074c:	192c      	adds	r4, r5, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x14a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80b6 	bhi.w	80008c6 <__udivmoddi4+0x2b6>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e79f      	b.n	80006a6 <__udivmoddi4+0x96>
 8000766:	f1c7 0c20 	rsb	ip, r7, #32
 800076a:	40bb      	lsls	r3, r7
 800076c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000770:	ea4e 0e03 	orr.w	lr, lr, r3
 8000774:	fa01 f407 	lsl.w	r4, r1, r7
 8000778:	fa20 f50c 	lsr.w	r5, r0, ip
 800077c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000780:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000784:	4325      	orrs	r5, r4
 8000786:	fbb3 f9f8 	udiv	r9, r3, r8
 800078a:	0c2c      	lsrs	r4, r5, #16
 800078c:	fb08 3319 	mls	r3, r8, r9, r3
 8000790:	fa1f fa8e 	uxth.w	sl, lr
 8000794:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000798:	fb09 f40a 	mul.w	r4, r9, sl
 800079c:	429c      	cmp	r4, r3
 800079e:	fa02 f207 	lsl.w	r2, r2, r7
 80007a2:	fa00 f107 	lsl.w	r1, r0, r7
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b0:	f080 8087 	bcs.w	80008c2 <__udivmoddi4+0x2b2>
 80007b4:	429c      	cmp	r4, r3
 80007b6:	f240 8084 	bls.w	80008c2 <__udivmoddi4+0x2b2>
 80007ba:	f1a9 0902 	sub.w	r9, r9, #2
 80007be:	4473      	add	r3, lr
 80007c0:	1b1b      	subs	r3, r3, r4
 80007c2:	b2ad      	uxth	r5, r5
 80007c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007c8:	fb08 3310 	mls	r3, r8, r0, r3
 80007cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007d4:	45a2      	cmp	sl, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1e 0404 	adds.w	r4, lr, r4
 80007dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e0:	d26b      	bcs.n	80008ba <__udivmoddi4+0x2aa>
 80007e2:	45a2      	cmp	sl, r4
 80007e4:	d969      	bls.n	80008ba <__udivmoddi4+0x2aa>
 80007e6:	3802      	subs	r0, #2
 80007e8:	4474      	add	r4, lr
 80007ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ee:	fba0 8902 	umull	r8, r9, r0, r2
 80007f2:	eba4 040a 	sub.w	r4, r4, sl
 80007f6:	454c      	cmp	r4, r9
 80007f8:	46c2      	mov	sl, r8
 80007fa:	464b      	mov	r3, r9
 80007fc:	d354      	bcc.n	80008a8 <__udivmoddi4+0x298>
 80007fe:	d051      	beq.n	80008a4 <__udivmoddi4+0x294>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d069      	beq.n	80008d8 <__udivmoddi4+0x2c8>
 8000804:	ebb1 050a 	subs.w	r5, r1, sl
 8000808:	eb64 0403 	sbc.w	r4, r4, r3
 800080c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000810:	40fd      	lsrs	r5, r7
 8000812:	40fc      	lsrs	r4, r7
 8000814:	ea4c 0505 	orr.w	r5, ip, r5
 8000818:	e9c6 5400 	strd	r5, r4, [r6]
 800081c:	2700      	movs	r7, #0
 800081e:	e747      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000820:	f1c2 0320 	rsb	r3, r2, #32
 8000824:	fa20 f703 	lsr.w	r7, r0, r3
 8000828:	4095      	lsls	r5, r2
 800082a:	fa01 f002 	lsl.w	r0, r1, r2
 800082e:	fa21 f303 	lsr.w	r3, r1, r3
 8000832:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000836:	4338      	orrs	r0, r7
 8000838:	0c01      	lsrs	r1, r0, #16
 800083a:	fbb3 f7fe 	udiv	r7, r3, lr
 800083e:	fa1f f885 	uxth.w	r8, r5
 8000842:	fb0e 3317 	mls	r3, lr, r7, r3
 8000846:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084a:	fb07 f308 	mul.w	r3, r7, r8
 800084e:	428b      	cmp	r3, r1
 8000850:	fa04 f402 	lsl.w	r4, r4, r2
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x256>
 8000856:	1869      	adds	r1, r5, r1
 8000858:	f107 3cff 	add.w	ip, r7, #4294967295
 800085c:	d22f      	bcs.n	80008be <__udivmoddi4+0x2ae>
 800085e:	428b      	cmp	r3, r1
 8000860:	d92d      	bls.n	80008be <__udivmoddi4+0x2ae>
 8000862:	3f02      	subs	r7, #2
 8000864:	4429      	add	r1, r5
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	b281      	uxth	r1, r0
 800086a:	fbb3 f0fe 	udiv	r0, r3, lr
 800086e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000872:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000876:	fb00 f308 	mul.w	r3, r0, r8
 800087a:	428b      	cmp	r3, r1
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x27e>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f100 3cff 	add.w	ip, r0, #4294967295
 8000884:	d217      	bcs.n	80008b6 <__udivmoddi4+0x2a6>
 8000886:	428b      	cmp	r3, r1
 8000888:	d915      	bls.n	80008b6 <__udivmoddi4+0x2a6>
 800088a:	3802      	subs	r0, #2
 800088c:	4429      	add	r1, r5
 800088e:	1ac9      	subs	r1, r1, r3
 8000890:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000894:	e73b      	b.n	800070e <__udivmoddi4+0xfe>
 8000896:	4637      	mov	r7, r6
 8000898:	4630      	mov	r0, r6
 800089a:	e709      	b.n	80006b0 <__udivmoddi4+0xa0>
 800089c:	4607      	mov	r7, r0
 800089e:	e6e7      	b.n	8000670 <__udivmoddi4+0x60>
 80008a0:	4618      	mov	r0, r3
 80008a2:	e6fb      	b.n	800069c <__udivmoddi4+0x8c>
 80008a4:	4541      	cmp	r1, r8
 80008a6:	d2ab      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ac:	eb69 020e 	sbc.w	r2, r9, lr
 80008b0:	3801      	subs	r0, #1
 80008b2:	4613      	mov	r3, r2
 80008b4:	e7a4      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b6:	4660      	mov	r0, ip
 80008b8:	e7e9      	b.n	800088e <__udivmoddi4+0x27e>
 80008ba:	4618      	mov	r0, r3
 80008bc:	e795      	b.n	80007ea <__udivmoddi4+0x1da>
 80008be:	4667      	mov	r7, ip
 80008c0:	e7d1      	b.n	8000866 <__udivmoddi4+0x256>
 80008c2:	4681      	mov	r9, r0
 80008c4:	e77c      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	442c      	add	r4, r5
 80008ca:	e747      	b.n	800075c <__udivmoddi4+0x14c>
 80008cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d0:	442b      	add	r3, r5
 80008d2:	e72f      	b.n	8000734 <__udivmoddi4+0x124>
 80008d4:	4638      	mov	r0, r7
 80008d6:	e708      	b.n	80006ea <__udivmoddi4+0xda>
 80008d8:	4637      	mov	r7, r6
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0xa0>

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	ed93 7a00 	vldr	s14, [r3]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3304      	adds	r3, #4
 80008fc:	edd3 6a00 	vldr	s13, [r3]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3304      	adds	r3, #4
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800090c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3308      	adds	r3, #8
 8000914:	edd3 6a00 	vldr	s13, [r3]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3308      	adds	r3, #8
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	330c      	adds	r3, #12
 800092c:	edd3 6a00 	vldr	s13, [r3]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	330c      	adds	r3, #12
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800093c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000940:	eeb0 0a67 	vmov.f32	s0, s15
 8000944:	f000 f91e 	bl	8000b84 <invSqrt>
 8000948:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	ed97 7a07 	vldr	s14, [r7, #28]
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3304      	adds	r3, #4
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ed97 7a07 	vldr	s14, [r7, #28]
 800096a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800096e:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3308      	adds	r3, #8
 8000976:	edd3 7a00 	vldr	s15, [r3]
 800097a:	ed97 7a07 	vldr	s14, [r7, #28]
 800097e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000982:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	330c      	adds	r3, #12
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000996:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 800099a:	ed97 7a05 	vldr	s14, [r7, #20]
 800099e:	edd7 7a04 	vldr	s15, [r7, #16]
 80009a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80009aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80009ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80009be:	edd7 7a06 	vldr	s15, [r7, #24]
 80009c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c6:	edd7 6a05 	vldr	s13, [r7, #20]
 80009ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80009da:	edd7 7a04 	vldr	s15, [r7, #16]
 80009de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009e6:	edd7 6a03 	vldr	s13, [r7, #12]
 80009ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f6:	eef0 0a67 	vmov.f32	s1, s15
 80009fa:	eeb0 0a46 	vmov.f32	s0, s12
 80009fe:	f004 fa35 	bl	8004e6c <atan2f>
 8000a02:	eef0 7a40 	vmov.f32	s15, s0
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <Quaternion_Update+0x28c>)
 8000a08:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8000a0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a18:	edd7 6a06 	vldr	s13, [r7, #24]
 8000a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a30:	f004 f9c4 	bl	8004dbc <asinf>
 8000a34:	eef0 7a40 	vmov.f32	s15, s0
 8000a38:	eef1 7a67 	vneg.f32	s15, s15
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <Quaternion_Update+0x290>)
 8000a3e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8000a42:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a5e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000a62:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a7e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a9e:	eef0 0a67 	vmov.f32	s1, s15
 8000aa2:	eeb0 0a46 	vmov.f32	s0, s12
 8000aa6:	f004 f9e1 	bl	8004e6c <atan2f>
 8000aaa:	eef0 7a40 	vmov.f32	s15, s0
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <Quaternion_Update+0x294>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <Quaternion_Update+0x28c>)
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000b78 <Quaternion_Update+0x298>
 8000abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <Quaternion_Update+0x28c>)
 8000ac4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <Quaternion_Update+0x290>)
 8000aca:	edd3 7a00 	vldr	s15, [r3]
 8000ace:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000b78 <Quaternion_Update+0x298>
 8000ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <Quaternion_Update+0x290>)
 8000ad8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <Quaternion_Update+0x294>)
 8000ade:	edd3 7a00 	vldr	s15, [r3]
 8000ae2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000b78 <Quaternion_Update+0x298>
 8000ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <Quaternion_Update+0x294>)
 8000aec:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <Quaternion_Update+0x294>)
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	db0a      	blt.n	8000b16 <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <Quaternion_Update+0x294>)
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000b7c <Quaternion_Update+0x29c>
 8000b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <Quaternion_Update+0x294>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]
 8000b14:	e007      	b.n	8000b26 <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <Quaternion_Update+0x294>)
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	eef1 7a67 	vneg.f32	s15, s15
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <Quaternion_Update+0x294>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b34:	db0a      	blt.n	8000b4c <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b38:	edd3 7a00 	vldr	s15, [r3]
 8000b3c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000b80 <Quaternion_Update+0x2a0>
 8000b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b46:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8000b4a:	e00b      	b.n	8000b64 <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b4e:	edd3 7a00 	vldr	s15, [r3]
 8000b52:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000b80 <Quaternion_Update+0x2a0>
 8000b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b5a:	eef1 7a67 	vneg.f32	s15, s15
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b60:	edc3 7a00 	vstr	s15, [r3]
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000010c 	.word	0x2000010c
 8000b70:	20000104 	.word	0x20000104
 8000b74:	20000108 	.word	0x20000108
 8000b78:	42652ee1 	.word	0x42652ee1
 8000b7c:	43b40000 	.word	0x43b40000
 8000b80:	43340000 	.word	0x43340000

08000b84 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	105a      	asrs	r2, r3, #1
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <invSqrt+0x74>)
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000bbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	ee07 3a90 	vmov	s15, r3
}
 8000bea:	eeb0 0a67 	vmov.f32	s0, s15
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	5f3759df 	.word	0x5f3759df

08000bfc <bno080_Initialization>:
volatile uint8_t bnoIntFl = 0;
volatile uint8_t constantRead = 0;


uint8_t bno080_Initialization(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(BNO_IRQN);
 8000c00:	2028      	movs	r0, #40	; 0x28
 8000c02:	f001 fa60 	bl	80020c6 <HAL_NVIC_DisableIRQ>

	BNO_DESELECT;
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <bno080_Initialization+0x64>)
 8000c0e:	f001 ffb7 	bl	8002b80 <HAL_GPIO_WritePin>
	BNO_RESET;
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <bno080_Initialization+0x68>)
 8000c18:	f001 ffb2 	bl	8002b80 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f001 f909 	bl	8001e34 <HAL_Delay>
	BNO_ENABLE;
 8000c22:	2201      	movs	r2, #1
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <bno080_Initialization+0x68>)
 8000c28:	f001 ffaa 	bl	8002b80 <HAL_GPIO_WritePin>

	//Wait for first assertion of INT before using WAK pin. Can take ~104ms
	if(waitForSPI(BNO_NOREAD) != 1)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f91f 	bl	8000e70 <waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When bno080 first boots it broadcasts big startup packet
	//Read it and dump it
	if(waitForSPI(BNO_READ) != 1) //Wait for assertion of INT before reading advert message.
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 f91c 	bl	8000e70 <waitForSPI>
	}
	//receivePacket();

	//The bno080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	if(waitForSPI(BNO_READ) != 1) //Wait for assertion of INT before reading Init response
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f000 f919 	bl	8000e70 <waitForSPI>
		//return 0;
	}
	//receivePacket();

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <bno080_Initialization+0x6c>)
 8000c40:	22f9      	movs	r2, #249	; 0xf9
 8000c42:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <bno080_Initialization+0x6c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	sendPacket(CHANNEL_CONTROL, 2);
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f000 f993 	bl	8000f78 <sendPacket>

	//Now we wait for response
	if(waitForSPI(BNO_READ) != 1)
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 f90c 	bl	8000e70 <waitForSPI>

	if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE){
		//return 1;
	}

	return 0; //Something went wrong
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020800 	.word	0x40020800
 8000c68:	20000160 	.word	0x20000160

08000c6c <bno080_start_IT>:

/*
 * Start Reading in Interrupt Mode
 * */
void bno080_start_IT(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	constantRead = 1;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <bno080_start_IT+0x14>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(BNO_IRQN);
 8000c76:	2028      	movs	r0, #40	; 0x28
 8000c78:	f001 fa17 	bl	80020aa <HAL_NVIC_EnableIRQ>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000bd 	.word	0x200000bd

08000c84 <bno080_qToFloat>:

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float bno080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	ed2d 8b02 	vpush	{d8}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	80fb      	strh	r3, [r7, #6]
 8000c94:	4613      	mov	r3, r2
 8000c96:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000ca4:	797b      	ldrb	r3, [r7, #5]
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb0:	eef0 0a67 	vmov.f32	s1, s15
 8000cb4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000cb8:	f004 f8da 	bl	8004e70 <powf>
 8000cbc:	eef0 7a40 	vmov.f32	s15, s0
 8000cc0:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8000cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	ecbd 8b02 	vpop	{d8}
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <bno080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void bno080_enableRotationVector(uint16_t timeBetweenReports)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	80fb      	strh	r3, [r7, #6]
	setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2005      	movs	r0, #5
 8000ce4:	f000 f804 	bl	8000cf0 <setFeatureCommand>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <setFeatureCommand>:


//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d00:	22fd      	movs	r2, #253	; 0xfd
 8000d02:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d22:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	0a1b      	lsrs	r3, r3, #8
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d2c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	0c1b      	lsrs	r3, r3, #16
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d36:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	0e1b      	lsrs	r3, r3, #24
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d40:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d60:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d6a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d74:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0e1b      	lsrs	r3, r3, #24
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <setFeatureCommand+0xa0>)
 8000d7e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	sendPacket(CHANNEL_CONTROL, 17);
 8000d80:	2111      	movs	r1, #17
 8000d82:	2002      	movs	r0, #2
 8000d84:	f000 f8f8 	bl	8000f78 <sendPacket>
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000160 	.word	0x20000160

08000d94 <bno080_getQuatI>:
}


//Return the rotation vector quaternion I
float bno080_getQuatI(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatI, rotationVector_Q1);
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <bno080_getQuatI+0x24>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <bno080_getQuatI+0x28>)
 8000da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	4610      	mov	r0, r2
 8000daa:	f7ff ff6b 	bl	8000c84 <bno080_qToFloat>
 8000dae:	eef0 7a40 	vmov.f32	s15, s0
}
 8000db2:	eeb0 0a67 	vmov.f32	s0, s15
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200000b2 	.word	0x200000b2
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <bno080_getQuatJ>:

//Return the rotation vector quaternion J
float bno080_getQuatJ(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatJ, rotationVector_Q1);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <bno080_getQuatJ+0x24>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <bno080_getQuatJ+0x28>)
 8000dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	f7ff ff55 	bl	8000c84 <bno080_qToFloat>
 8000dda:	eef0 7a40 	vmov.f32	s15, s0
}
 8000dde:	eeb0 0a67 	vmov.f32	s0, s15
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000b4 	.word	0x200000b4
 8000de8:	20000000 	.word	0x20000000

08000dec <bno080_getQuatK>:

//Return the rotation vector quaternion K
float bno080_getQuatK(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatK, rotationVector_Q1);
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <bno080_getQuatK+0x24>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <bno080_getQuatK+0x28>)
 8000df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4610      	mov	r0, r2
 8000e02:	f7ff ff3f 	bl	8000c84 <bno080_qToFloat>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000b6 	.word	0x200000b6
 8000e14:	20000000 	.word	0x20000000

08000e18 <bno080_getQuatReal>:

//Return the rotation vector quaternion Real
float bno080_getQuatReal(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatReal, rotationVector_Q1);
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <bno080_getQuatReal+0x24>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <bno080_getQuatReal+0x28>)
 8000e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f7ff ff29 	bl	8000c84 <bno080_qToFloat>
 8000e32:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e36:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000b8 	.word	0x200000b8
 8000e40:	20000000 	.word	0x20000000

08000e44 <bno080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float bno080_getQuatRadianAccuracy(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <bno080_getQuatRadianAccuracy+0x24>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <bno080_getQuatRadianAccuracy+0x28>)
 8000e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	4610      	mov	r0, r2
 8000e5a:	f7ff ff13 	bl	8000c84 <bno080_qToFloat>
 8000e5e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e62:	eeb0 0a67 	vmov.f32	s0, s15
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000ba 	.word	0x200000ba
 8000e6c:	20000000 	.word	0x20000000

08000e70 <waitForSPI>:
}
*/


uint8_t waitForSPI(wait_cmd val)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	uint32_t tickstart = HAL_GetTick();
 8000e7a:	f000 ffcf 	bl	8001e1c <HAL_GetTick>
 8000e7e:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(BNO_INT_PORT_F, BNO_INT_PIN_F)){
 8000e80:	e009      	b.n	8000e96 <waitForSPI+0x26>
		if((HAL_GetTick() - tickstart) > 300){
 8000e82:	f000 ffcb 	bl	8001e1c <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e90:	d901      	bls.n	8000e96 <waitForSPI+0x26>
			return 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e00d      	b.n	8000eb2 <waitForSPI+0x42>
	while(HAL_GPIO_ReadPin(BNO_INT_PORT_F, BNO_INT_PIN_F)){
 8000e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <waitForSPI+0x4c>)
 8000e9c:	f001 fe58 	bl	8002b50 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1ed      	bne.n	8000e82 <waitForSPI+0x12>
		}
	}

	if(val == BNO_READ){
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <waitForSPI+0x40>
		receivePacket();
 8000eac:	f000 f808 	bl	8000ec0 <receivePacket>
	}

	return 1;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <receivePacket>:



uint8_t receivePacket(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

	BNO_SELECT;
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4826      	ldr	r0, [pc, #152]	; (8000f68 <receivePacket+0xa8>)
 8000ece:	f001 fe57 	bl	8002b80 <HAL_GPIO_WritePin>
	//Get the first four bytes, aka the packet header
	HAL_SPI_Receive(BNO_SPI, shtpHeader, 4, 100);
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	4925      	ldr	r1, [pc, #148]	; (8000f6c <receivePacket+0xac>)
 8000ed8:	4825      	ldr	r0, [pc, #148]	; (8000f70 <receivePacket+0xb0>)
 8000eda:	f002 fd8f 	bl	80039fc <HAL_SPI_Receive>

	//Calculate the number of data bytes in this packet
	uint16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <receivePacket+0xac>)
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <receivePacket+0xac>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	817b      	strh	r3, [r7, #10]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8000ef2:	897b      	ldrh	r3, [r7, #10]
 8000ef4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ef8:	817b      	strh	r3, [r7, #10]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8000efa:	897b      	ldrh	r3, [r7, #10]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <receivePacket+0x44>
	{
		//Packet is empty
		return 0; //All done
 8000f00:	2300      	movs	r3, #0
 8000f02:	e02c      	b.n	8000f5e <receivePacket+0x9e>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8000f04:	897b      	ldrh	r3, [r7, #10]
 8000f06:	3b04      	subs	r3, #4
 8000f08:	817b      	strh	r3, [r7, #10]

	if(dataLength < MAX_PACKET_SIZE){
 8000f0a:	897b      	ldrh	r3, [r7, #10]
 8000f0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f0e:	d806      	bhi.n	8000f1e <receivePacket+0x5e>
		HAL_SPI_Receive(BNO_SPI, shtpData, dataLength, 200);
 8000f10:	897a      	ldrh	r2, [r7, #10]
 8000f12:	23c8      	movs	r3, #200	; 0xc8
 8000f14:	4917      	ldr	r1, [pc, #92]	; (8000f74 <receivePacket+0xb4>)
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <receivePacket+0xb0>)
 8000f18:	f002 fd70 	bl	80039fc <HAL_SPI_Receive>
 8000f1c:	e018      	b.n	8000f50 <receivePacket+0x90>
	}else{
		HAL_SPI_Receive(BNO_SPI, shtpData, MAX_PACKET_SIZE, 200);
 8000f1e:	23c8      	movs	r3, #200	; 0xc8
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	4914      	ldr	r1, [pc, #80]	; (8000f74 <receivePacket+0xb4>)
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <receivePacket+0xb0>)
 8000f26:	f002 fd69 	bl	80039fc <HAL_SPI_Receive>

		uint16_t data_left = dataLength - MAX_PACKET_SIZE;
 8000f2a:	897b      	ldrh	r3, [r7, #10]
 8000f2c:	3b80      	subs	r3, #128	; 0x80
 8000f2e:	813b      	strh	r3, [r7, #8]
		uint8_t tmp_buff;
		for(int i=0; i < data_left; i++){
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e008      	b.n	8000f48 <receivePacket+0x88>
			HAL_SPI_Receive(BNO_SPI, &tmp_buff, 1, 100); /// ??
 8000f36:	1df9      	adds	r1, r7, #7
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <receivePacket+0xb0>)
 8000f3e:	f002 fd5d 	bl	80039fc <HAL_SPI_Receive>
		for(int i=0; i < data_left; i++){
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3301      	adds	r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	893b      	ldrh	r3, [r7, #8]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf2      	blt.n	8000f36 <receivePacket+0x76>
		}

	}

	BNO_DESELECT;
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <receivePacket+0xa8>)
 8000f58:	f001 fe12 	bl	8002b80 <HAL_GPIO_WritePin>

	return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	20000110 	.word	0x20000110
 8000f70:	20000244 	.word	0x20000244
 8000f74:	20000160 	.word	0x20000160

08000f78 <sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
uint8_t sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	73fb      	strb	r3, [r7, #15]

	//Wait for bno080 to indicate it is available for communication
	if(waitForSPI(BNO_NOREAD) == 0)
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff ff6e 	bl	8000e70 <waitForSPI>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <sendPacket+0x26>
	{
		return 0; //Data is not available
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e02b      	b.n	8000ff6 <sendPacket+0x7e>
	}

	uint8_t bno_buffer[4] = {packetLength & 0xFF, packetLength >> 8, channelNumber, sequenceNumber[channelNumber]++};
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	723b      	strb	r3, [r7, #8]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	121b      	asrs	r3, r3, #8
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	727b      	strb	r3, [r7, #9]
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	72bb      	strb	r3, [r7, #10]
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4a13      	ldr	r2, [pc, #76]	; (8001000 <sendPacket+0x88>)
 8000fb2:	5cd2      	ldrb	r2, [r2, r3]
 8000fb4:	1c51      	adds	r1, r2, #1
 8000fb6:	b2c8      	uxtb	r0, r1
 8000fb8:	4911      	ldr	r1, [pc, #68]	; (8001000 <sendPacket+0x88>)
 8000fba:	54c8      	strb	r0, [r1, r3]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	72fb      	strb	r3, [r7, #11]

	BNO_SELECT;
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <sendPacket+0x8c>)
 8000fc8:	f001 fdda 	bl	8002b80 <HAL_GPIO_WritePin>
	//Send the 4 byte packet header
	HAL_SPI_Transmit(BNO_SPI, bno_buffer, 4, 200);
 8000fcc:	f107 0108 	add.w	r1, r7, #8
 8000fd0:	23c8      	movs	r3, #200	; 0xc8
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <sendPacket+0x90>)
 8000fd6:	f002 fbdd 	bl	8003794 <HAL_SPI_Transmit>
	//Send the user's data packet
	HAL_SPI_Transmit(BNO_SPI, shtpData, dataLength, 200);
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	23c8      	movs	r3, #200	; 0xc8
 8000fe0:	490a      	ldr	r1, [pc, #40]	; (800100c <sendPacket+0x94>)
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <sendPacket+0x90>)
 8000fe4:	f002 fbd6 	bl	8003794 <HAL_SPI_Transmit>

	BNO_DESELECT;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <sendPacket+0x8c>)
 8000ff0:	f001 fdc6 	bl	8002b80 <HAL_GPIO_WritePin>
	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000ac 	.word	0x200000ac
 8001004:	40020000 	.word	0x40020000
 8001008:	20000244 	.word	0x20000244
 800100c:	20000160 	.word	0x20000160

08001010 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BNO_INT_PIN_F){
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001020:	d12f      	bne.n	8001082 <HAL_GPIO_EXTI_Callback+0x72>
		bnoIntFl = 1;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]

		// Read data constantly after each interrupt
		if(constantRead)
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_GPIO_EXTI_Callback+0x80>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d027      	beq.n	8001082 <HAL_GPIO_EXTI_Callback+0x72>
		{
			receivePacket();
 8001032:	f7ff ff45 	bl	8000ec0 <receivePacket>
			q[0] = bno080_getQuatI();
 8001036:	f7ff fead 	bl	8000d94 <bno080_getQuatI>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_GPIO_EXTI_Callback+0x84>)
 8001040:	edc3 7a00 	vstr	s15, [r3]
			q[1] = bno080_getQuatJ();
 8001044:	f7ff febc 	bl	8000dc0 <bno080_getQuatJ>
 8001048:	eef0 7a40 	vmov.f32	s15, s0
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_GPIO_EXTI_Callback+0x84>)
 800104e:	edc3 7a01 	vstr	s15, [r3, #4]
			q[2] = bno080_getQuatK();
 8001052:	f7ff fecb 	bl	8000dec <bno080_getQuatK>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_GPIO_EXTI_Callback+0x84>)
 800105c:	edc3 7a02 	vstr	s15, [r3, #8]
			q[3] = bno080_getQuatReal();
 8001060:	f7ff feda 	bl	8000e18 <bno080_getQuatReal>
 8001064:	eef0 7a40 	vmov.f32	s15, s0
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_GPIO_EXTI_Callback+0x84>)
 800106a:	edc3 7a03 	vstr	s15, [r3, #12]
			quatRadianAccuracy = bno080_getQuatRadianAccuracy();
 800106e:	f7ff fee9 	bl	8000e44 <bno080_getQuatRadianAccuracy>
 8001072:	eef0 7a40 	vmov.f32	s15, s0
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_GPIO_EXTI_Callback+0x88>)
 8001078:	edc3 7a00 	vstr	s15, [r3]

			Quaternion_Update(&q[0]);
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_GPIO_EXTI_Callback+0x84>)
 800107e:	f7ff fc2f 	bl	80008e0 <Quaternion_Update>
		}

	}
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000bc 	.word	0x200000bc
 8001090:	200000bd 	.word	0x200000bd
 8001094:	20000004 	.word	0x20000004
 8001098:	20000118 	.word	0x20000118

0800109c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_DMA_Init+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <MX_DMA_Init+0x88>)
 80010ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_DMA_Init+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_DMA_Init+0x88>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <MX_DMA_Init+0x88>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_DMA_Init+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	200d      	movs	r0, #13
 80010e0:	f000 ffc7 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010e4:	200d      	movs	r0, #13
 80010e6:	f000 ffe0 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 ffbf 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010f4:	200f      	movs	r0, #15
 80010f6:	f000 ffd8 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2038      	movs	r0, #56	; 0x38
 8001100:	f000 ffb7 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001104:	2038      	movs	r0, #56	; 0x38
 8001106:	f000 ffd0 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	203b      	movs	r0, #59	; 0x3b
 8001110:	f000 ffaf 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001114:	203b      	movs	r0, #59	; 0x3b
 8001116:	f000 ffc8 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <_ZN5CGNSSC1Ev>:


class CGNSS
{
  public:
    CGNSS(){}
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_ZN8CSensorsC1Ev>:
};

class CSensors
{
public:
      CSensors() {}
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffed 	bl	8001128 <_ZN5CGNSSC1Ev>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_Z41__static_initialization_and_destruction_0ii>:
{
	mshort x;
	x.b[1] = b[1];
	x.b[0] = b[0];
	return(x.i);
}
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d107      	bne.n	8001178 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116e:	4293      	cmp	r3, r2
 8001170:	d102      	bne.n	8001178 <_Z41__static_initialization_and_destruction_0ii+0x20>
CSensors gnss_sensor;
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001174:	f7ff ffe3 	bl	800113e <_ZN8CSensorsC1Ev>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000c0 	.word	0x200000c0

08001184 <_GLOBAL__sub_I_rxString>:
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
 8001188:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ffe3 	bl	8001158 <_Z41__static_initialization_and_destruction_0ii>
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b73      	ldr	r3, [pc, #460]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a72      	ldr	r2, [pc, #456]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b70      	ldr	r3, [pc, #448]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b6c      	ldr	r3, [pc, #432]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a6b      	ldr	r2, [pc, #428]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b69      	ldr	r3, [pc, #420]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b65      	ldr	r3, [pc, #404]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a64      	ldr	r2, [pc, #400]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <MX_GPIO_Init+0x1e8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <MX_GPIO_Init+0x1e8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a5d      	ldr	r2, [pc, #372]	; (800137c <MX_GPIO_Init+0x1e8>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b5b      	ldr	r3, [pc, #364]	; (800137c <MX_GPIO_Init+0x1e8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8001220:	4857      	ldr	r0, [pc, #348]	; (8001380 <MX_GPIO_Init+0x1ec>)
 8001222:	f001 fcad 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RPI_INT_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 7150 	mov.w	r1, #832	; 0x340
 800122c:	4855      	ldr	r0, [pc, #340]	; (8001384 <MX_GPIO_Init+0x1f0>)
 800122e:	f001 fca7 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	4853      	ldr	r0, [pc, #332]	; (8001384 <MX_GPIO_Init+0x1f0>)
 8001238:	f001 fca2 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001242:	4851      	ldr	r0, [pc, #324]	; (8001388 <MX_GPIO_Init+0x1f4>)
 8001244:	f001 fc9c 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124e:	484e      	ldr	r0, [pc, #312]	; (8001388 <MX_GPIO_Init+0x1f4>)
 8001250:	f001 fc96 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_CS_Pin|BNO_RST_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2130      	movs	r1, #48	; 0x30
 8001258:	4849      	ldr	r0, [pc, #292]	; (8001380 <MX_GPIO_Init+0x1ec>)
 800125a:	f001 fc91 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 800125e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4842      	ldr	r0, [pc, #264]	; (8001380 <MX_GPIO_Init+0x1ec>)
 8001278:	f001 fad0 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800127c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001286:	2302      	movs	r3, #2
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <MX_GPIO_Init+0x1ec>)
 8001296:	f001 fac1 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPI_INT_Pin;
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RPI_INT_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4834      	ldr	r0, [pc, #208]	; (8001384 <MX_GPIO_Init+0x1f0>)
 80012b2:	f001 fab3 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	482d      	ldr	r0, [pc, #180]	; (8001384 <MX_GPIO_Init+0x1f0>)
 80012ce:	f001 faa5 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4826      	ldr	r0, [pc, #152]	; (8001384 <MX_GPIO_Init+0x1f0>)
 80012ec:	f001 fa96 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	481f      	ldr	r0, [pc, #124]	; (8001388 <MX_GPIO_Init+0x1f4>)
 800130a:	f001 fa87 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_GPIO_Init+0x1f8>)
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001318:	2302      	movs	r3, #2
 800131a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4819      	ldr	r0, [pc, #100]	; (8001388 <MX_GPIO_Init+0x1f4>)
 8001324:	f001 fa7a 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_GPIO_Init+0x1f4>)
 8001342:	f001 fa6b 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BNO_CS_Pin|BNO_RST_Pin;
 8001346:	2330      	movs	r3, #48	; 0x30
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <MX_GPIO_Init+0x1ec>)
 800135e:	f001 fa5d 	bl	800281c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	2028      	movs	r0, #40	; 0x28
 8001368:	f000 fe83 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800136c:	2028      	movs	r0, #40	; 0x28
 800136e:	f000 fe9c 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020000 	.word	0x40020000
 800138c:	10210000 	.word	0x10210000

08001390 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_I2C1_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <MX_I2C1_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_I2C1_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013ce:	f001 fc09 	bl	8002be4 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 f8fe 	bl	80015d8 <Error_Handler>
  }

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001f0 	.word	0x200001f0
 80013e4:	40005400 	.word	0x40005400
 80013e8:	000186a0 	.word	0x000186a0

080013ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_I2C_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800142a:	23c0      	movs	r3, #192	; 0xc0
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	2312      	movs	r3, #18
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143a:	2304      	movs	r3, #4
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_I2C_MspInit+0x8c>)
 8001446:	f001 f9e9 	bl	800281c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_I2C_MspInit+0x88>)
 8001454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_I2C_MspInit+0x88>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40005400 	.word	0x40005400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020400 	.word	0x40020400

0800147c <HAL_SPI_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001494:	f000 fc5c 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001498:	f000 f834 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149c:	f7ff fe7a 	bl	8001194 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a0:	f7ff fdfc 	bl	800109c <MX_DMA_Init>
  MX_SPI3_Init();
 80014a4:	f000 f908 	bl	80016b8 <MX_SPI3_Init>
  MX_UART4_Init();
 80014a8:	f000 fb50 	bl	8001b4c <MX_UART4_Init>
  MX_I2C1_Init();
 80014ac:	f7ff ff70 	bl	8001390 <MX_I2C1_Init>
  MX_SPI2_Init();
 80014b0:	f000 f8cc 	bl	800164c <MX_SPI2_Init>
  MX_SPI1_Init();
 80014b4:	f000 f898 	bl	80015e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  bno080_Initialization();  // READ sensor in external interrupt  - void EXTI9_5_IRQHandler(void)
 80014b8:	f7ff fba0 	bl	8000bfc <bno080_Initialization>
  bno080_enableRotationVector(9500); //enable rotation vector at 200Hz
 80014bc:	f242 501c 	movw	r0, #9500	; 0x251c
 80014c0:	f7ff fc07 	bl	8000cd2 <bno080_enableRotationVector>
  bno080_start_IT();
 80014c4:	f7ff fbd2 	bl	8000c6c <bno080_start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //TrOne_ReadDist(&sens[0]);

	 HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&spi_data, sizeof(spi_data));
 80014c8:	220a      	movs	r2, #10
 80014ca:	490b      	ldr	r1, [pc, #44]	; (80014f8 <main+0x68>)
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <main+0x6c>)
 80014ce:	f002 fd41 	bl	8003f54 <HAL_SPI_Transmit_DMA>
	 HAL_GPIO_WritePin (RPI_INT_GPIO_Port, RPI_INT_Pin, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	480a      	ldr	r0, [pc, #40]	; (8001500 <main+0x70>)
 80014d8:	f001 fb52 	bl	8002b80 <HAL_GPIO_WritePin>
	 HAL_Delay(1000);
 80014dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e0:	f000 fca8 	bl	8001e34 <HAL_Delay>

	 HAL_GPIO_WritePin (RPI_INT_GPIO_Port, RPI_INT_Pin, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <main+0x70>)
 80014ea:	f001 fb49 	bl	8002b80 <HAL_GPIO_WritePin>
	 HAL_Delay(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f2:	f000 fc9f 	bl	8001e34 <HAL_Delay>
	 HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&spi_data, sizeof(spi_data));
 80014f6:	e7e7      	b.n	80014c8 <main+0x38>
 80014f8:	20000014 	.word	0x20000014
 80014fc:	200002f4 	.word	0x200002f4
 8001500:	40020800 	.word	0x40020800

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2230      	movs	r2, #48	; 0x30
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f004 fc50 	bl	8005db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <SystemClock_Config+0xcc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <SystemClock_Config+0xcc>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <SystemClock_Config+0xcc>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <SystemClock_Config+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <SystemClock_Config+0xd0>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <SystemClock_Config+0xd0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001574:	2306      	movs	r3, #6
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001578:	23a8      	movs	r3, #168	; 0xa8
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fc63 	bl	8002e54 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001594:	f000 f820 	bl	80015d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2105      	movs	r1, #5
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 febc 	bl	8003334 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015c2:	f000 f809 	bl	80015d8 <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3750      	adds	r7, #80	; 0x50
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_SPI1_Init+0x5c>)
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <MX_SPI1_Init+0x60>)
 80015f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_SPI1_Init+0x5c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_SPI1_Init+0x5c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_SPI1_Init+0x5c>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_SPI1_Init+0x5c>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_SPI1_Init+0x5c>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_SPI1_Init+0x5c>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_SPI1_Init+0x5c>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_SPI1_Init+0x5c>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_SPI1_Init+0x5c>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_SPI1_Init+0x5c>)
 800162a:	220a      	movs	r2, #10
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_SPI1_Init+0x5c>)
 8001630:	f002 f84c 	bl	80036cc <HAL_SPI_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800163a:	f7ff ffcd 	bl	80015d8 <Error_Handler>
  }

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200002f4 	.word	0x200002f4
 8001648:	40013000 	.word	0x40013000

0800164c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <MX_SPI2_Init+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800165c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_SPI2_Init+0x64>)
 800166c:	2202      	movs	r2, #2
 800166e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001672:	2201      	movs	r2, #1
 8001674:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001680:	2218      	movs	r2, #24
 8001682:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_SPI2_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_SPI2_Init+0x64>)
 8001698:	220a      	movs	r2, #10
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_SPI2_Init+0x64>)
 800169e:	f002 f815 	bl	80036cc <HAL_SPI_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016a8:	f7ff ff96 	bl	80015d8 <Error_Handler>
  }

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000244 	.word	0x20000244
 80016b4:	40003800 	.word	0x40003800

080016b8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_SPI3_Init+0x64>)
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <MX_SPI3_Init+0x68>)
 80016c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_SPI3_Init+0x64>)
 80016c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_SPI3_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_SPI3_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_SPI3_Init+0x64>)
 80016d8:	2202      	movs	r2, #2
 80016da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_SPI3_Init+0x64>)
 80016de:	2201      	movs	r2, #1
 80016e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_SPI3_Init+0x64>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_SPI3_Init+0x64>)
 80016ec:	2218      	movs	r2, #24
 80016ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <MX_SPI3_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_SPI3_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <MX_SPI3_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_SPI3_Init+0x64>)
 8001704:	220a      	movs	r2, #10
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_SPI3_Init+0x64>)
 800170a:	f001 ffdf 	bl	80036cc <HAL_SPI_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001714:	f7ff ff60 	bl	80015d8 <Error_Handler>
  }

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000029c 	.word	0x2000029c
 8001720:	40003c00 	.word	0x40003c00

08001724 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b090      	sub	sp, #64	; 0x40
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4aa4      	ldr	r2, [pc, #656]	; (80019d4 <HAL_SPI_MspInit+0x2b0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f040 80a1 	bne.w	800188a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
 800174c:	4ba2      	ldr	r3, [pc, #648]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	4aa1      	ldr	r2, [pc, #644]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001756:	6453      	str	r3, [r2, #68]	; 0x44
 8001758:	4b9f      	ldr	r3, [pc, #636]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	4b9b      	ldr	r3, [pc, #620]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a9a      	ldr	r2, [pc, #616]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b98      	ldr	r3, [pc, #608]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001780:	2310      	movs	r3, #16
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001788:	2301      	movs	r3, #1
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001790:	2305      	movs	r3, #5
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001798:	4619      	mov	r1, r3
 800179a:	4890      	ldr	r0, [pc, #576]	; (80019dc <HAL_SPI_MspInit+0x2b8>)
 800179c:	f001 f83e 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017a0:	23e0      	movs	r3, #224	; 0xe0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017a8:	2302      	movs	r3, #2
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b0:	2305      	movs	r3, #5
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4888      	ldr	r0, [pc, #544]	; (80019dc <HAL_SPI_MspInit+0x2b8>)
 80017bc:	f001 f82e 	bl	800281c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80017c0:	4b87      	ldr	r3, [pc, #540]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017c2:	4a88      	ldr	r2, [pc, #544]	; (80019e4 <HAL_SPI_MspInit+0x2c0>)
 80017c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80017c6:	4b86      	ldr	r3, [pc, #536]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017c8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ce:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d4:	4b82      	ldr	r3, [pc, #520]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e2:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e8:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80017ee:	4b7c      	ldr	r3, [pc, #496]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017f4:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017fa:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001800:	4877      	ldr	r0, [pc, #476]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 8001802:	f000 fc7b 	bl	80020fc <HAL_DMA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 800180c:	f7ff fee4 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a73      	ldr	r2, [pc, #460]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 8001814:	64da      	str	r2, [r3, #76]	; 0x4c
 8001816:	4a72      	ldr	r2, [pc, #456]	; (80019e0 <HAL_SPI_MspInit+0x2bc>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800181c:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 800181e:	4a73      	ldr	r2, [pc, #460]	; (80019ec <HAL_SPI_MspInit+0x2c8>)
 8001820:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001822:	4b71      	ldr	r3, [pc, #452]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001824:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001828:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 800182c:	2240      	movs	r2, #64	; 0x40
 800182e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001830:	4b6d      	ldr	r3, [pc, #436]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001836:	4b6c      	ldr	r3, [pc, #432]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800183e:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 800184c:	2200      	movs	r2, #0
 800184e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001850:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001856:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800185c:	4862      	ldr	r0, [pc, #392]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 800185e:	f000 fc4d 	bl	80020fc <HAL_DMA_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001868:	f7ff feb6 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001870:	649a      	str	r2, [r3, #72]	; 0x48
 8001872:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <HAL_SPI_MspInit+0x2c4>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2023      	movs	r0, #35	; 0x23
 800187e:	f000 fbf8 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001882:	2023      	movs	r0, #35	; 0x23
 8001884:	f000 fc11 	bl	80020aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001888:	e0a0      	b.n	80019cc <HAL_SPI_MspInit+0x2a8>
  else if(spiHandle->Instance==SPI2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_SPI_MspInit+0x2cc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d14b      	bne.n	800192c <HAL_SPI_MspInit+0x208>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a47      	ldr	r2, [pc, #284]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a40      	ldr	r2, [pc, #256]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e8:	230c      	movs	r3, #12
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f8:	2305      	movs	r3, #5
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	483c      	ldr	r0, [pc, #240]	; (80019f4 <HAL_SPI_MspInit+0x2d0>)
 8001904:	f000 ff8a 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800191a:	2305      	movs	r3, #5
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	4834      	ldr	r0, [pc, #208]	; (80019f8 <HAL_SPI_MspInit+0x2d4>)
 8001926:	f000 ff79 	bl	800281c <HAL_GPIO_Init>
}
 800192a:	e04f      	b.n	80019cc <HAL_SPI_MspInit+0x2a8>
  else if(spiHandle->Instance==SPI3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a32      	ldr	r2, [pc, #200]	; (80019fc <HAL_SPI_MspInit+0x2d8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d14a      	bne.n	80019cc <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_SPI_MspInit+0x2b4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800198a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800199c:	2306      	movs	r3, #6
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a4:	4619      	mov	r1, r3
 80019a6:	4813      	ldr	r0, [pc, #76]	; (80019f4 <HAL_SPI_MspInit+0x2d0>)
 80019a8:	f000 ff38 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ac:	2308      	movs	r3, #8
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019bc:	2306      	movs	r3, #6
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	480c      	ldr	r0, [pc, #48]	; (80019f8 <HAL_SPI_MspInit+0x2d4>)
 80019c8:	f000 ff28 	bl	800281c <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3740      	adds	r7, #64	; 0x40
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013000 	.word	0x40013000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	2000034c 	.word	0x2000034c
 80019e4:	40026410 	.word	0x40026410
 80019e8:	200003ac 	.word	0x200003ac
 80019ec:	40026458 	.word	0x40026458
 80019f0:	40003800 	.word	0x40003800
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40003c00 	.word	0x40003c00

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f9a6 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <DMA1_Stream2_IRQHandler+0x10>)
 8001ab2:	f000 fc4b 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000040c 	.word	0x2000040c

08001ac0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <DMA1_Stream4_IRQHandler+0x10>)
 8001ac6:	f000 fc41 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200004ac 	.word	0x200004ac

08001ad4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <SPI1_IRQHandler+0x10>)
 8001ada:	f002 fae9 	bl	80040b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002f4 	.word	0x200002f4

08001ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001aec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001af0:	f001 f860 	bl	8002bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <DMA2_Stream0_IRQHandler+0x10>)
 8001afe:	f000 fc25 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000034c 	.word	0x2000034c

08001b0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <DMA2_Stream3_IRQHandler+0x10>)
 8001b12:	f000 fc1b 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003ac 	.word	0x200003ac

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <SystemInit+0x28>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <SystemInit+0x28>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SystemInit+0x28>)
 8001b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_UART4_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b58:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001b5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_UART4_Init+0x4c>)
 8001b84:	f002 fd50 	bl	8004628 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f7ff fd23 	bl	80015d8 <Error_Handler>
  }

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000046c 	.word	0x2000046c
 8001b9c:	40004c00 	.word	0x40004c00

08001ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a48      	ldr	r2, [pc, #288]	; (8001ce0 <HAL_UART_MspInit+0x140>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	f040 808a 	bne.w	8001cd8 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_UART_MspInit+0x144>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a45      	ldr	r2, [pc, #276]	; (8001ce4 <HAL_UART_MspInit+0x144>)
 8001bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_UART_MspInit+0x144>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_UART_MspInit+0x144>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a3e      	ldr	r2, [pc, #248]	; (8001ce4 <HAL_UART_MspInit+0x144>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <HAL_UART_MspInit+0x144>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4834      	ldr	r0, [pc, #208]	; (8001ce8 <HAL_UART_MspInit+0x148>)
 8001c18:	f000 fe00 	bl	800281c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001c1c:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c1e:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_UART_MspInit+0x150>)
 8001c20:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c28:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c50:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c5e:	4823      	ldr	r0, [pc, #140]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c60:	f000 fa4c 	bl	80020fc <HAL_DMA_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001c6a:	f7ff fcb5 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_UART_MspInit+0x14c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_UART_MspInit+0x158>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c86:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cae:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001cbe:	f000 fa1d 	bl	80020fc <HAL_DMA_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001cc8:	f7ff fc86 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_UART_MspInit+0x154>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40004c00 	.word	0x40004c00
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	2000040c 	.word	0x2000040c
 8001cf0:	40026040 	.word	0x40026040
 8001cf4:	200004ac 	.word	0x200004ac
 8001cf8:	40026070 	.word	0x40026070

08001cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d02:	e003      	b.n	8001d0c <LoopCopyDataInit>

08001d04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d0a:	3104      	adds	r1, #4

08001d0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d14:	d3f6      	bcc.n	8001d04 <CopyDataInit>
  ldr  r2, =_sbss
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d18:	e002      	b.n	8001d20 <LoopFillZerobss>

08001d1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d1c:	f842 3b04 	str.w	r3, [r2], #4

08001d20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d24:	d3f9      	bcc.n	8001d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d26:	f7ff fefb 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f004 f821 	bl	8005d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2e:	f7ff fbaf 	bl	8001490 <main>
  bx  lr    
 8001d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d38:	08005e60 	.word	0x08005e60
  ldr  r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d40:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001d44:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001d48:	20000510 	.word	0x20000510

08001d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_Init+0x40>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_Init+0x40>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_Init+0x40>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f96f 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fe3c 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f995 	bl	80020e2 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 f94f 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000020 	.word	0x20000020
 8001dec:	20000028 	.word	0x20000028
 8001df0:	20000024 	.word	0x20000024

08001df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000028 	.word	0x20000028
 8001e18:	2000050c 	.word	0x2000050c

08001e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000050c 	.word	0x2000050c

08001e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff ffee 	bl	8001e1c <HAL_GetTick>
 8001e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d005      	beq.n	8001e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_Delay+0x40>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5a:	bf00      	nop
 8001e5c:	f7ff ffde 	bl	8001e1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d8f7      	bhi.n	8001e5c <HAL_Delay+0x28>
  {
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000028 	.word	0x20000028

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db10      	blt.n	8001f4c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4909      	ldr	r1, [pc, #36]	; (8001f58 <__NVIC_DisableIRQ+0x40>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	3320      	adds	r3, #32
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f48:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff07 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff1c 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff0f 	bl	8001edc <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff1f 	bl	8001f18 <__NVIC_DisableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff94 	bl	8002018 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff fe88 	bl	8001e1c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e099      	b.n	800224c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002138:	e00f      	b.n	800215a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800213a:	f7ff fe6f 	bl	8001e1c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b05      	cmp	r3, #5
 8002146:	d908      	bls.n	800215a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2203      	movs	r2, #3
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e078      	b.n	800224c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e8      	bne.n	800213a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_DMA_Init+0x158>)
 8002174:	4013      	ands	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002186:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d107      	bne.n	80021c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4313      	orrs	r3, r2
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f023 0307 	bic.w	r3, r3, #7
 80021da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d117      	bne.n	800221e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fa91 	bl	8002728 <DMA_CheckFifoParam>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800221a:	2301      	movs	r3, #1
 800221c:	e016      	b.n	800224c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fa48 	bl	80026bc <DMA_CalcBaseAndBitshift>
 800222c:	4603      	mov	r3, r0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	223f      	movs	r2, #63	; 0x3f
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	f010803f 	.word	0xf010803f

08002258 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_DMA_Start_IT+0x26>
 800227a:	2302      	movs	r3, #2
 800227c:	e040      	b.n	8002300 <HAL_DMA_Start_IT+0xa8>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d12f      	bne.n	80022f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f9da 	bl	8002660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	223f      	movs	r2, #63	; 0x3f
 80022b2:	409a      	lsls	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0216 	orr.w	r2, r2, #22
 80022c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e005      	b.n	80022fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
 80022fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002358:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_DMA_IRQHandler+0x258>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_DMA_IRQHandler+0x25c>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2208      	movs	r2, #8
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2208      	movs	r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2210      	movs	r2, #16
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2210      	movs	r2, #16
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d018      	beq.n	800248e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e01f      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e016      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2220      	movs	r2, #32
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808e 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8086 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2220      	movs	r2, #32
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d136      	bne.n	8002564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x1da>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07d      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
        }
        return;
 8002562:	e078      	b.n	8002656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d108      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d030      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e02b      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d027      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e022      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
 80025a4:	20000020 	.word	0x20000020
 80025a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0210 	bic.w	r2, r2, #16
 80025c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d032      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d022      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	429a      	cmp	r2, r3
 8002620:	d307      	bcc.n	8002632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_DMA_IRQHandler+0x2ca>
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002632:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e000      	b.n	8002658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002656:	bf00      	nop
    }
  }
}
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop

08002660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d108      	bne.n	80026a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269e:	e007      	b.n	80026b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3b10      	subs	r3, #16
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <DMA_CalcBaseAndBitshift+0x64>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d909      	bls.n	80026fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	1d1a      	adds	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58
 80026fc:	e007      	b.n	800270e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	aaaaaaab 	.word	0xaaaaaaab
 8002724:	08005df8 	.word	0x08005df8

08002728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d855      	bhi.n	80027f4 <DMA_CheckFifoParam+0xcc>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <DMA_CheckFifoParam+0x28>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002773 	.word	0x08002773
 8002758:	08002761 	.word	0x08002761
 800275c:	080027f5 	.word	0x080027f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d045      	beq.n	80027f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e042      	b.n	80027f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277a:	d13f      	bne.n	80027fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e03c      	b.n	80027fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d121      	bne.n	80027d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d836      	bhi.n	8002800 <DMA_CheckFifoParam+0xd8>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x70>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027af 	.word	0x080027af
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	080027c1 	.word	0x080027c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e02f      	b.n	800280e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e021      	b.n	8002804 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c8:	d11e      	bne.n	8002808 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ce:	e01b      	b.n	8002808 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <DMA_CheckFifoParam+0xb4>
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d003      	beq.n	80027e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027da:	e018      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e015      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      break;
 80027f2:	e00b      	b.n	800280c <DMA_CheckFifoParam+0xe4>
      break;
 80027f4:	bf00      	nop
 80027f6:	e00a      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027f8:	bf00      	nop
 80027fa:	e008      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027fc:	bf00      	nop
 80027fe:	e006      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002800:	bf00      	nop
 8002802:	e004      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002804:	bf00      	nop
 8002806:	e002      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;   
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 800280c:	bf00      	nop
    }
  } 
  
  return status; 
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e16b      	b.n	8002b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 815a 	bne.w	8002b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d00b      	beq.n	8002876 <HAL_GPIO_Init+0x5a>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d007      	beq.n	8002876 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286a:	2b11      	cmp	r3, #17
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b12      	cmp	r3, #18
 8002874:	d130      	bne.n	80028d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ac:	2201      	movs	r2, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 0201 	and.w	r2, r3, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0xfc>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b12      	cmp	r3, #18
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b4 	beq.w	8002b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_GPIO_Init+0x308>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a5e      	ldr	r2, [pc, #376]	; (8002b24 <HAL_GPIO_Init+0x308>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <HAL_GPIO_Init+0x308>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a5a      	ldr	r2, [pc, #360]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <HAL_GPIO_Init+0x310>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <HAL_GPIO_Init+0x314>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <HAL_GPIO_Init+0x318>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_GPIO_Init+0x31c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4d      	ldr	r2, [pc, #308]	; (8002b3c <HAL_GPIO_Init+0x320>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4c      	ldr	r2, [pc, #304]	; (8002b40 <HAL_GPIO_Init+0x324>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_GPIO_Init+0x328>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x20a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00e      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4934      	ldr	r1, [pc, #208]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a86:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab0:	4a26      	ldr	r2, [pc, #152]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ada:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b04:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f ae90 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3724      	adds	r7, #36	; 0x24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40021400 	.word	0x40021400
 8002b44:	40021800 	.word	0x40021800
 8002b48:	40021c00 	.word	0x40021c00
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	887b      	ldrh	r3, [r7, #2]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e001      	b.n	8002b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b9c:	e003      	b.n	8002ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe fa1c 	bl	8001010 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e11f      	b.n	8002e36 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe fbee 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c48:	f000 fd18 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a7b      	ldr	r2, [pc, #492]	; (8002e40 <HAL_I2C_Init+0x25c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d807      	bhi.n	8002c68 <HAL_I2C_Init+0x84>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a7a      	ldr	r2, [pc, #488]	; (8002e44 <HAL_I2C_Init+0x260>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e006      	b.n	8002c76 <HAL_I2C_Init+0x92>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a77      	ldr	r2, [pc, #476]	; (8002e48 <HAL_I2C_Init+0x264>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0db      	b.n	8002e36 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a72      	ldr	r2, [pc, #456]	; (8002e4c <HAL_I2C_Init+0x268>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0c9b      	lsrs	r3, r3, #18
 8002c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a64      	ldr	r2, [pc, #400]	; (8002e40 <HAL_I2C_Init+0x25c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_I2C_Init+0xd4>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	e009      	b.n	8002ccc <HAL_I2C_Init+0xe8>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	4a63      	ldr	r2, [pc, #396]	; (8002e50 <HAL_I2C_Init+0x26c>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	3301      	adds	r3, #1
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4956      	ldr	r1, [pc, #344]	; (8002e40 <HAL_I2C_Init+0x25c>)
 8002ce8:	428b      	cmp	r3, r1
 8002cea:	d80d      	bhi.n	8002d08 <HAL_I2C_Init+0x124>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e59      	subs	r1, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	bf38      	it	cc
 8002d04:	2304      	movcc	r3, #4
 8002d06:	e04f      	b.n	8002da8 <HAL_I2C_Init+0x1c4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d111      	bne.n	8002d34 <HAL_I2C_Init+0x150>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e58      	subs	r0, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	440b      	add	r3, r1
 8002d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e012      	b.n	8002d5a <HAL_I2C_Init+0x176>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	0099      	lsls	r1, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x17e>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e022      	b.n	8002da8 <HAL_I2C_Init+0x1c4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10e      	bne.n	8002d88 <HAL_I2C_Init+0x1a4>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1e58      	subs	r0, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	440b      	add	r3, r1
 8002d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d86:	e00f      	b.n	8002da8 <HAL_I2C_Init+0x1c4>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	0099      	lsls	r1, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	6809      	ldr	r1, [r1, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6911      	ldr	r1, [r2, #16]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68d2      	ldr	r2, [r2, #12]
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	000186a0 	.word	0x000186a0
 8002e44:	001e847f 	.word	0x001e847f
 8002e48:	003d08ff 	.word	0x003d08ff
 8002e4c:	431bde83 	.word	0x431bde83
 8002e50:	10624dd3 	.word	0x10624dd3

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e25b      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d075      	beq.n	8002f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e72:	4ba3      	ldr	r3, [pc, #652]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d00c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4ba0      	ldr	r3, [pc, #640]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d112      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b9d      	ldr	r3, [pc, #628]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4b99      	ldr	r3, [pc, #612]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05b      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d157      	bne.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e236      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x74>
 8002eba:	4b91      	ldr	r3, [pc, #580]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a90      	ldr	r2, [pc, #576]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x98>
 8002ed2:	4b8b      	ldr	r3, [pc, #556]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a8a      	ldr	r2, [pc, #552]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b88      	ldr	r3, [pc, #544]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a87      	ldr	r2, [pc, #540]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002eec:	4b84      	ldr	r3, [pc, #528]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a83      	ldr	r2, [pc, #524]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b81      	ldr	r3, [pc, #516]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a80      	ldr	r2, [pc, #512]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe ff86 	bl	8001e1c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe ff82 	bl	8001e1c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1fb      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b76      	ldr	r3, [pc, #472]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe ff72 	bl	8001e1c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe ff6e 	bl	8001e1c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1e7      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	4b6c      	ldr	r3, [pc, #432]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0xe8>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d063      	beq.n	8003032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d11c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e1bb      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b56      	ldr	r3, [pc, #344]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4952      	ldr	r1, [pc, #328]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e03a      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	; (8003104 <HAL_RCC_OscConfig+0x2b0>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe ff27 	bl	8001e1c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe ff23 	bl	8001e1c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e19c      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b43      	ldr	r3, [pc, #268]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4940      	ldr	r1, [pc, #256]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_OscConfig+0x2b0>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe ff06 	bl	8001e1c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe ff02 	bl	8001e1c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e17b      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d030      	beq.n	80030a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b30      	ldr	r3, [pc, #192]	; (8003108 <HAL_RCC_OscConfig+0x2b4>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fee6 	bl	8001e1c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003054:	f7fe fee2 	bl	8001e1c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e15b      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x200>
 8003072:	e015      	b.n	80030a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_OscConfig+0x2b4>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fecf 	bl	8001e1c <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fe fecb 	bl	8001e1c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e144      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a0 	beq.w	80031ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x2b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d121      	bne.n	800312e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_RCC_OscConfig+0x2b8>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fe91 	bl	8001e1c <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	e011      	b.n	8003122 <HAL_RCC_OscConfig+0x2ce>
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	42470000 	.word	0x42470000
 8003108:	42470e80 	.word	0x42470e80
 800310c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fe fe84 	bl	8001e1c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0fd      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b81      	ldr	r3, [pc, #516]	; (8003328 <HAL_RCC_OscConfig+0x4d4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x2f0>
 8003136:	4b7d      	ldr	r3, [pc, #500]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a7c      	ldr	r2, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	e01c      	b.n	800317e <HAL_RCC_OscConfig+0x32a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d10c      	bne.n	8003166 <HAL_RCC_OscConfig+0x312>
 800314c:	4b77      	ldr	r3, [pc, #476]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a76      	ldr	r2, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	4b74      	ldr	r3, [pc, #464]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a73      	ldr	r2, [pc, #460]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	e00b      	b.n	800317e <HAL_RCC_OscConfig+0x32a>
 8003166:	4b71      	ldr	r3, [pc, #452]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a70      	ldr	r2, [pc, #448]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
 8003172:	4b6e      	ldr	r3, [pc, #440]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a6d      	ldr	r2, [pc, #436]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe fe49 	bl	8001e1c <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fe45 	bl	8001e1c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0bc      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ee      	beq.n	800318e <HAL_RCC_OscConfig+0x33a>
 80031b0:	e014      	b.n	80031dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fe33 	bl	8001e1c <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe fe2f 	bl	8001e1c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0a6      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	4b56      	ldr	r3, [pc, #344]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e2:	4b52      	ldr	r3, [pc, #328]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a51      	ldr	r2, [pc, #324]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 80031e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8092 	beq.w	800331c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f8:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d05c      	beq.n	80032be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d141      	bne.n	8003290 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b48      	ldr	r3, [pc, #288]	; (8003330 <HAL_RCC_OscConfig+0x4dc>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fe fe03 	bl	8001e1c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe fdff 	bl	8001e1c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e078      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322c:	4b3f      	ldr	r3, [pc, #252]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	019b      	lsls	r3, r3, #6
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	4933      	ldr	r1, [pc, #204]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_RCC_OscConfig+0x4dc>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fdd8 	bl	8001e1c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fdd4 	bl	8001e1c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e04d      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x41c>
 800328e:	e045      	b.n	800331c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCC_OscConfig+0x4dc>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe fdc1 	bl	8001e1c <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe fdbd 	bl	8001e1c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e036      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x44a>
 80032bc:	e02e      	b.n	800331c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e029      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_RCC_OscConfig+0x4d8>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10d      	bne.n	8003318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d106      	bne.n	8003318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000
 800332c:	40023800 	.word	0x40023800
 8003330:	42470060 	.word	0x42470060

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0cc      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b68      	ldr	r3, [pc, #416]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d90c      	bls.n	8003370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b65      	ldr	r3, [pc, #404]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b63      	ldr	r3, [pc, #396]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0b8      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	494d      	ldr	r1, [pc, #308]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d044      	beq.n	8003454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d119      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f2:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e06f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e067      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4934      	ldr	r1, [pc, #208]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	4313      	orrs	r3, r2
 8003422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003424:	f7fe fcfa 	bl	8001e1c <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe fcf6 	bl	8001e1c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e04f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 020c 	and.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d1eb      	bne.n	800342c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003454:	4b25      	ldr	r3, [pc, #148]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d20c      	bcs.n	800347c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e032      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4916      	ldr	r1, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ba:	f000 f821 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034be:	4601      	mov	r1, r0
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	5cd3      	ldrb	r3, [r2, r3]
 80034ce:	fa21 f303 	lsr.w	r3, r1, r3
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe fc5a 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023c00 	.word	0x40023c00
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08005de0 	.word	0x08005de0
 80034f8:	20000020 	.word	0x20000020
 80034fc:	20000024 	.word	0x20000024

08003500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	2300      	movs	r3, #0
 8003510:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003516:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_GetSysClockFreq+0x158>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d007      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x32>
 8003522:	2b08      	cmp	r3, #8
 8003524:	d008      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x38>
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 808d 	bne.w	8003646 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCC_GetSysClockFreq+0x15c>)
 800352e:	60bb      	str	r3, [r7, #8]
       break;
 8003530:	e08c      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003532:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <HAL_RCC_GetSysClockFreq+0x160>)
 8003534:	60bb      	str	r3, [r7, #8]
      break;
 8003536:	e089      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003538:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_GetSysClockFreq+0x158>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003540:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <HAL_RCC_GetSysClockFreq+0x158>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d023      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b42      	ldr	r3, [pc, #264]	; (8003658 <HAL_RCC_GetSysClockFreq+0x158>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	f240 11ff 	movw	r1, #511	; 0x1ff
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	ea03 0501 	and.w	r5, r3, r1
 8003564:	ea04 0602 	and.w	r6, r4, r2
 8003568:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <HAL_RCC_GetSysClockFreq+0x160>)
 800356a:	fb02 f106 	mul.w	r1, r2, r6
 800356e:	2200      	movs	r2, #0
 8003570:	fb02 f205 	mul.w	r2, r2, r5
 8003574:	440a      	add	r2, r1
 8003576:	493a      	ldr	r1, [pc, #232]	; (8003660 <HAL_RCC_GetSysClockFreq+0x160>)
 8003578:	fba5 0101 	umull	r0, r1, r5, r1
 800357c:	1853      	adds	r3, r2, r1
 800357e:	4619      	mov	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f04f 0400 	mov.w	r4, #0
 8003586:	461a      	mov	r2, r3
 8003588:	4623      	mov	r3, r4
 800358a:	f7fd f829 	bl	80005e0 <__aeabi_uldivmod>
 800358e:	4603      	mov	r3, r0
 8003590:	460c      	mov	r4, r1
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e049      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_RCC_GetSysClockFreq+0x158>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	f04f 0400 	mov.w	r4, #0
 80035a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	ea03 0501 	and.w	r5, r3, r1
 80035ac:	ea04 0602 	and.w	r6, r4, r2
 80035b0:	4629      	mov	r1, r5
 80035b2:	4632      	mov	r2, r6
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	f04f 0400 	mov.w	r4, #0
 80035bc:	0154      	lsls	r4, r2, #5
 80035be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035c2:	014b      	lsls	r3, r1, #5
 80035c4:	4619      	mov	r1, r3
 80035c6:	4622      	mov	r2, r4
 80035c8:	1b49      	subs	r1, r1, r5
 80035ca:	eb62 0206 	sbc.w	r2, r2, r6
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	f04f 0400 	mov.w	r4, #0
 80035d6:	0194      	lsls	r4, r2, #6
 80035d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035dc:	018b      	lsls	r3, r1, #6
 80035de:	1a5b      	subs	r3, r3, r1
 80035e0:	eb64 0402 	sbc.w	r4, r4, r2
 80035e4:	f04f 0100 	mov.w	r1, #0
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	00e2      	lsls	r2, r4, #3
 80035ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035f2:	00d9      	lsls	r1, r3, #3
 80035f4:	460b      	mov	r3, r1
 80035f6:	4614      	mov	r4, r2
 80035f8:	195b      	adds	r3, r3, r5
 80035fa:	eb44 0406 	adc.w	r4, r4, r6
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	02a2      	lsls	r2, r4, #10
 8003608:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800360c:	0299      	lsls	r1, r3, #10
 800360e:	460b      	mov	r3, r1
 8003610:	4614      	mov	r4, r2
 8003612:	4618      	mov	r0, r3
 8003614:	4621      	mov	r1, r4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f04f 0400 	mov.w	r4, #0
 800361c:	461a      	mov	r2, r3
 800361e:	4623      	mov	r3, r4
 8003620:	f7fc ffde 	bl	80005e0 <__aeabi_uldivmod>
 8003624:	4603      	mov	r3, r0
 8003626:	460c      	mov	r4, r1
 8003628:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_GetSysClockFreq+0x158>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	3301      	adds	r3, #1
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	60bb      	str	r3, [r7, #8]
      break;
 8003644:	e002      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003648:	60bb      	str	r3, [r7, #8]
      break;
 800364a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364c:	68bb      	ldr	r3, [r7, #8]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	00f42400 	.word	0x00f42400
 8003660:	00b71b00 	.word	0x00b71b00

08003664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCC_GetHCLKFreq+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000020 	.word	0x20000020

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003680:	f7ff fff0 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 8003684:	4601      	mov	r1, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	08005df0 	.word	0x08005df0

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a8:	f7ff ffdc 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 80036ac:	4601      	mov	r1, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0b5b      	lsrs	r3, r3, #13
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08005df0 	.word	0x08005df0

080036cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e056      	b.n	800378c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fe f813 	bl	8001724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003714:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	ea42 0103 	orr.w	r1, r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	f003 0104 	and.w	r1, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_SPI_Transmit+0x22>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e11e      	b.n	80039f4 <HAL_SPI_Transmit+0x260>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037be:	f7fe fb2d 	bl	8001e1c <HAL_GetTick>
 80037c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d002      	beq.n	80037da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037d8:	e103      	b.n	80039e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_Transmit+0x52>
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037ea:	e0fa      	b.n	80039e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2203      	movs	r2, #3
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003832:	d107      	bne.n	8003844 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003842:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d007      	beq.n	8003862 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	d14b      	bne.n	8003904 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_SPI_Transmit+0xe6>
 8003874:	8afb      	ldrh	r3, [r7, #22]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d13e      	bne.n	80038f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	881a      	ldrh	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	1c9a      	adds	r2, r3, #2
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800389e:	e02b      	b.n	80038f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d112      	bne.n	80038d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80038d2:	e011      	b.n	80038f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d4:	f7fe faa2 	bl	8001e1c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d803      	bhi.n	80038ec <HAL_SPI_Transmit+0x158>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d102      	bne.n	80038f2 <HAL_SPI_Transmit+0x15e>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038f6:	e074      	b.n	80039e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ce      	bne.n	80038a0 <HAL_SPI_Transmit+0x10c>
 8003902:	e04c      	b.n	800399e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_Transmit+0x17e>
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d140      	bne.n	8003994 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003938:	e02c      	b.n	8003994 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b02      	cmp	r3, #2
 8003946:	d113      	bne.n	8003970 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	86da      	strh	r2, [r3, #54]	; 0x36
 800396e:	e011      	b.n	8003994 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003970:	f7fe fa54 	bl	8001e1c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d803      	bhi.n	8003988 <HAL_SPI_Transmit+0x1f4>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d102      	bne.n	800398e <HAL_SPI_Transmit+0x1fa>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003992:	e026      	b.n	80039e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1cd      	bne.n	800393a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fdfe 	bl	80045a4 <SPI_EndRxTxTransaction>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e000      	b.n	80039e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80039e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a18:	d112      	bne.n	8003a40 <HAL_SPI_Receive+0x44>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10e      	bne.n	8003a40 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2204      	movs	r2, #4
 8003a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f8e9 	bl	8003c0e <HAL_SPI_TransmitReceive>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	e0e2      	b.n	8003c06 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_SPI_Receive+0x52>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e0db      	b.n	8003c06 <HAL_SPI_Receive+0x20a>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a56:	f7fe f9e1 	bl	8001e1c <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a6c:	e0c2      	b.n	8003bf4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_SPI_Receive+0x7e>
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a7e:	e0b9      	b.n	8003bf4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2204      	movs	r2, #4
 8003a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac6:	d107      	bne.n	8003ad8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b40      	cmp	r3, #64	; 0x40
 8003ae4:	d007      	beq.n	8003af6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d162      	bne.n	8003bc4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003afe:	e02e      	b.n	8003b5e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d115      	bne.n	8003b3a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f103 020c 	add.w	r2, r3, #12
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b38:	e011      	b.n	8003b5e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3a:	f7fe f96f 	bl	8001e1c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d803      	bhi.n	8003b52 <HAL_SPI_Receive+0x156>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d102      	bne.n	8003b58 <HAL_SPI_Receive+0x15c>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b5c:	e04a      	b.n	8003bf4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1cb      	bne.n	8003b00 <HAL_SPI_Receive+0x104>
 8003b68:	e031      	b.n	8003bce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d113      	bne.n	8003ba0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	b292      	uxth	r2, r2
 8003b84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	1c9a      	adds	r2, r3, #2
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b9e:	e011      	b.n	8003bc4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba0:	f7fe f93c 	bl	8001e1c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d803      	bhi.n	8003bb8 <HAL_SPI_Receive+0x1bc>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d102      	bne.n	8003bbe <HAL_SPI_Receive+0x1c2>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bc2:	e017      	b.n	8003bf4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1cd      	bne.n	8003b6a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fc80 	bl	80044d8 <SPI_EndRxTransaction>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
 8003bf0:	e000      	b.n	8003bf4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003bf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b08c      	sub	sp, #48	; 0x30
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x26>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e18a      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x33c>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c3c:	f7fe f8ee 	bl	8001e1c <HAL_GetTick>
 8003c40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d00f      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x70>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c64:	d107      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x68>
 8003c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d003      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
 8003c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c7c:	e15b      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_SPI_TransmitReceive+0x82>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_SPI_TransmitReceive+0x82>
 8003c8a:	887b      	ldrh	r3, [r7, #2]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c96:	e14e      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d003      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	887a      	ldrh	r2, [r7, #2]
 8003cc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	887a      	ldrh	r2, [r7, #2]
 8003cce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d007      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d08:	d178      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_TransmitReceive+0x10a>
 8003d12:	8b7b      	ldrh	r3, [r7, #26]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d166      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d3c:	e053      	b.n	8003de6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11b      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x176>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x176>
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d113      	bne.n	8003d84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	1c9a      	adds	r2, r3, #2
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d119      	bne.n	8003dc6 <HAL_SPI_TransmitReceive+0x1b8>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d014      	beq.n	8003dc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	b292      	uxth	r2, r2
 8003da8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dc6:	f7fe f829 	bl	8001e1c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d807      	bhi.n	8003de6 <HAL_SPI_TransmitReceive+0x1d8>
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d003      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003de4:	e0a7      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1a6      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x130>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1a1      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x130>
 8003dfa:	e07c      	b.n	8003ef6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x1fc>
 8003e04:	8b7b      	ldrh	r3, [r7, #26]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d16b      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e30:	e057      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d11c      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x26c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d017      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x26c>
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d114      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	7812      	ldrb	r2, [r2, #0]
 8003e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d119      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x2ae>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d014      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ebc:	f7fd ffae 	bl	8001e1c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d803      	bhi.n	8003ed4 <HAL_SPI_TransmitReceive+0x2c6>
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d102      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x2cc>
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ee0:	e029      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1a2      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x224>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d19d      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fb52 	bl	80045a4 <SPI_EndRxTxTransaction>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f12:	e010      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	e000      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3730      	adds	r7, #48	; 0x30
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_SPI_Transmit_DMA+0x20>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e093      	b.n	800409c <HAL_SPI_Transmit_DMA+0x148>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d002      	beq.n	8003f8e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f8c:	e081      	b.n	8004092 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit_DMA+0x46>
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f9e:	e078      	b.n	8004092 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe6:	d107      	bne.n	8003ff8 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <HAL_SPI_Transmit_DMA+0x150>)
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <HAL_SPI_Transmit_DMA+0x154>)
 8004006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400c:	4a27      	ldr	r2, [pc, #156]	; (80040ac <HAL_SPI_Transmit_DMA+0x158>)
 800400e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	2200      	movs	r2, #0
 8004016:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	4619      	mov	r1, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004030:	f7fe f912 	bl	8002258 <HAL_DMA_Start_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0210 	orr.w	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004052:	e01e      	b.n	8004092 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d007      	beq.n	8004072 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0220 	orr.w	r2, r2, #32
 8004080:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0202 	orr.w	r2, r2, #2
 8004090:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	08004381 	.word	0x08004381
 80040a8:	080042d9 	.word	0x080042d9
 80040ac:	0800439d 	.word	0x0800439d

080040b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10f      	bne.n	80040f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
    return;
 80040f2:	e0d8      	b.n	80042a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_SPI_IRQHandler+0x66>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	09db      	lsrs	r3, r3, #7
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
    return;
 8004114:	e0c7      	b.n	80042a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_SPI_IRQHandler+0x8c>
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80b5 	beq.w	80042a6 <HAL_SPI_IRQHandler+0x1f6>
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80ae 	beq.w	80042a6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	099b      	lsrs	r3, r3, #6
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d023      	beq.n	800419e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b03      	cmp	r3, #3
 8004160:	d011      	beq.n	8004186 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f043 0204 	orr.w	r2, r3, #4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	e00b      	b.n	800419e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
        return;
 800419c:	e083      	b.n	80042a6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d014      	beq.n	80041d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00c      	beq.n	80041fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	f043 0208 	orr.w	r2, r3, #8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d050      	beq.n	80042a4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004210:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <HAL_SPI_IRQHandler+0x17e>
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d034      	beq.n	8004298 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0203 	bic.w	r2, r2, #3
 800423c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_SPI_IRQHandler+0x1fc>)
 800424c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe f858 	bl	8002308 <HAL_DMA_Abort_IT>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004276:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <HAL_SPI_IRQHandler+0x1fc>)
 8004278:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe f842 	bl	8002308 <HAL_DMA_Abort_IT>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004296:	e003      	b.n	80042a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f813 	bl	80042c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800429e:	e000      	b.n	80042a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80042a0:	bf00      	nop
    return;
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
  }
}
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	080043dd 	.word	0x080043dd

080042b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e6:	f7fd fd99 	bl	8001e1c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fa:	d03b      	beq.n	8004374 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0220 	bic.w	r2, r2, #32
 800430a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0202 	bic.w	r2, r2, #2
 800431a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	2164      	movs	r1, #100	; 0x64
 8004320:	6978      	ldr	r0, [r7, #20]
 8004322:	f000 f93f 	bl	80045a4 <SPI_EndRxTxTransaction>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800436c:	6978      	ldr	r0, [r7, #20]
 800436e:	f7ff ffa9 	bl	80042c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004372:	e002      	b.n	800437a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004374:	6978      	ldr	r0, [r7, #20]
 8004376:	f7fd f881 	bl	800147c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff ff8e 	bl	80042b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0203 	bic.w	r2, r2, #3
 80043b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff78 	bl	80042c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff ff64 	bl	80042c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004414:	e04c      	b.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d048      	beq.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800441e:	f7fd fcfd 	bl	8001e1c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d902      	bls.n	8004434 <SPI_WaitFlagStateUntilTimeout+0x30>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d13d      	bne.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004442:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444c:	d111      	bne.n	8004472 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004456:	d004      	beq.n	8004462 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d107      	bne.n	8004472 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004470:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447a:	d10f      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800449a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e00f      	b.n	80044d0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d1a3      	bne.n	8004416 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ec:	d111      	bne.n	8004512 <SPI_EndRxTransaction+0x3a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d004      	beq.n	8004502 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d107      	bne.n	8004512 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451a:	d12a      	bne.n	8004572 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004524:	d012      	beq.n	800454c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff ff67 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02d      	beq.n	8004598 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e026      	b.n	800459a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2200      	movs	r2, #0
 8004554:	2101      	movs	r1, #1
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff54 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01a      	beq.n	8004598 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e013      	b.n	800459a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	2101      	movs	r1, #1
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff ff41 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e000      	b.n	800459a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <SPI_EndRxTxTransaction+0x7c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <SPI_EndRxTxTransaction+0x80>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0d5b      	lsrs	r3, r3, #21
 80045bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045c0:	fb02 f303 	mul.w	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ce:	d112      	bne.n	80045f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2200      	movs	r2, #0
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff ff12 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e00f      	b.n	8004616 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3b01      	subs	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460c:	2b80      	cmp	r3, #128	; 0x80
 800460e:	d0f2      	beq.n	80045f6 <SPI_EndRxTxTransaction+0x52>
 8004610:	e000      	b.n	8004614 <SPI_EndRxTxTransaction+0x70>
        break;
 8004612:	bf00      	nop
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000020 	.word	0x20000020
 8004624:	165e9f81 	.word	0x165e9f81

08004628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e03f      	b.n	80046ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fd faa6 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	; 0x24
 8004658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800466a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f829 	bl	80046c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004706:	f023 030c 	bic.w	r3, r3, #12
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	430b      	orrs	r3, r1
 8004712:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	f040 818b 	bne.w	8004a4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4ac1      	ldr	r2, [pc, #772]	; (8004a40 <UART_SetConfig+0x37c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d005      	beq.n	800474c <UART_SetConfig+0x88>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4abf      	ldr	r2, [pc, #764]	; (8004a44 <UART_SetConfig+0x380>)
 8004746:	4293      	cmp	r3, r2
 8004748:	f040 80bd 	bne.w	80048c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800474c:	f7fe ffaa 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8004750:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	461d      	mov	r5, r3
 8004756:	f04f 0600 	mov.w	r6, #0
 800475a:	46a8      	mov	r8, r5
 800475c:	46b1      	mov	r9, r6
 800475e:	eb18 0308 	adds.w	r3, r8, r8
 8004762:	eb49 0409 	adc.w	r4, r9, r9
 8004766:	4698      	mov	r8, r3
 8004768:	46a1      	mov	r9, r4
 800476a:	eb18 0805 	adds.w	r8, r8, r5
 800476e:	eb49 0906 	adc.w	r9, r9, r6
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800477e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004782:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004786:	4688      	mov	r8, r1
 8004788:	4691      	mov	r9, r2
 800478a:	eb18 0005 	adds.w	r0, r8, r5
 800478e:	eb49 0106 	adc.w	r1, r9, r6
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	461d      	mov	r5, r3
 8004798:	f04f 0600 	mov.w	r6, #0
 800479c:	196b      	adds	r3, r5, r5
 800479e:	eb46 0406 	adc.w	r4, r6, r6
 80047a2:	461a      	mov	r2, r3
 80047a4:	4623      	mov	r3, r4
 80047a6:	f7fb ff1b 	bl	80005e0 <__aeabi_uldivmod>
 80047aa:	4603      	mov	r3, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	461a      	mov	r2, r3
 80047b0:	4ba5      	ldr	r3, [pc, #660]	; (8004a48 <UART_SetConfig+0x384>)
 80047b2:	fba3 2302 	umull	r2, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	461d      	mov	r5, r3
 80047c0:	f04f 0600 	mov.w	r6, #0
 80047c4:	46a9      	mov	r9, r5
 80047c6:	46b2      	mov	sl, r6
 80047c8:	eb19 0309 	adds.w	r3, r9, r9
 80047cc:	eb4a 040a 	adc.w	r4, sl, sl
 80047d0:	4699      	mov	r9, r3
 80047d2:	46a2      	mov	sl, r4
 80047d4:	eb19 0905 	adds.w	r9, r9, r5
 80047d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047f0:	4689      	mov	r9, r1
 80047f2:	4692      	mov	sl, r2
 80047f4:	eb19 0005 	adds.w	r0, r9, r5
 80047f8:	eb4a 0106 	adc.w	r1, sl, r6
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	461d      	mov	r5, r3
 8004802:	f04f 0600 	mov.w	r6, #0
 8004806:	196b      	adds	r3, r5, r5
 8004808:	eb46 0406 	adc.w	r4, r6, r6
 800480c:	461a      	mov	r2, r3
 800480e:	4623      	mov	r3, r4
 8004810:	f7fb fee6 	bl	80005e0 <__aeabi_uldivmod>
 8004814:	4603      	mov	r3, r0
 8004816:	460c      	mov	r4, r1
 8004818:	461a      	mov	r2, r3
 800481a:	4b8b      	ldr	r3, [pc, #556]	; (8004a48 <UART_SetConfig+0x384>)
 800481c:	fba3 1302 	umull	r1, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	2164      	movs	r1, #100	; 0x64
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	3332      	adds	r3, #50	; 0x32
 800482e:	4a86      	ldr	r2, [pc, #536]	; (8004a48 <UART_SetConfig+0x384>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800483c:	4498      	add	r8, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	461d      	mov	r5, r3
 8004842:	f04f 0600 	mov.w	r6, #0
 8004846:	46a9      	mov	r9, r5
 8004848:	46b2      	mov	sl, r6
 800484a:	eb19 0309 	adds.w	r3, r9, r9
 800484e:	eb4a 040a 	adc.w	r4, sl, sl
 8004852:	4699      	mov	r9, r3
 8004854:	46a2      	mov	sl, r4
 8004856:	eb19 0905 	adds.w	r9, r9, r5
 800485a:	eb4a 0a06 	adc.w	sl, sl, r6
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800486a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800486e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004872:	4689      	mov	r9, r1
 8004874:	4692      	mov	sl, r2
 8004876:	eb19 0005 	adds.w	r0, r9, r5
 800487a:	eb4a 0106 	adc.w	r1, sl, r6
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	461d      	mov	r5, r3
 8004884:	f04f 0600 	mov.w	r6, #0
 8004888:	196b      	adds	r3, r5, r5
 800488a:	eb46 0406 	adc.w	r4, r6, r6
 800488e:	461a      	mov	r2, r3
 8004890:	4623      	mov	r3, r4
 8004892:	f7fb fea5 	bl	80005e0 <__aeabi_uldivmod>
 8004896:	4603      	mov	r3, r0
 8004898:	460c      	mov	r4, r1
 800489a:	461a      	mov	r2, r3
 800489c:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <UART_SetConfig+0x384>)
 800489e:	fba3 1302 	umull	r1, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2164      	movs	r1, #100	; 0x64
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a65      	ldr	r2, [pc, #404]	; (8004a48 <UART_SetConfig+0x384>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 0207 	and.w	r2, r3, #7
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4442      	add	r2, r8
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	e26f      	b.n	8004da6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048c6:	f7fe fed9 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 80048ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	461d      	mov	r5, r3
 80048d0:	f04f 0600 	mov.w	r6, #0
 80048d4:	46a8      	mov	r8, r5
 80048d6:	46b1      	mov	r9, r6
 80048d8:	eb18 0308 	adds.w	r3, r8, r8
 80048dc:	eb49 0409 	adc.w	r4, r9, r9
 80048e0:	4698      	mov	r8, r3
 80048e2:	46a1      	mov	r9, r4
 80048e4:	eb18 0805 	adds.w	r8, r8, r5
 80048e8:	eb49 0906 	adc.w	r9, r9, r6
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004900:	4688      	mov	r8, r1
 8004902:	4691      	mov	r9, r2
 8004904:	eb18 0005 	adds.w	r0, r8, r5
 8004908:	eb49 0106 	adc.w	r1, r9, r6
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	461d      	mov	r5, r3
 8004912:	f04f 0600 	mov.w	r6, #0
 8004916:	196b      	adds	r3, r5, r5
 8004918:	eb46 0406 	adc.w	r4, r6, r6
 800491c:	461a      	mov	r2, r3
 800491e:	4623      	mov	r3, r4
 8004920:	f7fb fe5e 	bl	80005e0 <__aeabi_uldivmod>
 8004924:	4603      	mov	r3, r0
 8004926:	460c      	mov	r4, r1
 8004928:	461a      	mov	r2, r3
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <UART_SetConfig+0x384>)
 800492c:	fba3 2302 	umull	r2, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	461d      	mov	r5, r3
 800493a:	f04f 0600 	mov.w	r6, #0
 800493e:	46a9      	mov	r9, r5
 8004940:	46b2      	mov	sl, r6
 8004942:	eb19 0309 	adds.w	r3, r9, r9
 8004946:	eb4a 040a 	adc.w	r4, sl, sl
 800494a:	4699      	mov	r9, r3
 800494c:	46a2      	mov	sl, r4
 800494e:	eb19 0905 	adds.w	r9, r9, r5
 8004952:	eb4a 0a06 	adc.w	sl, sl, r6
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004962:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004966:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800496a:	4689      	mov	r9, r1
 800496c:	4692      	mov	sl, r2
 800496e:	eb19 0005 	adds.w	r0, r9, r5
 8004972:	eb4a 0106 	adc.w	r1, sl, r6
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	461d      	mov	r5, r3
 800497c:	f04f 0600 	mov.w	r6, #0
 8004980:	196b      	adds	r3, r5, r5
 8004982:	eb46 0406 	adc.w	r4, r6, r6
 8004986:	461a      	mov	r2, r3
 8004988:	4623      	mov	r3, r4
 800498a:	f7fb fe29 	bl	80005e0 <__aeabi_uldivmod>
 800498e:	4603      	mov	r3, r0
 8004990:	460c      	mov	r4, r1
 8004992:	461a      	mov	r2, r3
 8004994:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <UART_SetConfig+0x384>)
 8004996:	fba3 1302 	umull	r1, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2164      	movs	r1, #100	; 0x64
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	3332      	adds	r3, #50	; 0x32
 80049a8:	4a27      	ldr	r2, [pc, #156]	; (8004a48 <UART_SetConfig+0x384>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b6:	4498      	add	r8, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	461d      	mov	r5, r3
 80049bc:	f04f 0600 	mov.w	r6, #0
 80049c0:	46a9      	mov	r9, r5
 80049c2:	46b2      	mov	sl, r6
 80049c4:	eb19 0309 	adds.w	r3, r9, r9
 80049c8:	eb4a 040a 	adc.w	r4, sl, sl
 80049cc:	4699      	mov	r9, r3
 80049ce:	46a2      	mov	sl, r4
 80049d0:	eb19 0905 	adds.w	r9, r9, r5
 80049d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ec:	4689      	mov	r9, r1
 80049ee:	4692      	mov	sl, r2
 80049f0:	eb19 0005 	adds.w	r0, r9, r5
 80049f4:	eb4a 0106 	adc.w	r1, sl, r6
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	461d      	mov	r5, r3
 80049fe:	f04f 0600 	mov.w	r6, #0
 8004a02:	196b      	adds	r3, r5, r5
 8004a04:	eb46 0406 	adc.w	r4, r6, r6
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f7fb fde8 	bl	80005e0 <__aeabi_uldivmod>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <UART_SetConfig+0x384>)
 8004a18:	fba3 1302 	umull	r1, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	2164      	movs	r1, #100	; 0x64
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	3332      	adds	r3, #50	; 0x32
 8004a2a:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <UART_SetConfig+0x384>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	f003 0207 	and.w	r2, r3, #7
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4442      	add	r2, r8
 8004a3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a3e:	e1b2      	b.n	8004da6 <UART_SetConfig+0x6e2>
 8004a40:	40011000 	.word	0x40011000
 8004a44:	40011400 	.word	0x40011400
 8004a48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4ad7      	ldr	r2, [pc, #860]	; (8004db0 <UART_SetConfig+0x6ec>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d005      	beq.n	8004a62 <UART_SetConfig+0x39e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4ad6      	ldr	r2, [pc, #856]	; (8004db4 <UART_SetConfig+0x6f0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	f040 80d1 	bne.w	8004c04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a62:	f7fe fe1f 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8004a66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	469a      	mov	sl, r3
 8004a6c:	f04f 0b00 	mov.w	fp, #0
 8004a70:	46d0      	mov	r8, sl
 8004a72:	46d9      	mov	r9, fp
 8004a74:	eb18 0308 	adds.w	r3, r8, r8
 8004a78:	eb49 0409 	adc.w	r4, r9, r9
 8004a7c:	4698      	mov	r8, r3
 8004a7e:	46a1      	mov	r9, r4
 8004a80:	eb18 080a 	adds.w	r8, r8, sl
 8004a84:	eb49 090b 	adc.w	r9, r9, fp
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a9c:	4688      	mov	r8, r1
 8004a9e:	4691      	mov	r9, r2
 8004aa0:	eb1a 0508 	adds.w	r5, sl, r8
 8004aa4:	eb4b 0609 	adc.w	r6, fp, r9
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	0094      	lsls	r4, r2, #2
 8004abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ac0:	008b      	lsls	r3, r1, #2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	4631      	mov	r1, r6
 8004aca:	f7fb fd89 	bl	80005e0 <__aeabi_uldivmod>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4bb8      	ldr	r3, [pc, #736]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	469b      	mov	fp, r3
 8004ae4:	f04f 0c00 	mov.w	ip, #0
 8004ae8:	46d9      	mov	r9, fp
 8004aea:	46e2      	mov	sl, ip
 8004aec:	eb19 0309 	adds.w	r3, r9, r9
 8004af0:	eb4a 040a 	adc.w	r4, sl, sl
 8004af4:	4699      	mov	r9, r3
 8004af6:	46a2      	mov	sl, r4
 8004af8:	eb19 090b 	adds.w	r9, r9, fp
 8004afc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b14:	4689      	mov	r9, r1
 8004b16:	4692      	mov	sl, r2
 8004b18:	eb1b 0509 	adds.w	r5, fp, r9
 8004b1c:	eb4c 060a 	adc.w	r6, ip, sl
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4619      	mov	r1, r3
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	f04f 0400 	mov.w	r4, #0
 8004b32:	0094      	lsls	r4, r2, #2
 8004b34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b38:	008b      	lsls	r3, r1, #2
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	4628      	mov	r0, r5
 8004b40:	4631      	mov	r1, r6
 8004b42:	f7fb fd4d 	bl	80005e0 <__aeabi_uldivmod>
 8004b46:	4603      	mov	r3, r0
 8004b48:	460c      	mov	r4, r1
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4b9a      	ldr	r3, [pc, #616]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2164      	movs	r1, #100	; 0x64
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	3332      	adds	r3, #50	; 0x32
 8004b60:	4a95      	ldr	r2, [pc, #596]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6c:	4498      	add	r8, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	469b      	mov	fp, r3
 8004b72:	f04f 0c00 	mov.w	ip, #0
 8004b76:	46d9      	mov	r9, fp
 8004b78:	46e2      	mov	sl, ip
 8004b7a:	eb19 0309 	adds.w	r3, r9, r9
 8004b7e:	eb4a 040a 	adc.w	r4, sl, sl
 8004b82:	4699      	mov	r9, r3
 8004b84:	46a2      	mov	sl, r4
 8004b86:	eb19 090b 	adds.w	r9, r9, fp
 8004b8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ba2:	4689      	mov	r9, r1
 8004ba4:	4692      	mov	sl, r2
 8004ba6:	eb1b 0509 	adds.w	r5, fp, r9
 8004baa:	eb4c 060a 	adc.w	r6, ip, sl
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f04f 0400 	mov.w	r4, #0
 8004bc0:	0094      	lsls	r4, r2, #2
 8004bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bc6:	008b      	lsls	r3, r1, #2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4623      	mov	r3, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	4631      	mov	r1, r6
 8004bd0:	f7fb fd06 	bl	80005e0 <__aeabi_uldivmod>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4b77      	ldr	r3, [pc, #476]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	2164      	movs	r1, #100	; 0x64
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	3332      	adds	r3, #50	; 0x32
 8004bee:	4a72      	ldr	r2, [pc, #456]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4442      	add	r2, r8
 8004c00:	609a      	str	r2, [r3, #8]
 8004c02:	e0d0      	b.n	8004da6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fe fd3a 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	469a      	mov	sl, r3
 8004c0e:	f04f 0b00 	mov.w	fp, #0
 8004c12:	46d0      	mov	r8, sl
 8004c14:	46d9      	mov	r9, fp
 8004c16:	eb18 0308 	adds.w	r3, r8, r8
 8004c1a:	eb49 0409 	adc.w	r4, r9, r9
 8004c1e:	4698      	mov	r8, r3
 8004c20:	46a1      	mov	r9, r4
 8004c22:	eb18 080a 	adds.w	r8, r8, sl
 8004c26:	eb49 090b 	adc.w	r9, r9, fp
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c3e:	4688      	mov	r8, r1
 8004c40:	4691      	mov	r9, r2
 8004c42:	eb1a 0508 	adds.w	r5, sl, r8
 8004c46:	eb4b 0609 	adc.w	r6, fp, r9
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f04f 0400 	mov.w	r4, #0
 8004c5c:	0094      	lsls	r4, r2, #2
 8004c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	f7fb fcb8 	bl	80005e0 <__aeabi_uldivmod>
 8004c70:	4603      	mov	r3, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004c78:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	469b      	mov	fp, r3
 8004c86:	f04f 0c00 	mov.w	ip, #0
 8004c8a:	46d9      	mov	r9, fp
 8004c8c:	46e2      	mov	sl, ip
 8004c8e:	eb19 0309 	adds.w	r3, r9, r9
 8004c92:	eb4a 040a 	adc.w	r4, sl, sl
 8004c96:	4699      	mov	r9, r3
 8004c98:	46a2      	mov	sl, r4
 8004c9a:	eb19 090b 	adds.w	r9, r9, fp
 8004c9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ca2:	f04f 0100 	mov.w	r1, #0
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cb6:	4689      	mov	r9, r1
 8004cb8:	4692      	mov	sl, r2
 8004cba:	eb1b 0509 	adds.w	r5, fp, r9
 8004cbe:	eb4c 060a 	adc.w	r6, ip, sl
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	f04f 0400 	mov.w	r4, #0
 8004cd4:	0094      	lsls	r4, r2, #2
 8004cd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	f7fb fc7c 	bl	80005e0 <__aeabi_uldivmod>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	461a      	mov	r2, r3
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0e:	4498      	add	r8, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	469b      	mov	fp, r3
 8004d14:	f04f 0c00 	mov.w	ip, #0
 8004d18:	46d9      	mov	r9, fp
 8004d1a:	46e2      	mov	sl, ip
 8004d1c:	eb19 0309 	adds.w	r3, r9, r9
 8004d20:	eb4a 040a 	adc.w	r4, sl, sl
 8004d24:	4699      	mov	r9, r3
 8004d26:	46a2      	mov	sl, r4
 8004d28:	eb19 090b 	adds.w	r9, r9, fp
 8004d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d44:	4689      	mov	r9, r1
 8004d46:	4692      	mov	sl, r2
 8004d48:	eb1b 0509 	adds.w	r5, fp, r9
 8004d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	f04f 0400 	mov.w	r4, #0
 8004d62:	0094      	lsls	r4, r2, #2
 8004d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d68:	008b      	lsls	r3, r1, #2
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	4631      	mov	r1, r6
 8004d72:	f7fb fc35 	bl	80005e0 <__aeabi_uldivmod>
 8004d76:	4603      	mov	r3, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2164      	movs	r1, #100	; 0x64
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	3332      	adds	r3, #50	; 0x32
 8004d90:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <UART_SetConfig+0x6f4>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	f003 020f 	and.w	r2, r3, #15
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4442      	add	r2, r8
 8004da2:	609a      	str	r2, [r3, #8]
}
 8004da4:	e7ff      	b.n	8004da6 <UART_SetConfig+0x6e2>
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db0:	40011000 	.word	0x40011000
 8004db4:	40011400 	.word	0x40011400
 8004db8:	51eb851f 	.word	0x51eb851f

08004dbc <asinf>:
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	ed2d 8b02 	vpush	{d8}
 8004dc2:	4c27      	ldr	r4, [pc, #156]	; (8004e60 <asinf+0xa4>)
 8004dc4:	b08a      	sub	sp, #40	; 0x28
 8004dc6:	eeb0 8a40 	vmov.f32	s16, s0
 8004dca:	f000 f9b5 	bl	8005138 <__ieee754_asinf>
 8004dce:	f994 3000 	ldrsb.w	r3, [r4]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	eef0 8a40 	vmov.f32	s17, s0
 8004dd8:	d03c      	beq.n	8004e54 <asinf+0x98>
 8004dda:	eeb4 8a48 	vcmp.f32	s16, s16
 8004dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de2:	d637      	bvs.n	8004e54 <asinf+0x98>
 8004de4:	eeb0 0a48 	vmov.f32	s0, s16
 8004de8:	f000 fede 	bl	8005ba8 <fabsf>
 8004dec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004df0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df8:	dd2c      	ble.n	8004e54 <asinf+0x98>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <asinf+0xa8>)
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	ee18 0a10 	vmov	r0, s16
 8004e06:	2300      	movs	r3, #0
 8004e08:	9308      	str	r3, [sp, #32]
 8004e0a:	f7fb fb41 	bl	8000490 <__aeabi_f2d>
 8004e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e16:	4814      	ldr	r0, [pc, #80]	; (8004e68 <asinf+0xac>)
 8004e18:	f000 fdea 	bl	80059f0 <nan>
 8004e1c:	f994 3000 	ldrsb.w	r3, [r4]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	ed8d 0b06 	vstr	d0, [sp, #24]
 8004e26:	d104      	bne.n	8004e32 <asinf+0x76>
 8004e28:	f000 ff9c 	bl	8005d64 <__errno>
 8004e2c:	2321      	movs	r3, #33	; 0x21
 8004e2e:	6003      	str	r3, [r0, #0]
 8004e30:	e004      	b.n	8004e3c <asinf+0x80>
 8004e32:	4668      	mov	r0, sp
 8004e34:	f000 fdd9 	bl	80059ea <matherr>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d0f5      	beq.n	8004e28 <asinf+0x6c>
 8004e3c:	9b08      	ldr	r3, [sp, #32]
 8004e3e:	b11b      	cbz	r3, 8004e48 <asinf+0x8c>
 8004e40:	f000 ff90 	bl	8005d64 <__errno>
 8004e44:	9b08      	ldr	r3, [sp, #32]
 8004e46:	6003      	str	r3, [r0, #0]
 8004e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e4c:	f7fb fb78 	bl	8000540 <__aeabi_d2f>
 8004e50:	ee08 0a90 	vmov	s17, r0
 8004e54:	eeb0 0a68 	vmov.f32	s0, s17
 8004e58:	b00a      	add	sp, #40	; 0x28
 8004e5a:	ecbd 8b02 	vpop	{d8}
 8004e5e:	bd10      	pop	{r4, pc}
 8004e60:	20000029 	.word	0x20000029
 8004e64:	08005e00 	.word	0x08005e00
 8004e68:	08005e05 	.word	0x08005e05

08004e6c <atan2f>:
 8004e6c:	f000 ba4c 	b.w	8005308 <__ieee754_atan2f>

08004e70 <powf>:
 8004e70:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8004e74:	ed2d 8b04 	vpush	{d8-d9}
 8004e78:	4ca7      	ldr	r4, [pc, #668]	; (8005118 <powf+0x2a8>)
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	eef0 8a40 	vmov.f32	s17, s0
 8004e80:	eeb0 8a60 	vmov.f32	s16, s1
 8004e84:	f000 faee 	bl	8005464 <__ieee754_powf>
 8004e88:	f994 5000 	ldrsb.w	r5, [r4]
 8004e8c:	1c6b      	adds	r3, r5, #1
 8004e8e:	eeb0 9a40 	vmov.f32	s18, s0
 8004e92:	4626      	mov	r6, r4
 8004e94:	d05f      	beq.n	8004f56 <powf+0xe6>
 8004e96:	eeb4 8a48 	vcmp.f32	s16, s16
 8004e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9e:	d65a      	bvs.n	8004f56 <powf+0xe6>
 8004ea0:	eef4 8a68 	vcmp.f32	s17, s17
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	d721      	bvc.n	8004eee <powf+0x7e>
 8004eaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb2:	d150      	bne.n	8004f56 <powf+0xe6>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4b98      	ldr	r3, [pc, #608]	; (800511c <powf+0x2ac>)
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	ee18 0a90 	vmov	r0, s17
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9308      	str	r3, [sp, #32]
 8004ec4:	f7fb fae4 	bl	8000490 <__aeabi_f2d>
 8004ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ecc:	ee18 0a10 	vmov	r0, s16
 8004ed0:	f7fb fade 	bl	8000490 <__aeabi_f2d>
 8004ed4:	4b92      	ldr	r3, [pc, #584]	; (8005120 <powf+0x2b0>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2d02      	cmp	r5, #2
 8004eda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ede:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ee2:	d032      	beq.n	8004f4a <powf+0xda>
 8004ee4:	4668      	mov	r0, sp
 8004ee6:	f000 fd80 	bl	80059ea <matherr>
 8004eea:	bb40      	cbnz	r0, 8004f3e <powf+0xce>
 8004eec:	e065      	b.n	8004fba <powf+0x14a>
 8004eee:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8005124 <powf+0x2b4>
 8004ef2:	eef4 8a69 	vcmp.f32	s17, s19
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	d163      	bne.n	8004fc4 <powf+0x154>
 8004efc:	eeb4 8a69 	vcmp.f32	s16, s19
 8004f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f04:	d12e      	bne.n	8004f64 <powf+0xf4>
 8004f06:	2301      	movs	r3, #1
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	4b84      	ldr	r3, [pc, #528]	; (800511c <powf+0x2ac>)
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	ee18 0a90 	vmov	r0, s17
 8004f12:	2300      	movs	r3, #0
 8004f14:	9308      	str	r3, [sp, #32]
 8004f16:	f7fb fabb 	bl	8000490 <__aeabi_f2d>
 8004f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f1e:	ee18 0a10 	vmov	r0, s16
 8004f22:	f7fb fab5 	bl	8000490 <__aeabi_f2d>
 8004f26:	2200      	movs	r2, #0
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	d0d6      	beq.n	8004ee4 <powf+0x74>
 8004f36:	4b7a      	ldr	r3, [pc, #488]	; (8005120 <powf+0x2b0>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f3e:	9b08      	ldr	r3, [sp, #32]
 8004f40:	b11b      	cbz	r3, 8004f4a <powf+0xda>
 8004f42:	f000 ff0f 	bl	8005d64 <__errno>
 8004f46:	9b08      	ldr	r3, [sp, #32]
 8004f48:	6003      	str	r3, [r0, #0]
 8004f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f4e:	f7fb faf7 	bl	8000540 <__aeabi_d2f>
 8004f52:	ee09 0a10 	vmov	s18, r0
 8004f56:	eeb0 0a49 	vmov.f32	s0, s18
 8004f5a:	b00a      	add	sp, #40	; 0x28
 8004f5c:	ecbd 8b04 	vpop	{d8-d9}
 8004f60:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004f64:	eeb0 0a48 	vmov.f32	s0, s16
 8004f68:	f000 fe25 	bl	8005bb6 <finitef>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d0f2      	beq.n	8004f56 <powf+0xe6>
 8004f70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f78:	d5ed      	bpl.n	8004f56 <powf+0xe6>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <powf+0x2ac>)
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	ee18 0a90 	vmov	r0, s17
 8004f86:	2300      	movs	r3, #0
 8004f88:	9308      	str	r3, [sp, #32]
 8004f8a:	f7fb fa81 	bl	8000490 <__aeabi_f2d>
 8004f8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f92:	ee18 0a10 	vmov	r0, s16
 8004f96:	f7fb fa7b 	bl	8000490 <__aeabi_f2d>
 8004f9a:	f994 3000 	ldrsb.w	r3, [r4]
 8004f9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fa2:	b923      	cbnz	r3, 8004fae <powf+0x13e>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004fac:	e79a      	b.n	8004ee4 <powf+0x74>
 8004fae:	495e      	ldr	r1, [pc, #376]	; (8005128 <powf+0x2b8>)
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d194      	bne.n	8004ee4 <powf+0x74>
 8004fba:	f000 fed3 	bl	8005d64 <__errno>
 8004fbe:	2321      	movs	r3, #33	; 0x21
 8004fc0:	6003      	str	r3, [r0, #0]
 8004fc2:	e7bc      	b.n	8004f3e <powf+0xce>
 8004fc4:	f000 fdf7 	bl	8005bb6 <finitef>
 8004fc8:	4605      	mov	r5, r0
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d173      	bne.n	80050b6 <powf+0x246>
 8004fce:	eeb0 0a68 	vmov.f32	s0, s17
 8004fd2:	f000 fdf0 	bl	8005bb6 <finitef>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d06d      	beq.n	80050b6 <powf+0x246>
 8004fda:	eeb0 0a48 	vmov.f32	s0, s16
 8004fde:	f000 fdea 	bl	8005bb6 <finitef>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d067      	beq.n	80050b6 <powf+0x246>
 8004fe6:	ee18 0a90 	vmov	r0, s17
 8004fea:	f7fb fa51 	bl	8000490 <__aeabi_f2d>
 8004fee:	4680      	mov	r8, r0
 8004ff0:	ee18 0a10 	vmov	r0, s16
 8004ff4:	4689      	mov	r9, r1
 8004ff6:	f7fb fa4b 	bl	8000490 <__aeabi_f2d>
 8004ffa:	eeb4 9a49 	vcmp.f32	s18, s18
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	f994 4000 	ldrsb.w	r4, [r4]
 8005006:	4b45      	ldr	r3, [pc, #276]	; (800511c <powf+0x2ac>)
 8005008:	d713      	bvc.n	8005032 <powf+0x1c2>
 800500a:	2201      	movs	r2, #1
 800500c:	e9cd 2300 	strd	r2, r3, [sp]
 8005010:	9508      	str	r5, [sp, #32]
 8005012:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800501a:	2c00      	cmp	r4, #0
 800501c:	d0c2      	beq.n	8004fa4 <powf+0x134>
 800501e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8005022:	ee17 0a90 	vmov	r0, s15
 8005026:	f7fb fa33 	bl	8000490 <__aeabi_f2d>
 800502a:	2c02      	cmp	r4, #2
 800502c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005030:	e7c2      	b.n	8004fb8 <powf+0x148>
 8005032:	2203      	movs	r2, #3
 8005034:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005038:	e9cd 2300 	strd	r2, r3, [sp]
 800503c:	9508      	str	r5, [sp, #32]
 800503e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005046:	ee28 8a27 	vmul.f32	s16, s16, s15
 800504a:	b9fc      	cbnz	r4, 800508c <powf+0x21c>
 800504c:	4b37      	ldr	r3, [pc, #220]	; (800512c <powf+0x2bc>)
 800504e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8005052:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800505e:	d553      	bpl.n	8005108 <powf+0x298>
 8005060:	eeb0 0a48 	vmov.f32	s0, s16
 8005064:	f000 fdb8 	bl	8005bd8 <rintf>
 8005068:	eeb4 0a48 	vcmp.f32	s0, s16
 800506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005070:	d004      	beq.n	800507c <powf+0x20c>
 8005072:	4b2f      	ldr	r3, [pc, #188]	; (8005130 <powf+0x2c0>)
 8005074:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005078:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800507c:	f996 3000 	ldrsb.w	r3, [r6]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d141      	bne.n	8005108 <powf+0x298>
 8005084:	f000 fe6e 	bl	8005d64 <__errno>
 8005088:	2322      	movs	r3, #34	; 0x22
 800508a:	e799      	b.n	8004fc0 <powf+0x150>
 800508c:	4b29      	ldr	r3, [pc, #164]	; (8005134 <powf+0x2c4>)
 800508e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8005092:	2200      	movs	r2, #0
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800509c:	d5ee      	bpl.n	800507c <powf+0x20c>
 800509e:	eeb0 0a48 	vmov.f32	s0, s16
 80050a2:	f000 fd99 	bl	8005bd8 <rintf>
 80050a6:	eeb4 0a48 	vcmp.f32	s0, s16
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d0e5      	beq.n	800507c <powf+0x20c>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <powf+0x2b8>)
 80050b4:	e7e0      	b.n	8005078 <powf+0x208>
 80050b6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	f47f af4a 	bne.w	8004f56 <powf+0xe6>
 80050c2:	eeb0 0a68 	vmov.f32	s0, s17
 80050c6:	f000 fd76 	bl	8005bb6 <finitef>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	f43f af43 	beq.w	8004f56 <powf+0xe6>
 80050d0:	eeb0 0a48 	vmov.f32	s0, s16
 80050d4:	f000 fd6f 	bl	8005bb6 <finitef>
 80050d8:	2800      	cmp	r0, #0
 80050da:	f43f af3c 	beq.w	8004f56 <powf+0xe6>
 80050de:	2304      	movs	r3, #4
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	4b0e      	ldr	r3, [pc, #56]	; (800511c <powf+0x2ac>)
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	ee18 0a90 	vmov	r0, s17
 80050ea:	2300      	movs	r3, #0
 80050ec:	9308      	str	r3, [sp, #32]
 80050ee:	f7fb f9cf 	bl	8000490 <__aeabi_f2d>
 80050f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050f6:	ee18 0a10 	vmov	r0, s16
 80050fa:	f7fb f9c9 	bl	8000490 <__aeabi_f2d>
 80050fe:	2200      	movs	r2, #0
 8005100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005104:	2300      	movs	r3, #0
 8005106:	e7b7      	b.n	8005078 <powf+0x208>
 8005108:	4668      	mov	r0, sp
 800510a:	f000 fc6e 	bl	80059ea <matherr>
 800510e:	2800      	cmp	r0, #0
 8005110:	f47f af15 	bne.w	8004f3e <powf+0xce>
 8005114:	e7b6      	b.n	8005084 <powf+0x214>
 8005116:	bf00      	nop
 8005118:	20000029 	.word	0x20000029
 800511c:	08005e06 	.word	0x08005e06
 8005120:	3ff00000 	.word	0x3ff00000
 8005124:	00000000 	.word	0x00000000
 8005128:	fff00000 	.word	0xfff00000
 800512c:	47efffff 	.word	0x47efffff
 8005130:	c7efffff 	.word	0xc7efffff
 8005134:	7ff00000 	.word	0x7ff00000

08005138 <__ieee754_asinf>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	ee10 5a10 	vmov	r5, s0
 800513e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005142:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005146:	ed2d 8b04 	vpush	{d8-d9}
 800514a:	d10c      	bne.n	8005166 <__ieee754_asinf+0x2e>
 800514c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80052c8 <__ieee754_asinf+0x190>
 8005150:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80052cc <__ieee754_asinf+0x194>
 8005154:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005158:	eee0 7a07 	vfma.f32	s15, s0, s14
 800515c:	eeb0 0a67 	vmov.f32	s0, s15
 8005160:	ecbd 8b04 	vpop	{d8-d9}
 8005164:	bd38      	pop	{r3, r4, r5, pc}
 8005166:	dd04      	ble.n	8005172 <__ieee754_asinf+0x3a>
 8005168:	ee70 7a40 	vsub.f32	s15, s0, s0
 800516c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005170:	e7f6      	b.n	8005160 <__ieee754_asinf+0x28>
 8005172:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8005176:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800517a:	da0b      	bge.n	8005194 <__ieee754_asinf+0x5c>
 800517c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8005180:	da52      	bge.n	8005228 <__ieee754_asinf+0xf0>
 8005182:	eddf 7a53 	vldr	s15, [pc, #332]	; 80052d0 <__ieee754_asinf+0x198>
 8005186:	ee70 7a27 	vadd.f32	s15, s0, s15
 800518a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005192:	dce5      	bgt.n	8005160 <__ieee754_asinf+0x28>
 8005194:	f000 fd08 	bl	8005ba8 <fabsf>
 8005198:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800519c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80051a0:	ee20 8a08 	vmul.f32	s16, s0, s16
 80051a4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80052d4 <__ieee754_asinf+0x19c>
 80051a8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80052d8 <__ieee754_asinf+0x1a0>
 80051ac:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 80052dc <__ieee754_asinf+0x1a4>
 80051b0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80051b4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80052e0 <__ieee754_asinf+0x1a8>
 80051b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80051bc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80052e4 <__ieee754_asinf+0x1ac>
 80051c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80051c4:	eddf 7a48 	vldr	s15, [pc, #288]	; 80052e8 <__ieee754_asinf+0x1b0>
 80051c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80051cc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80052ec <__ieee754_asinf+0x1b4>
 80051d0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80051d4:	eddf 7a46 	vldr	s15, [pc, #280]	; 80052f0 <__ieee754_asinf+0x1b8>
 80051d8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80051dc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80052f4 <__ieee754_asinf+0x1bc>
 80051e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80051e4:	eddf 7a44 	vldr	s15, [pc, #272]	; 80052f8 <__ieee754_asinf+0x1c0>
 80051e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80051ec:	eeb0 0a48 	vmov.f32	s0, s16
 80051f0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80051f4:	f000 fbf6 	bl	80059e4 <__ieee754_sqrtf>
 80051f8:	4b40      	ldr	r3, [pc, #256]	; (80052fc <__ieee754_asinf+0x1c4>)
 80051fa:	ee29 9a08 	vmul.f32	s18, s18, s16
 80051fe:	429c      	cmp	r4, r3
 8005200:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8005204:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005208:	dd3d      	ble.n	8005286 <__ieee754_asinf+0x14e>
 800520a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800520e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8005300 <__ieee754_asinf+0x1c8>
 8005212:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005216:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80052cc <__ieee754_asinf+0x194>
 800521a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800521e:	2d00      	cmp	r5, #0
 8005220:	bfd8      	it	le
 8005222:	eeb1 0a40 	vnegle.f32	s0, s0
 8005226:	e79b      	b.n	8005160 <__ieee754_asinf+0x28>
 8005228:	ee60 7a00 	vmul.f32	s15, s0, s0
 800522c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80052d4 <__ieee754_asinf+0x19c>
 8005230:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80052d8 <__ieee754_asinf+0x1a0>
 8005234:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80052ec <__ieee754_asinf+0x1b4>
 8005238:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800523c:	eddf 6a28 	vldr	s13, [pc, #160]	; 80052e0 <__ieee754_asinf+0x1a8>
 8005240:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005244:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80052e4 <__ieee754_asinf+0x1ac>
 8005248:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800524c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052e8 <__ieee754_asinf+0x1b0>
 8005250:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005254:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80052dc <__ieee754_asinf+0x1a4>
 8005258:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800525c:	eddf 6a24 	vldr	s13, [pc, #144]	; 80052f0 <__ieee754_asinf+0x1b8>
 8005260:	eee7 6a86 	vfma.f32	s13, s15, s12
 8005264:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80052f4 <__ieee754_asinf+0x1bc>
 8005268:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800526c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80052f8 <__ieee754_asinf+0x1c0>
 8005270:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005278:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800527c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8005280:	eea0 0a27 	vfma.f32	s0, s0, s15
 8005284:	e76c      	b.n	8005160 <__ieee754_asinf+0x28>
 8005286:	ee10 3a10 	vmov	r3, s0
 800528a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800528e:	f023 030f 	bic.w	r3, r3, #15
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef1 6a67 	vneg.f32	s13, s15
 800529a:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800529e:	ee70 5a00 	vadd.f32	s11, s0, s0
 80052a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80052a6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80052c8 <__ieee754_asinf+0x190>
 80052aa:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80052ae:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8005304 <__ieee754_asinf+0x1cc>
 80052b2:	eee5 7a47 	vfms.f32	s15, s10, s14
 80052b6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80052ba:	eeb0 6a40 	vmov.f32	s12, s0
 80052be:	eea6 6a87 	vfma.f32	s12, s13, s14
 80052c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80052c6:	e7a8      	b.n	800521a <__ieee754_asinf+0xe2>
 80052c8:	b33bbd2e 	.word	0xb33bbd2e
 80052cc:	3fc90fdb 	.word	0x3fc90fdb
 80052d0:	7149f2ca 	.word	0x7149f2ca
 80052d4:	3811ef08 	.word	0x3811ef08
 80052d8:	3a4f7f04 	.word	0x3a4f7f04
 80052dc:	3e2aaaab 	.word	0x3e2aaaab
 80052e0:	bd241146 	.word	0xbd241146
 80052e4:	3e4e0aa8 	.word	0x3e4e0aa8
 80052e8:	bea6b090 	.word	0xbea6b090
 80052ec:	3d9dc62e 	.word	0x3d9dc62e
 80052f0:	bf303361 	.word	0xbf303361
 80052f4:	4001572d 	.word	0x4001572d
 80052f8:	c019d139 	.word	0xc019d139
 80052fc:	3f799999 	.word	0x3f799999
 8005300:	333bbd2e 	.word	0x333bbd2e
 8005304:	3f490fdb 	.word	0x3f490fdb

08005308 <__ieee754_atan2f>:
 8005308:	ee10 2a90 	vmov	r2, s1
 800530c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005310:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005314:	b510      	push	{r4, lr}
 8005316:	eef0 7a40 	vmov.f32	s15, s0
 800531a:	dc06      	bgt.n	800532a <__ieee754_atan2f+0x22>
 800531c:	ee10 0a10 	vmov	r0, s0
 8005320:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005324:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005328:	dd04      	ble.n	8005334 <__ieee754_atan2f+0x2c>
 800532a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800532e:	eeb0 0a67 	vmov.f32	s0, s15
 8005332:	bd10      	pop	{r4, pc}
 8005334:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005338:	d103      	bne.n	8005342 <__ieee754_atan2f+0x3a>
 800533a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533e:	f000 bb5f 	b.w	8005a00 <atanf>
 8005342:	1794      	asrs	r4, r2, #30
 8005344:	f004 0402 	and.w	r4, r4, #2
 8005348:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800534c:	b943      	cbnz	r3, 8005360 <__ieee754_atan2f+0x58>
 800534e:	2c02      	cmp	r4, #2
 8005350:	d06e      	beq.n	8005430 <__ieee754_atan2f+0x128>
 8005352:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005438 <__ieee754_atan2f+0x130>
 8005356:	2c03      	cmp	r4, #3
 8005358:	bf08      	it	eq
 800535a:	eef0 7a47 	vmoveq.f32	s15, s14
 800535e:	e7e6      	b.n	800532e <__ieee754_atan2f+0x26>
 8005360:	b941      	cbnz	r1, 8005374 <__ieee754_atan2f+0x6c>
 8005362:	eddf 7a36 	vldr	s15, [pc, #216]	; 800543c <__ieee754_atan2f+0x134>
 8005366:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005440 <__ieee754_atan2f+0x138>
 800536a:	2800      	cmp	r0, #0
 800536c:	bfb8      	it	lt
 800536e:	eef0 7a47 	vmovlt.f32	s15, s14
 8005372:	e7dc      	b.n	800532e <__ieee754_atan2f+0x26>
 8005374:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005378:	d122      	bne.n	80053c0 <__ieee754_atan2f+0xb8>
 800537a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800537e:	d112      	bne.n	80053a6 <__ieee754_atan2f+0x9e>
 8005380:	2c02      	cmp	r4, #2
 8005382:	d00a      	beq.n	800539a <__ieee754_atan2f+0x92>
 8005384:	2c03      	cmp	r4, #3
 8005386:	d00b      	beq.n	80053a0 <__ieee754_atan2f+0x98>
 8005388:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005444 <__ieee754_atan2f+0x13c>
 800538c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005448 <__ieee754_atan2f+0x140>
 8005390:	2c01      	cmp	r4, #1
 8005392:	bf18      	it	ne
 8005394:	eef0 7a47 	vmovne.f32	s15, s14
 8005398:	e7c9      	b.n	800532e <__ieee754_atan2f+0x26>
 800539a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800544c <__ieee754_atan2f+0x144>
 800539e:	e7c6      	b.n	800532e <__ieee754_atan2f+0x26>
 80053a0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005450 <__ieee754_atan2f+0x148>
 80053a4:	e7c3      	b.n	800532e <__ieee754_atan2f+0x26>
 80053a6:	2c02      	cmp	r4, #2
 80053a8:	d042      	beq.n	8005430 <__ieee754_atan2f+0x128>
 80053aa:	2c03      	cmp	r4, #3
 80053ac:	d005      	beq.n	80053ba <__ieee754_atan2f+0xb2>
 80053ae:	2c01      	cmp	r4, #1
 80053b0:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005454 <__ieee754_atan2f+0x14c>
 80053b4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005458 <__ieee754_atan2f+0x150>
 80053b8:	e7eb      	b.n	8005392 <__ieee754_atan2f+0x8a>
 80053ba:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005438 <__ieee754_atan2f+0x130>
 80053be:	e7b6      	b.n	800532e <__ieee754_atan2f+0x26>
 80053c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80053c4:	d0cd      	beq.n	8005362 <__ieee754_atan2f+0x5a>
 80053c6:	1a5b      	subs	r3, r3, r1
 80053c8:	15db      	asrs	r3, r3, #23
 80053ca:	2b3c      	cmp	r3, #60	; 0x3c
 80053cc:	dc1a      	bgt.n	8005404 <__ieee754_atan2f+0xfc>
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	da01      	bge.n	80053d6 <__ieee754_atan2f+0xce>
 80053d2:	333c      	adds	r3, #60	; 0x3c
 80053d4:	db19      	blt.n	800540a <__ieee754_atan2f+0x102>
 80053d6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80053da:	f000 fbe5 	bl	8005ba8 <fabsf>
 80053de:	f000 fb0f 	bl	8005a00 <atanf>
 80053e2:	eef0 7a40 	vmov.f32	s15, s0
 80053e6:	2c01      	cmp	r4, #1
 80053e8:	d012      	beq.n	8005410 <__ieee754_atan2f+0x108>
 80053ea:	2c02      	cmp	r4, #2
 80053ec:	d017      	beq.n	800541e <__ieee754_atan2f+0x116>
 80053ee:	2c00      	cmp	r4, #0
 80053f0:	d09d      	beq.n	800532e <__ieee754_atan2f+0x26>
 80053f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800545c <__ieee754_atan2f+0x154>
 80053f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053fa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005460 <__ieee754_atan2f+0x158>
 80053fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005402:	e794      	b.n	800532e <__ieee754_atan2f+0x26>
 8005404:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800543c <__ieee754_atan2f+0x134>
 8005408:	e7ed      	b.n	80053e6 <__ieee754_atan2f+0xde>
 800540a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005458 <__ieee754_atan2f+0x150>
 800540e:	e7ea      	b.n	80053e6 <__ieee754_atan2f+0xde>
 8005410:	ee17 3a90 	vmov	r3, s15
 8005414:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005418:	ee07 3a90 	vmov	s15, r3
 800541c:	e787      	b.n	800532e <__ieee754_atan2f+0x26>
 800541e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800545c <__ieee754_atan2f+0x154>
 8005422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005426:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005460 <__ieee754_atan2f+0x158>
 800542a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800542e:	e77e      	b.n	800532e <__ieee754_atan2f+0x26>
 8005430:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005460 <__ieee754_atan2f+0x158>
 8005434:	e77b      	b.n	800532e <__ieee754_atan2f+0x26>
 8005436:	bf00      	nop
 8005438:	c0490fdb 	.word	0xc0490fdb
 800543c:	3fc90fdb 	.word	0x3fc90fdb
 8005440:	bfc90fdb 	.word	0xbfc90fdb
 8005444:	bf490fdb 	.word	0xbf490fdb
 8005448:	3f490fdb 	.word	0x3f490fdb
 800544c:	4016cbe4 	.word	0x4016cbe4
 8005450:	c016cbe4 	.word	0xc016cbe4
 8005454:	80000000 	.word	0x80000000
 8005458:	00000000 	.word	0x00000000
 800545c:	33bbbd2e 	.word	0x33bbbd2e
 8005460:	40490fdb 	.word	0x40490fdb

08005464 <__ieee754_powf>:
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005468:	ee10 5a90 	vmov	r5, s1
 800546c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8005470:	ed2d 8b02 	vpush	{d8}
 8005474:	eeb0 8a40 	vmov.f32	s16, s0
 8005478:	eef0 8a60 	vmov.f32	s17, s1
 800547c:	f000 8293 	beq.w	80059a6 <__ieee754_powf+0x542>
 8005480:	ee10 8a10 	vmov	r8, s0
 8005484:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8005488:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800548c:	dc06      	bgt.n	800549c <__ieee754_powf+0x38>
 800548e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005492:	dd0a      	ble.n	80054aa <__ieee754_powf+0x46>
 8005494:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005498:	f000 8285 	beq.w	80059a6 <__ieee754_powf+0x542>
 800549c:	ecbd 8b02 	vpop	{d8}
 80054a0:	48d9      	ldr	r0, [pc, #868]	; (8005808 <__ieee754_powf+0x3a4>)
 80054a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	f000 bb91 	b.w	8005bcc <nanf>
 80054aa:	f1b8 0f00 	cmp.w	r8, #0
 80054ae:	da1d      	bge.n	80054ec <__ieee754_powf+0x88>
 80054b0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80054b4:	da2c      	bge.n	8005510 <__ieee754_powf+0xac>
 80054b6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80054ba:	db30      	blt.n	800551e <__ieee754_powf+0xba>
 80054bc:	15fb      	asrs	r3, r7, #23
 80054be:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80054c2:	fa47 f603 	asr.w	r6, r7, r3
 80054c6:	fa06 f303 	lsl.w	r3, r6, r3
 80054ca:	42bb      	cmp	r3, r7
 80054cc:	d127      	bne.n	800551e <__ieee754_powf+0xba>
 80054ce:	f006 0601 	and.w	r6, r6, #1
 80054d2:	f1c6 0602 	rsb	r6, r6, #2
 80054d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80054da:	d122      	bne.n	8005522 <__ieee754_powf+0xbe>
 80054dc:	2d00      	cmp	r5, #0
 80054de:	f280 8268 	bge.w	80059b2 <__ieee754_powf+0x54e>
 80054e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80054e6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80054ea:	e00d      	b.n	8005508 <__ieee754_powf+0xa4>
 80054ec:	2600      	movs	r6, #0
 80054ee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80054f2:	d1f0      	bne.n	80054d6 <__ieee754_powf+0x72>
 80054f4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80054f8:	f000 8255 	beq.w	80059a6 <__ieee754_powf+0x542>
 80054fc:	dd0a      	ble.n	8005514 <__ieee754_powf+0xb0>
 80054fe:	2d00      	cmp	r5, #0
 8005500:	f280 8254 	bge.w	80059ac <__ieee754_powf+0x548>
 8005504:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800580c <__ieee754_powf+0x3a8>
 8005508:	ecbd 8b02 	vpop	{d8}
 800550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005510:	2602      	movs	r6, #2
 8005512:	e7ec      	b.n	80054ee <__ieee754_powf+0x8a>
 8005514:	2d00      	cmp	r5, #0
 8005516:	daf5      	bge.n	8005504 <__ieee754_powf+0xa0>
 8005518:	eeb1 0a68 	vneg.f32	s0, s17
 800551c:	e7f4      	b.n	8005508 <__ieee754_powf+0xa4>
 800551e:	2600      	movs	r6, #0
 8005520:	e7d9      	b.n	80054d6 <__ieee754_powf+0x72>
 8005522:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005526:	d102      	bne.n	800552e <__ieee754_powf+0xca>
 8005528:	ee28 0a08 	vmul.f32	s0, s16, s16
 800552c:	e7ec      	b.n	8005508 <__ieee754_powf+0xa4>
 800552e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005532:	eeb0 0a48 	vmov.f32	s0, s16
 8005536:	d108      	bne.n	800554a <__ieee754_powf+0xe6>
 8005538:	f1b8 0f00 	cmp.w	r8, #0
 800553c:	db05      	blt.n	800554a <__ieee754_powf+0xe6>
 800553e:	ecbd 8b02 	vpop	{d8}
 8005542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005546:	f000 ba4d 	b.w	80059e4 <__ieee754_sqrtf>
 800554a:	f000 fb2d 	bl	8005ba8 <fabsf>
 800554e:	b124      	cbz	r4, 800555a <__ieee754_powf+0xf6>
 8005550:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005554:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005558:	d117      	bne.n	800558a <__ieee754_powf+0x126>
 800555a:	2d00      	cmp	r5, #0
 800555c:	bfbc      	itt	lt
 800555e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005562:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005566:	f1b8 0f00 	cmp.w	r8, #0
 800556a:	dacd      	bge.n	8005508 <__ieee754_powf+0xa4>
 800556c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8005570:	ea54 0306 	orrs.w	r3, r4, r6
 8005574:	d104      	bne.n	8005580 <__ieee754_powf+0x11c>
 8005576:	ee70 7a40 	vsub.f32	s15, s0, s0
 800557a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800557e:	e7c3      	b.n	8005508 <__ieee754_powf+0xa4>
 8005580:	2e01      	cmp	r6, #1
 8005582:	d1c1      	bne.n	8005508 <__ieee754_powf+0xa4>
 8005584:	eeb1 0a40 	vneg.f32	s0, s0
 8005588:	e7be      	b.n	8005508 <__ieee754_powf+0xa4>
 800558a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800558e:	3801      	subs	r0, #1
 8005590:	ea56 0300 	orrs.w	r3, r6, r0
 8005594:	d104      	bne.n	80055a0 <__ieee754_powf+0x13c>
 8005596:	ee38 8a48 	vsub.f32	s16, s16, s16
 800559a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800559e:	e7b3      	b.n	8005508 <__ieee754_powf+0xa4>
 80055a0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80055a4:	dd6d      	ble.n	8005682 <__ieee754_powf+0x21e>
 80055a6:	4b9a      	ldr	r3, [pc, #616]	; (8005810 <__ieee754_powf+0x3ac>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	dc06      	bgt.n	80055ba <__ieee754_powf+0x156>
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	daa9      	bge.n	8005504 <__ieee754_powf+0xa0>
 80055b0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8005814 <__ieee754_powf+0x3b0>
 80055b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80055b8:	e7a6      	b.n	8005508 <__ieee754_powf+0xa4>
 80055ba:	4b97      	ldr	r3, [pc, #604]	; (8005818 <__ieee754_powf+0x3b4>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	dd02      	ble.n	80055c6 <__ieee754_powf+0x162>
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	dcf5      	bgt.n	80055b0 <__ieee754_powf+0x14c>
 80055c4:	e79e      	b.n	8005504 <__ieee754_powf+0xa0>
 80055c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80055ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80055ce:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800581c <__ieee754_powf+0x3b8>
 80055d2:	eef1 6a40 	vneg.f32	s13, s0
 80055d6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80055da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80055de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80055e2:	eee7 7a40 	vfms.f32	s15, s14, s0
 80055e6:	ee60 0a00 	vmul.f32	s1, s0, s0
 80055ea:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8005820 <__ieee754_powf+0x3bc>
 80055ee:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80055f2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8005824 <__ieee754_powf+0x3c0>
 80055f6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80055fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80055fe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005828 <__ieee754_powf+0x3c4>
 8005602:	eeb0 6a67 	vmov.f32	s12, s15
 8005606:	eea0 6a07 	vfma.f32	s12, s0, s14
 800560a:	ee16 3a10 	vmov	r3, s12
 800560e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005612:	f023 030f 	bic.w	r3, r3, #15
 8005616:	ee00 3a90 	vmov	s1, r3
 800561a:	eee6 0a87 	vfma.f32	s1, s13, s14
 800561e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005622:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8005626:	f025 050f 	bic.w	r5, r5, #15
 800562a:	ee07 5a10 	vmov	s14, r5
 800562e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005632:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800563e:	3e01      	subs	r6, #1
 8005640:	ea56 0200 	orrs.w	r2, r6, r0
 8005644:	ee07 5a10 	vmov	s14, r5
 8005648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800564c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005650:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005654:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005658:	ee17 4a10 	vmov	r4, s14
 800565c:	bf08      	it	eq
 800565e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005662:	2c00      	cmp	r4, #0
 8005664:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005668:	f340 8184 	ble.w	8005974 <__ieee754_powf+0x510>
 800566c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005670:	f340 80fc 	ble.w	800586c <__ieee754_powf+0x408>
 8005674:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005814 <__ieee754_powf+0x3b0>
 8005678:	ee28 0a27 	vmul.f32	s0, s16, s15
 800567c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005680:	e742      	b.n	8005508 <__ieee754_powf+0xa4>
 8005682:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8005686:	bfbf      	itttt	lt
 8005688:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800582c <__ieee754_powf+0x3c8>
 800568c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005690:	f06f 0217 	mvnlt.w	r2, #23
 8005694:	ee17 4a90 	vmovlt	r4, s15
 8005698:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800569c:	bfa8      	it	ge
 800569e:	2200      	movge	r2, #0
 80056a0:	3b7f      	subs	r3, #127	; 0x7f
 80056a2:	4413      	add	r3, r2
 80056a4:	4a62      	ldr	r2, [pc, #392]	; (8005830 <__ieee754_powf+0x3cc>)
 80056a6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80056aa:	4294      	cmp	r4, r2
 80056ac:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80056b0:	dd06      	ble.n	80056c0 <__ieee754_powf+0x25c>
 80056b2:	4a60      	ldr	r2, [pc, #384]	; (8005834 <__ieee754_powf+0x3d0>)
 80056b4:	4294      	cmp	r4, r2
 80056b6:	f340 80a5 	ble.w	8005804 <__ieee754_powf+0x3a0>
 80056ba:	3301      	adds	r3, #1
 80056bc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80056c0:	2400      	movs	r4, #0
 80056c2:	4a5d      	ldr	r2, [pc, #372]	; (8005838 <__ieee754_powf+0x3d4>)
 80056c4:	00a7      	lsls	r7, r4, #2
 80056c6:	443a      	add	r2, r7
 80056c8:	ee07 1a90 	vmov	s15, r1
 80056cc:	ed92 7a00 	vldr	s14, [r2]
 80056d0:	4a5a      	ldr	r2, [pc, #360]	; (800583c <__ieee754_powf+0x3d8>)
 80056d2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80056d6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80056da:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80056de:	1049      	asrs	r1, r1, #1
 80056e0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80056e4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80056e8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80056ec:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80056f0:	ee06 1a10 	vmov	s12, r1
 80056f4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 80056f8:	ee14 ca90 	vmov	ip, s9
 80056fc:	ea02 0c0c 	and.w	ip, r2, ip
 8005700:	ee05 ca10 	vmov	s10, ip
 8005704:	eeb1 4a45 	vneg.f32	s8, s10
 8005708:	eee4 5a06 	vfma.f32	s11, s8, s12
 800570c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005710:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005840 <__ieee754_powf+0x3dc>
 8005714:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8005718:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800571c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8005720:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8005724:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8005728:	eddf 5a46 	vldr	s11, [pc, #280]	; 8005844 <__ieee754_powf+0x3e0>
 800572c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005730:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005848 <__ieee754_powf+0x3e4>
 8005734:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005738:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800581c <__ieee754_powf+0x3b8>
 800573c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005740:	eddf 5a42 	vldr	s11, [pc, #264]	; 800584c <__ieee754_powf+0x3e8>
 8005744:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005748:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005850 <__ieee754_powf+0x3ec>
 800574c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8005750:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005754:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005758:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800575c:	eef0 7a65 	vmov.f32	s15, s11
 8005760:	eee3 6a87 	vfma.f32	s13, s7, s14
 8005764:	eee5 7a05 	vfma.f32	s15, s10, s10
 8005768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576c:	ee17 1a90 	vmov	r1, s15
 8005770:	4011      	ands	r1, r2
 8005772:	ee07 1a90 	vmov	s15, r1
 8005776:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800577a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8005854 <__ieee754_powf+0x3f0>
 800577e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8005782:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005786:	ee27 7a24 	vmul.f32	s14, s14, s9
 800578a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800578e:	eeb0 6a47 	vmov.f32	s12, s14
 8005792:	eea5 6a27 	vfma.f32	s12, s10, s15
 8005796:	ee16 1a10 	vmov	r1, s12
 800579a:	4011      	ands	r1, r2
 800579c:	ee06 1a90 	vmov	s13, r1
 80057a0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80057a4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8005858 <__ieee754_powf+0x3f4>
 80057a8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80057ac:	ee06 1a10 	vmov	s12, r1
 80057b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057b4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800585c <__ieee754_powf+0x3f8>
 80057b8:	4929      	ldr	r1, [pc, #164]	; (8005860 <__ieee754_powf+0x3fc>)
 80057ba:	eea6 7a27 	vfma.f32	s14, s12, s15
 80057be:	4439      	add	r1, r7
 80057c0:	edd1 7a00 	vldr	s15, [r1]
 80057c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef0 0a47 	vmov.f32	s1, s14
 80057d0:	4b24      	ldr	r3, [pc, #144]	; (8005864 <__ieee754_powf+0x400>)
 80057d2:	eee6 0a25 	vfma.f32	s1, s12, s11
 80057d6:	443b      	add	r3, r7
 80057d8:	ed93 5a00 	vldr	s10, [r3]
 80057dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057e0:	ee70 0a85 	vadd.f32	s1, s1, s10
 80057e4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 80057e8:	ee17 3a90 	vmov	r3, s15
 80057ec:	4013      	ands	r3, r2
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057f6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80057fa:	eee6 7a65 	vfms.f32	s15, s12, s11
 80057fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005802:	e70e      	b.n	8005622 <__ieee754_powf+0x1be>
 8005804:	2401      	movs	r4, #1
 8005806:	e75c      	b.n	80056c2 <__ieee754_powf+0x25e>
 8005808:	08005e05 	.word	0x08005e05
 800580c:	00000000 	.word	0x00000000
 8005810:	3f7ffff7 	.word	0x3f7ffff7
 8005814:	7149f2ca 	.word	0x7149f2ca
 8005818:	3f800007 	.word	0x3f800007
 800581c:	3eaaaaab 	.word	0x3eaaaaab
 8005820:	36eca570 	.word	0x36eca570
 8005824:	3fb8aa3b 	.word	0x3fb8aa3b
 8005828:	3fb8aa00 	.word	0x3fb8aa00
 800582c:	4b800000 	.word	0x4b800000
 8005830:	001cc471 	.word	0x001cc471
 8005834:	005db3d6 	.word	0x005db3d6
 8005838:	08005e0c 	.word	0x08005e0c
 800583c:	fffff000 	.word	0xfffff000
 8005840:	3e6c3255 	.word	0x3e6c3255
 8005844:	3e53f142 	.word	0x3e53f142
 8005848:	3e8ba305 	.word	0x3e8ba305
 800584c:	3edb6db7 	.word	0x3edb6db7
 8005850:	3f19999a 	.word	0x3f19999a
 8005854:	3f763800 	.word	0x3f763800
 8005858:	3f76384f 	.word	0x3f76384f
 800585c:	369dc3a0 	.word	0x369dc3a0
 8005860:	08005e1c 	.word	0x08005e1c
 8005864:	08005e14 	.word	0x08005e14
 8005868:	3338aa3c 	.word	0x3338aa3c
 800586c:	f040 8092 	bne.w	8005994 <__ieee754_powf+0x530>
 8005870:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005868 <__ieee754_powf+0x404>
 8005874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005878:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800587c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005884:	f73f aef6 	bgt.w	8005674 <__ieee754_powf+0x210>
 8005888:	15db      	asrs	r3, r3, #23
 800588a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800588e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005892:	4103      	asrs	r3, r0
 8005894:	4423      	add	r3, r4
 8005896:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800589a:	4947      	ldr	r1, [pc, #284]	; (80059b8 <__ieee754_powf+0x554>)
 800589c:	3a7f      	subs	r2, #127	; 0x7f
 800589e:	4111      	asrs	r1, r2
 80058a0:	ea23 0101 	bic.w	r1, r3, r1
 80058a4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80058a8:	ee07 1a10 	vmov	s14, r1
 80058ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80058b0:	f1c2 0217 	rsb	r2, r2, #23
 80058b4:	4110      	asrs	r0, r2
 80058b6:	2c00      	cmp	r4, #0
 80058b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058bc:	bfb8      	it	lt
 80058be:	4240      	neglt	r0, r0
 80058c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80058c4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059bc <__ieee754_powf+0x558>
 80058c8:	ee17 3a10 	vmov	r3, s14
 80058cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80058d0:	f023 030f 	bic.w	r3, r3, #15
 80058d4:	ee07 3a10 	vmov	s14, r3
 80058d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058dc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80058e0:	eddf 7a37 	vldr	s15, [pc, #220]	; 80059c0 <__ieee754_powf+0x55c>
 80058e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80058ec:	eddf 6a35 	vldr	s13, [pc, #212]	; 80059c4 <__ieee754_powf+0x560>
 80058f0:	eeb0 0a67 	vmov.f32	s0, s15
 80058f4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80058f8:	eeb0 6a40 	vmov.f32	s12, s0
 80058fc:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005900:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005904:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005908:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80059c8 <__ieee754_powf+0x564>
 800590c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80059cc <__ieee754_powf+0x568>
 8005910:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005914:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80059d0 <__ieee754_powf+0x56c>
 8005918:	eee6 6a07 	vfma.f32	s13, s12, s14
 800591c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80059d4 <__ieee754_powf+0x570>
 8005920:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005924:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80059d8 <__ieee754_powf+0x574>
 8005928:	eee6 6a07 	vfma.f32	s13, s12, s14
 800592c:	eeb0 6a40 	vmov.f32	s12, s0
 8005930:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005934:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005938:	eeb0 7a46 	vmov.f32	s14, s12
 800593c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005940:	ee20 6a06 	vmul.f32	s12, s0, s12
 8005944:	eee0 7a27 	vfma.f32	s15, s0, s15
 8005948:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800594c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005950:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005958:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800595c:	ee10 3a10 	vmov	r3, s0
 8005960:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005968:	da1a      	bge.n	80059a0 <__ieee754_powf+0x53c>
 800596a:	f000 f98f 	bl	8005c8c <scalbnf>
 800596e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005972:	e5c9      	b.n	8005508 <__ieee754_powf+0xa4>
 8005974:	4a19      	ldr	r2, [pc, #100]	; (80059dc <__ieee754_powf+0x578>)
 8005976:	4293      	cmp	r3, r2
 8005978:	dd02      	ble.n	8005980 <__ieee754_powf+0x51c>
 800597a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80059e0 <__ieee754_powf+0x57c>
 800597e:	e67b      	b.n	8005678 <__ieee754_powf+0x214>
 8005980:	d108      	bne.n	8005994 <__ieee754_powf+0x530>
 8005982:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005986:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800598a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598e:	f6ff af7b 	blt.w	8005888 <__ieee754_powf+0x424>
 8005992:	e7f2      	b.n	800597a <__ieee754_powf+0x516>
 8005994:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005998:	f73f af76 	bgt.w	8005888 <__ieee754_powf+0x424>
 800599c:	2000      	movs	r0, #0
 800599e:	e78f      	b.n	80058c0 <__ieee754_powf+0x45c>
 80059a0:	ee00 3a10 	vmov	s0, r3
 80059a4:	e7e3      	b.n	800596e <__ieee754_powf+0x50a>
 80059a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80059aa:	e5ad      	b.n	8005508 <__ieee754_powf+0xa4>
 80059ac:	eeb0 0a68 	vmov.f32	s0, s17
 80059b0:	e5aa      	b.n	8005508 <__ieee754_powf+0xa4>
 80059b2:	eeb0 0a48 	vmov.f32	s0, s16
 80059b6:	e5a7      	b.n	8005508 <__ieee754_powf+0xa4>
 80059b8:	007fffff 	.word	0x007fffff
 80059bc:	3f317218 	.word	0x3f317218
 80059c0:	35bfbe8c 	.word	0x35bfbe8c
 80059c4:	3f317200 	.word	0x3f317200
 80059c8:	3331bb4c 	.word	0x3331bb4c
 80059cc:	b5ddea0e 	.word	0xb5ddea0e
 80059d0:	388ab355 	.word	0x388ab355
 80059d4:	bb360b61 	.word	0xbb360b61
 80059d8:	3e2aaaab 	.word	0x3e2aaaab
 80059dc:	43160000 	.word	0x43160000
 80059e0:	0da24260 	.word	0x0da24260

080059e4 <__ieee754_sqrtf>:
 80059e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80059e8:	4770      	bx	lr

080059ea <matherr>:
 80059ea:	2000      	movs	r0, #0
 80059ec:	4770      	bx	lr
	...

080059f0 <nan>:
 80059f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80059f8 <nan+0x8>
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	00000000 	.word	0x00000000
 80059fc:	7ff80000 	.word	0x7ff80000

08005a00 <atanf>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	ee10 5a10 	vmov	r5, s0
 8005a06:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005a0a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005a0e:	eef0 7a40 	vmov.f32	s15, s0
 8005a12:	db10      	blt.n	8005a36 <atanf+0x36>
 8005a14:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005a18:	dd04      	ble.n	8005a24 <atanf+0x24>
 8005a1a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a22:	bd38      	pop	{r3, r4, r5, pc}
 8005a24:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005b5c <atanf+0x15c>
 8005a28:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005b60 <atanf+0x160>
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	bfd8      	it	le
 8005a30:	eef0 7a47 	vmovle.f32	s15, s14
 8005a34:	e7f3      	b.n	8005a1e <atanf+0x1e>
 8005a36:	4b4b      	ldr	r3, [pc, #300]	; (8005b64 <atanf+0x164>)
 8005a38:	429c      	cmp	r4, r3
 8005a3a:	dc10      	bgt.n	8005a5e <atanf+0x5e>
 8005a3c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005a40:	da0a      	bge.n	8005a58 <atanf+0x58>
 8005a42:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005b68 <atanf+0x168>
 8005a46:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a56:	dce2      	bgt.n	8005a1e <atanf+0x1e>
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5c:	e013      	b.n	8005a86 <atanf+0x86>
 8005a5e:	f000 f8a3 	bl	8005ba8 <fabsf>
 8005a62:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <atanf+0x16c>)
 8005a64:	429c      	cmp	r4, r3
 8005a66:	dc4f      	bgt.n	8005b08 <atanf+0x108>
 8005a68:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	dc41      	bgt.n	8005af4 <atanf+0xf4>
 8005a70:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005a74:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005a78:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005a82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005a8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005b70 <atanf+0x170>
 8005a90:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005b74 <atanf+0x174>
 8005a94:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005b78 <atanf+0x178>
 8005a98:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005a9c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005aa0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005b7c <atanf+0x17c>
 8005aa4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005aa8:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005b80 <atanf+0x180>
 8005aac:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005ab0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005b84 <atanf+0x184>
 8005ab4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005ab8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005b88 <atanf+0x188>
 8005abc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005ac0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005b8c <atanf+0x18c>
 8005ac4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005ac8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005b90 <atanf+0x190>
 8005acc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005ad0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8005b94 <atanf+0x194>
 8005ad4:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005ad8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005b98 <atanf+0x198>
 8005adc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005ae0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005ae4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aec:	d121      	bne.n	8005b32 <atanf+0x132>
 8005aee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005af2:	e794      	b.n	8005a1e <atanf+0x1e>
 8005af4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005af8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005afc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b00:	2301      	movs	r3, #1
 8005b02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005b06:	e7be      	b.n	8005a86 <atanf+0x86>
 8005b08:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <atanf+0x19c>)
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	dc0b      	bgt.n	8005b26 <atanf+0x126>
 8005b0e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b16:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b24:	e7af      	b.n	8005a86 <atanf+0x86>
 8005b26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005b2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e7a9      	b.n	8005a86 <atanf+0x86>
 8005b32:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <atanf+0x1a0>)
 8005b34:	491b      	ldr	r1, [pc, #108]	; (8005ba4 <atanf+0x1a4>)
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	440b      	add	r3, r1
 8005b3c:	edd3 6a00 	vldr	s13, [r3]
 8005b40:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b4a:	ed92 7a00 	vldr	s14, [r2]
 8005b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b52:	bfb8      	it	lt
 8005b54:	eef1 7a67 	vneglt.f32	s15, s15
 8005b58:	e761      	b.n	8005a1e <atanf+0x1e>
 8005b5a:	bf00      	nop
 8005b5c:	bfc90fdb 	.word	0xbfc90fdb
 8005b60:	3fc90fdb 	.word	0x3fc90fdb
 8005b64:	3edfffff 	.word	0x3edfffff
 8005b68:	7149f2ca 	.word	0x7149f2ca
 8005b6c:	3f97ffff 	.word	0x3f97ffff
 8005b70:	3c8569d7 	.word	0x3c8569d7
 8005b74:	3d4bda59 	.word	0x3d4bda59
 8005b78:	bd6ef16b 	.word	0xbd6ef16b
 8005b7c:	3d886b35 	.word	0x3d886b35
 8005b80:	3dba2e6e 	.word	0x3dba2e6e
 8005b84:	3e124925 	.word	0x3e124925
 8005b88:	3eaaaaab 	.word	0x3eaaaaab
 8005b8c:	bd15a221 	.word	0xbd15a221
 8005b90:	bd9d8795 	.word	0xbd9d8795
 8005b94:	bde38e38 	.word	0xbde38e38
 8005b98:	be4ccccd 	.word	0xbe4ccccd
 8005b9c:	401bffff 	.word	0x401bffff
 8005ba0:	08005e24 	.word	0x08005e24
 8005ba4:	08005e34 	.word	0x08005e34

08005ba8 <fabsf>:
 8005ba8:	ee10 3a10 	vmov	r3, s0
 8005bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	ee00 3a10 	vmov	s0, r3
 8005bb4:	4770      	bx	lr

08005bb6 <finitef>:
 8005bb6:	ee10 3a10 	vmov	r3, s0
 8005bba:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005bbe:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005bc2:	bfac      	ite	ge
 8005bc4:	2000      	movge	r0, #0
 8005bc6:	2001      	movlt	r0, #1
 8005bc8:	4770      	bx	lr
	...

08005bcc <nanf>:
 8005bcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005bd4 <nanf+0x8>
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	7fc00000 	.word	0x7fc00000

08005bd8 <rintf>:
 8005bd8:	b513      	push	{r0, r1, r4, lr}
 8005bda:	ee10 1a10 	vmov	r1, s0
 8005bde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005be2:	0ddc      	lsrs	r4, r3, #23
 8005be4:	3c7f      	subs	r4, #127	; 0x7f
 8005be6:	2c16      	cmp	r4, #22
 8005be8:	dc46      	bgt.n	8005c78 <rintf+0xa0>
 8005bea:	b32b      	cbz	r3, 8005c38 <rintf+0x60>
 8005bec:	2c00      	cmp	r4, #0
 8005bee:	ee10 2a10 	vmov	r2, s0
 8005bf2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8005bf6:	da21      	bge.n	8005c3c <rintf+0x64>
 8005bf8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <rintf+0xac>)
 8005c00:	0a5b      	lsrs	r3, r3, #9
 8005c02:	0d09      	lsrs	r1, r1, #20
 8005c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c08:	0509      	lsls	r1, r1, #20
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	edd2 6a00 	vldr	s13, [r2]
 8005c18:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8005c1c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8005c20:	eddd 7a01 	vldr	s15, [sp, #4]
 8005c24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c28:	ee17 3a90 	vmov	r3, s15
 8005c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005c34:	ee00 3a10 	vmov	s0, r3
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd10      	pop	{r4, pc}
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <rintf+0xb0>)
 8005c3e:	4123      	asrs	r3, r4
 8005c40:	4219      	tst	r1, r3
 8005c42:	d0f9      	beq.n	8005c38 <rintf+0x60>
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	4219      	tst	r1, r3
 8005c48:	d006      	beq.n	8005c58 <rintf+0x80>
 8005c4a:	ea21 0203 	bic.w	r2, r1, r3
 8005c4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c52:	fa43 f404 	asr.w	r4, r3, r4
 8005c56:	4322      	orrs	r2, r4
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <rintf+0xac>)
 8005c5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c5e:	ed90 7a00 	vldr	s14, [r0]
 8005c62:	ee07 2a90 	vmov	s15, r2
 8005c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6a:	edcd 7a01 	vstr	s15, [sp, #4]
 8005c6e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005c72:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005c76:	e7df      	b.n	8005c38 <rintf+0x60>
 8005c78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005c7c:	d3dc      	bcc.n	8005c38 <rintf+0x60>
 8005c7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005c82:	e7d9      	b.n	8005c38 <rintf+0x60>
 8005c84:	08005e44 	.word	0x08005e44
 8005c88:	007fffff 	.word	0x007fffff

08005c8c <scalbnf>:
 8005c8c:	b508      	push	{r3, lr}
 8005c8e:	ee10 2a10 	vmov	r2, s0
 8005c92:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005c96:	ed2d 8b02 	vpush	{d8}
 8005c9a:	eef0 0a40 	vmov.f32	s1, s0
 8005c9e:	d004      	beq.n	8005caa <scalbnf+0x1e>
 8005ca0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005ca4:	d306      	bcc.n	8005cb4 <scalbnf+0x28>
 8005ca6:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005caa:	ecbd 8b02 	vpop	{d8}
 8005cae:	eeb0 0a60 	vmov.f32	s0, s1
 8005cb2:	bd08      	pop	{r3, pc}
 8005cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cb8:	d21c      	bcs.n	8005cf4 <scalbnf+0x68>
 8005cba:	4b1f      	ldr	r3, [pc, #124]	; (8005d38 <scalbnf+0xac>)
 8005cbc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005d3c <scalbnf+0xb0>
 8005cc0:	4298      	cmp	r0, r3
 8005cc2:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005cc6:	db10      	blt.n	8005cea <scalbnf+0x5e>
 8005cc8:	ee10 2a90 	vmov	r2, s1
 8005ccc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005cd0:	3b19      	subs	r3, #25
 8005cd2:	4403      	add	r3, r0
 8005cd4:	2bfe      	cmp	r3, #254	; 0xfe
 8005cd6:	dd0f      	ble.n	8005cf8 <scalbnf+0x6c>
 8005cd8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005d40 <scalbnf+0xb4>
 8005cdc:	eeb0 0a48 	vmov.f32	s0, s16
 8005ce0:	f000 f834 	bl	8005d4c <copysignf>
 8005ce4:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005ce8:	e7df      	b.n	8005caa <scalbnf+0x1e>
 8005cea:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005d44 <scalbnf+0xb8>
 8005cee:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005cf2:	e7da      	b.n	8005caa <scalbnf+0x1e>
 8005cf4:	0ddb      	lsrs	r3, r3, #23
 8005cf6:	e7ec      	b.n	8005cd2 <scalbnf+0x46>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dd06      	ble.n	8005d0a <scalbnf+0x7e>
 8005cfc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005d00:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005d04:	ee00 3a90 	vmov	s1, r3
 8005d08:	e7cf      	b.n	8005caa <scalbnf+0x1e>
 8005d0a:	f113 0f16 	cmn.w	r3, #22
 8005d0e:	da06      	bge.n	8005d1e <scalbnf+0x92>
 8005d10:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d14:	4298      	cmp	r0, r3
 8005d16:	dcdf      	bgt.n	8005cd8 <scalbnf+0x4c>
 8005d18:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005d44 <scalbnf+0xb8>
 8005d1c:	e7de      	b.n	8005cdc <scalbnf+0x50>
 8005d1e:	3319      	adds	r3, #25
 8005d20:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005d24:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005d28:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005d48 <scalbnf+0xbc>
 8005d2c:	ee07 3a10 	vmov	s14, r3
 8005d30:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005d34:	e7b9      	b.n	8005caa <scalbnf+0x1e>
 8005d36:	bf00      	nop
 8005d38:	ffff3cb0 	.word	0xffff3cb0
 8005d3c:	4c000000 	.word	0x4c000000
 8005d40:	7149f2ca 	.word	0x7149f2ca
 8005d44:	0da24260 	.word	0x0da24260
 8005d48:	33000000 	.word	0x33000000

08005d4c <copysignf>:
 8005d4c:	ee10 3a10 	vmov	r3, s0
 8005d50:	ee10 2a90 	vmov	r2, s1
 8005d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	ee00 3a10 	vmov	s0, r3
 8005d62:	4770      	bx	lr

08005d64 <__errno>:
 8005d64:	4b01      	ldr	r3, [pc, #4]	; (8005d6c <__errno+0x8>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	2000002c 	.word	0x2000002c

08005d70 <__libc_init_array>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	4e0d      	ldr	r6, [pc, #52]	; (8005da8 <__libc_init_array+0x38>)
 8005d74:	4c0d      	ldr	r4, [pc, #52]	; (8005dac <__libc_init_array+0x3c>)
 8005d76:	1ba4      	subs	r4, r4, r6
 8005d78:	10a4      	asrs	r4, r4, #2
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	42a5      	cmp	r5, r4
 8005d7e:	d109      	bne.n	8005d94 <__libc_init_array+0x24>
 8005d80:	4e0b      	ldr	r6, [pc, #44]	; (8005db0 <__libc_init_array+0x40>)
 8005d82:	4c0c      	ldr	r4, [pc, #48]	; (8005db4 <__libc_init_array+0x44>)
 8005d84:	f000 f820 	bl	8005dc8 <_init>
 8005d88:	1ba4      	subs	r4, r4, r6
 8005d8a:	10a4      	asrs	r4, r4, #2
 8005d8c:	2500      	movs	r5, #0
 8005d8e:	42a5      	cmp	r5, r4
 8005d90:	d105      	bne.n	8005d9e <__libc_init_array+0x2e>
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d98:	4798      	blx	r3
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	e7ee      	b.n	8005d7c <__libc_init_array+0xc>
 8005d9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005da2:	4798      	blx	r3
 8005da4:	3501      	adds	r5, #1
 8005da6:	e7f2      	b.n	8005d8e <__libc_init_array+0x1e>
 8005da8:	08005e54 	.word	0x08005e54
 8005dac:	08005e54 	.word	0x08005e54
 8005db0:	08005e54 	.word	0x08005e54
 8005db4:	08005e5c 	.word	0x08005e5c

08005db8 <memset>:
 8005db8:	4402      	add	r2, r0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d100      	bne.n	8005dc2 <memset+0xa>
 8005dc0:	4770      	bx	lr
 8005dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc6:	e7f9      	b.n	8005dbc <memset+0x4>

08005dc8 <_init>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr

08005dd4 <_fini>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr
