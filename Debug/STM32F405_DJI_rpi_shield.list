
STM32F405_DJI_rpi_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d4  080059d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059dc  080059dc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080059e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000084  08005a6c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000454  08005a6c  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124e9  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d83  00000000  00000000  0003259d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f08  00000000  00000000  00035320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00036228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006afd  00000000  00000000  00036fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3c6  00000000  00000000  0003dae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c95f3  00000000  00000000  0004beab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011549e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  0011551c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005950 	.word	0x08005950

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08005950 	.word	0x08005950

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b972 	b.w	80008dc <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	4688      	mov	r8, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14b      	bne.n	80006b6 <__udivmoddi4+0xa6>
 800061e:	428a      	cmp	r2, r1
 8000620:	4615      	mov	r5, r2
 8000622:	d967      	bls.n	80006f4 <__udivmoddi4+0xe4>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b14a      	cbz	r2, 800063e <__udivmoddi4+0x2e>
 800062a:	f1c2 0720 	rsb	r7, r2, #32
 800062e:	fa01 f302 	lsl.w	r3, r1, r2
 8000632:	fa20 f707 	lsr.w	r7, r0, r7
 8000636:	4095      	lsls	r5, r2
 8000638:	ea47 0803 	orr.w	r8, r7, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000642:	0c23      	lsrs	r3, r4, #16
 8000644:	fbb8 f7fe 	udiv	r7, r8, lr
 8000648:	fa1f fc85 	uxth.w	ip, r5
 800064c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000650:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000654:	fb07 f10c 	mul.w	r1, r7, ip
 8000658:	4299      	cmp	r1, r3
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x60>
 800065c:	18eb      	adds	r3, r5, r3
 800065e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000662:	f080 811b 	bcs.w	800089c <__udivmoddi4+0x28c>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 8118 	bls.w	800089c <__udivmoddi4+0x28c>
 800066c:	3f02      	subs	r7, #2
 800066e:	442b      	add	r3, r5
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0fe 	udiv	r0, r3, lr
 8000678:	fb0e 3310 	mls	r3, lr, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 fc0c 	mul.w	ip, r0, ip
 8000684:	45a4      	cmp	ip, r4
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x8c>
 8000688:	192c      	adds	r4, r5, r4
 800068a:	f100 33ff 	add.w	r3, r0, #4294967295
 800068e:	f080 8107 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000692:	45a4      	cmp	ip, r4
 8000694:	f240 8104 	bls.w	80008a0 <__udivmoddi4+0x290>
 8000698:	3802      	subs	r0, #2
 800069a:	442c      	add	r4, r5
 800069c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a0:	eba4 040c 	sub.w	r4, r4, ip
 80006a4:	2700      	movs	r7, #0
 80006a6:	b11e      	cbz	r6, 80006b0 <__udivmoddi4+0xa0>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c6 4300 	strd	r4, r3, [r6]
 80006b0:	4639      	mov	r1, r7
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d909      	bls.n	80006ce <__udivmoddi4+0xbe>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80eb 	beq.w	8000896 <__udivmoddi4+0x286>
 80006c0:	2700      	movs	r7, #0
 80006c2:	e9c6 0100 	strd	r0, r1, [r6]
 80006c6:	4638      	mov	r0, r7
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	fab3 f783 	clz	r7, r3
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d147      	bne.n	8000766 <__udivmoddi4+0x156>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xd0>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 80fa 	bhi.w	80008d4 <__udivmoddi4+0x2c4>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb61 0303 	sbc.w	r3, r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4698      	mov	r8, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d0e0      	beq.n	80006b0 <__udivmoddi4+0xa0>
 80006ee:	e9c6 4800 	strd	r4, r8, [r6]
 80006f2:	e7dd      	b.n	80006b0 <__udivmoddi4+0xa0>
 80006f4:	b902      	cbnz	r2, 80006f8 <__udivmoddi4+0xe8>
 80006f6:	deff      	udf	#255	; 0xff
 80006f8:	fab2 f282 	clz	r2, r2
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 808f 	bne.w	8000820 <__udivmoddi4+0x210>
 8000702:	1b49      	subs	r1, r1, r5
 8000704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000708:	fa1f f885 	uxth.w	r8, r5
 800070c:	2701      	movs	r7, #1
 800070e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000712:	0c23      	lsrs	r3, r4, #16
 8000714:	fb0e 111c 	mls	r1, lr, ip, r1
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb08 f10c 	mul.w	r1, r8, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x124>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4299      	cmp	r1, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2bc>
 8000732:	4684      	mov	ip, r0
 8000734:	1a59      	subs	r1, r3, r1
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000740:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x14c>
 800074c:	192c      	adds	r4, r5, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x14a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80b6 	bhi.w	80008c6 <__udivmoddi4+0x2b6>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e79f      	b.n	80006a6 <__udivmoddi4+0x96>
 8000766:	f1c7 0c20 	rsb	ip, r7, #32
 800076a:	40bb      	lsls	r3, r7
 800076c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000770:	ea4e 0e03 	orr.w	lr, lr, r3
 8000774:	fa01 f407 	lsl.w	r4, r1, r7
 8000778:	fa20 f50c 	lsr.w	r5, r0, ip
 800077c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000780:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000784:	4325      	orrs	r5, r4
 8000786:	fbb3 f9f8 	udiv	r9, r3, r8
 800078a:	0c2c      	lsrs	r4, r5, #16
 800078c:	fb08 3319 	mls	r3, r8, r9, r3
 8000790:	fa1f fa8e 	uxth.w	sl, lr
 8000794:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000798:	fb09 f40a 	mul.w	r4, r9, sl
 800079c:	429c      	cmp	r4, r3
 800079e:	fa02 f207 	lsl.w	r2, r2, r7
 80007a2:	fa00 f107 	lsl.w	r1, r0, r7
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b0:	f080 8087 	bcs.w	80008c2 <__udivmoddi4+0x2b2>
 80007b4:	429c      	cmp	r4, r3
 80007b6:	f240 8084 	bls.w	80008c2 <__udivmoddi4+0x2b2>
 80007ba:	f1a9 0902 	sub.w	r9, r9, #2
 80007be:	4473      	add	r3, lr
 80007c0:	1b1b      	subs	r3, r3, r4
 80007c2:	b2ad      	uxth	r5, r5
 80007c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007c8:	fb08 3310 	mls	r3, r8, r0, r3
 80007cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007d4:	45a2      	cmp	sl, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1e 0404 	adds.w	r4, lr, r4
 80007dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e0:	d26b      	bcs.n	80008ba <__udivmoddi4+0x2aa>
 80007e2:	45a2      	cmp	sl, r4
 80007e4:	d969      	bls.n	80008ba <__udivmoddi4+0x2aa>
 80007e6:	3802      	subs	r0, #2
 80007e8:	4474      	add	r4, lr
 80007ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ee:	fba0 8902 	umull	r8, r9, r0, r2
 80007f2:	eba4 040a 	sub.w	r4, r4, sl
 80007f6:	454c      	cmp	r4, r9
 80007f8:	46c2      	mov	sl, r8
 80007fa:	464b      	mov	r3, r9
 80007fc:	d354      	bcc.n	80008a8 <__udivmoddi4+0x298>
 80007fe:	d051      	beq.n	80008a4 <__udivmoddi4+0x294>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d069      	beq.n	80008d8 <__udivmoddi4+0x2c8>
 8000804:	ebb1 050a 	subs.w	r5, r1, sl
 8000808:	eb64 0403 	sbc.w	r4, r4, r3
 800080c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000810:	40fd      	lsrs	r5, r7
 8000812:	40fc      	lsrs	r4, r7
 8000814:	ea4c 0505 	orr.w	r5, ip, r5
 8000818:	e9c6 5400 	strd	r5, r4, [r6]
 800081c:	2700      	movs	r7, #0
 800081e:	e747      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000820:	f1c2 0320 	rsb	r3, r2, #32
 8000824:	fa20 f703 	lsr.w	r7, r0, r3
 8000828:	4095      	lsls	r5, r2
 800082a:	fa01 f002 	lsl.w	r0, r1, r2
 800082e:	fa21 f303 	lsr.w	r3, r1, r3
 8000832:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000836:	4338      	orrs	r0, r7
 8000838:	0c01      	lsrs	r1, r0, #16
 800083a:	fbb3 f7fe 	udiv	r7, r3, lr
 800083e:	fa1f f885 	uxth.w	r8, r5
 8000842:	fb0e 3317 	mls	r3, lr, r7, r3
 8000846:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084a:	fb07 f308 	mul.w	r3, r7, r8
 800084e:	428b      	cmp	r3, r1
 8000850:	fa04 f402 	lsl.w	r4, r4, r2
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x256>
 8000856:	1869      	adds	r1, r5, r1
 8000858:	f107 3cff 	add.w	ip, r7, #4294967295
 800085c:	d22f      	bcs.n	80008be <__udivmoddi4+0x2ae>
 800085e:	428b      	cmp	r3, r1
 8000860:	d92d      	bls.n	80008be <__udivmoddi4+0x2ae>
 8000862:	3f02      	subs	r7, #2
 8000864:	4429      	add	r1, r5
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	b281      	uxth	r1, r0
 800086a:	fbb3 f0fe 	udiv	r0, r3, lr
 800086e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000872:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000876:	fb00 f308 	mul.w	r3, r0, r8
 800087a:	428b      	cmp	r3, r1
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x27e>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f100 3cff 	add.w	ip, r0, #4294967295
 8000884:	d217      	bcs.n	80008b6 <__udivmoddi4+0x2a6>
 8000886:	428b      	cmp	r3, r1
 8000888:	d915      	bls.n	80008b6 <__udivmoddi4+0x2a6>
 800088a:	3802      	subs	r0, #2
 800088c:	4429      	add	r1, r5
 800088e:	1ac9      	subs	r1, r1, r3
 8000890:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000894:	e73b      	b.n	800070e <__udivmoddi4+0xfe>
 8000896:	4637      	mov	r7, r6
 8000898:	4630      	mov	r0, r6
 800089a:	e709      	b.n	80006b0 <__udivmoddi4+0xa0>
 800089c:	4607      	mov	r7, r0
 800089e:	e6e7      	b.n	8000670 <__udivmoddi4+0x60>
 80008a0:	4618      	mov	r0, r3
 80008a2:	e6fb      	b.n	800069c <__udivmoddi4+0x8c>
 80008a4:	4541      	cmp	r1, r8
 80008a6:	d2ab      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ac:	eb69 020e 	sbc.w	r2, r9, lr
 80008b0:	3801      	subs	r0, #1
 80008b2:	4613      	mov	r3, r2
 80008b4:	e7a4      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b6:	4660      	mov	r0, ip
 80008b8:	e7e9      	b.n	800088e <__udivmoddi4+0x27e>
 80008ba:	4618      	mov	r0, r3
 80008bc:	e795      	b.n	80007ea <__udivmoddi4+0x1da>
 80008be:	4667      	mov	r7, ip
 80008c0:	e7d1      	b.n	8000866 <__udivmoddi4+0x256>
 80008c2:	4681      	mov	r9, r0
 80008c4:	e77c      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	442c      	add	r4, r5
 80008ca:	e747      	b.n	800075c <__udivmoddi4+0x14c>
 80008cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d0:	442b      	add	r3, r5
 80008d2:	e72f      	b.n	8000734 <__udivmoddi4+0x124>
 80008d4:	4638      	mov	r0, r7
 80008d6:	e708      	b.n	80006ea <__udivmoddi4+0xda>
 80008d8:	4637      	mov	r7, r6
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0xa0>

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	ed93 7a00 	vldr	s14, [r3]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3304      	adds	r3, #4
 80008fc:	edd3 6a00 	vldr	s13, [r3]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3304      	adds	r3, #4
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800090c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3308      	adds	r3, #8
 8000914:	edd3 6a00 	vldr	s13, [r3]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3308      	adds	r3, #8
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	330c      	adds	r3, #12
 800092c:	edd3 6a00 	vldr	s13, [r3]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	330c      	adds	r3, #12
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800093c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000940:	eeb0 0a67 	vmov.f32	s0, s15
 8000944:	f000 f91e 	bl	8000b84 <invSqrt>
 8000948:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	ed97 7a07 	vldr	s14, [r7, #28]
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3304      	adds	r3, #4
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ed97 7a07 	vldr	s14, [r7, #28]
 800096a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800096e:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3308      	adds	r3, #8
 8000976:	edd3 7a00 	vldr	s15, [r3]
 800097a:	ed97 7a07 	vldr	s14, [r7, #28]
 800097e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000982:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	330c      	adds	r3, #12
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000996:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 800099a:	ed97 7a05 	vldr	s14, [r7, #20]
 800099e:	edd7 7a04 	vldr	s15, [r7, #16]
 80009a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80009aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80009ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80009be:	edd7 7a06 	vldr	s15, [r7, #24]
 80009c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c6:	edd7 6a05 	vldr	s13, [r7, #20]
 80009ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80009da:	edd7 7a04 	vldr	s15, [r7, #16]
 80009de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009e6:	edd7 6a03 	vldr	s13, [r7, #12]
 80009ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f6:	eef0 0a67 	vmov.f32	s1, s15
 80009fa:	eeb0 0a46 	vmov.f32	s0, s12
 80009fe:	f003 fff9 	bl	80049f4 <atan2f>
 8000a02:	eef0 7a40 	vmov.f32	s15, s0
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <Quaternion_Update+0x28c>)
 8000a08:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8000a0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a18:	edd7 6a06 	vldr	s13, [r7, #24]
 8000a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a30:	f003 ff88 	bl	8004944 <asinf>
 8000a34:	eef0 7a40 	vmov.f32	s15, s0
 8000a38:	eef1 7a67 	vneg.f32	s15, s15
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <Quaternion_Update+0x290>)
 8000a3e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8000a42:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a5e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000a62:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a7e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a9e:	eef0 0a67 	vmov.f32	s1, s15
 8000aa2:	eeb0 0a46 	vmov.f32	s0, s12
 8000aa6:	f003 ffa5 	bl	80049f4 <atan2f>
 8000aaa:	eef0 7a40 	vmov.f32	s15, s0
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <Quaternion_Update+0x294>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <Quaternion_Update+0x28c>)
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000b78 <Quaternion_Update+0x298>
 8000abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <Quaternion_Update+0x28c>)
 8000ac4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <Quaternion_Update+0x290>)
 8000aca:	edd3 7a00 	vldr	s15, [r3]
 8000ace:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000b78 <Quaternion_Update+0x298>
 8000ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <Quaternion_Update+0x290>)
 8000ad8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <Quaternion_Update+0x294>)
 8000ade:	edd3 7a00 	vldr	s15, [r3]
 8000ae2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000b78 <Quaternion_Update+0x298>
 8000ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <Quaternion_Update+0x294>)
 8000aec:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <Quaternion_Update+0x294>)
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	db0a      	blt.n	8000b16 <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <Quaternion_Update+0x294>)
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000b7c <Quaternion_Update+0x29c>
 8000b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <Quaternion_Update+0x294>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]
 8000b14:	e007      	b.n	8000b26 <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <Quaternion_Update+0x294>)
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	eef1 7a67 	vneg.f32	s15, s15
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <Quaternion_Update+0x294>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b34:	db0a      	blt.n	8000b4c <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b38:	edd3 7a00 	vldr	s15, [r3]
 8000b3c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000b80 <Quaternion_Update+0x2a0>
 8000b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b46:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8000b4a:	e00b      	b.n	8000b64 <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b4e:	edd3 7a00 	vldr	s15, [r3]
 8000b52:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000b80 <Quaternion_Update+0x2a0>
 8000b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b5a:	eef1 7a67 	vneg.f32	s15, s15
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b60:	edc3 7a00 	vstr	s15, [r3]
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	200000f8 	.word	0x200000f8
 8000b74:	200000fc 	.word	0x200000fc
 8000b78:	42652ee1 	.word	0x42652ee1
 8000b7c:	43b40000 	.word	0x43b40000
 8000b80:	43340000 	.word	0x43340000

08000b84 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	105a      	asrs	r2, r3, #1
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <invSqrt+0x74>)
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000bbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	ee07 3a90 	vmov	s15, r3
}
 8000bea:	eeb0 0a67 	vmov.f32	s0, s15
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	5f3759df 	.word	0x5f3759df

08000bfc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d101      	bne.n	8000c34 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d101      	bne.n	8000c5a <LL_SPI_IsActiveFlag_TXE+0x18>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c78:	2b80      	cmp	r3, #128	; 0x80
 8000c7a:	d101      	bne.n	8000c80 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	b2db      	uxtb	r3, r3
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	330c      	adds	r3, #12
 8000cb8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	78fa      	ldrb	r2, [r7, #3]
 8000cbe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <bno080_Initialization>:
volatile uint8_t bno_read_done = 0;
volatile uint8_t calc_data = 0;
volatile uint8_t vall = 0;

uint8_t bno080_Initialization(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

	bno080_stop_IT();
 8000cd0:	f000 f859 	bl	8000d86 <bno080_stop_IT>
	LL_SPI_Enable(BNO_SPI_CHANNEL);
 8000cd4:	4825      	ldr	r0, [pc, #148]	; (8000d6c <bno080_Initialization+0xa0>)
 8000cd6:	f7ff ff91 	bl	8000bfc <LL_SPI_Enable>

	BNO_DESELECT;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2110      	movs	r1, #16
 8000cde:	4824      	ldr	r0, [pc, #144]	; (8000d70 <bno080_Initialization+0xa4>)
 8000ce0:	f002 f950 	bl	8002f84 <HAL_GPIO_WritePin>
	BNO_RESET;
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	4821      	ldr	r0, [pc, #132]	; (8000d70 <bno080_Initialization+0xa4>)
 8000cea:	f002 f94b 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000cee:	20c8      	movs	r0, #200	; 0xc8
 8000cf0:	f001 fb28 	bl	8002344 <HAL_Delay>
	BNO_ENABLE;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	481d      	ldr	r0, [pc, #116]	; (8000d70 <bno080_Initialization+0xa4>)
 8000cfa:	f002 f943 	bl	8002f84 <HAL_GPIO_WritePin>
	//HAL_Delay(120);
	HAL_Delay(95);
 8000cfe:	205f      	movs	r0, #95	; 0x5f
 8000d00:	f001 fb20 	bl	8002344 <HAL_Delay>

	//Wait for first assertion of INT before using WAK pin. Can take ~104ms
	if(waitForSPI() != 1)
 8000d04:	f000 fa9a 	bl	800123c <waitForSPI>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d001      	beq.n	8000d12 <bno080_Initialization+0x46>
	{
		return 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e029      	b.n	8000d66 <bno080_Initialization+0x9a>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When bno080 first boots it broadcasts big startup packet
	//Read it and dump it
	if(waitForSPI() != 1) //Wait for assertion of INT before reading advert message.
 8000d12:	f000 fa93 	bl	800123c <waitForSPI>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d001      	beq.n	8000d20 <bno080_Initialization+0x54>
	{
		return 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e022      	b.n	8000d66 <bno080_Initialization+0x9a>
	}
	receivePacket();
 8000d20:	f000 fab6 	bl	8001290 <receivePacket>

	//The bno080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	if(waitForSPI() != 1) //Wait for assertion of INT before reading Init response
 8000d24:	f000 fa8a 	bl	800123c <waitForSPI>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d001      	beq.n	8000d32 <bno080_Initialization+0x66>
	{
		return 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e019      	b.n	8000d66 <bno080_Initialization+0x9a>
	}
	receivePacket();
 8000d32:	f000 faad 	bl	8001290 <receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <bno080_Initialization+0xa8>)
 8000d38:	22f9      	movs	r2, #249	; 0xf9
 8000d3a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <bno080_Initialization+0xa8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	sendPacket(CHANNEL_CONTROL, 2);
 8000d42:	2102      	movs	r1, #2
 8000d44:	2002      	movs	r0, #2
 8000d46:	f000 fb9b 	bl	8001480 <sendPacket>

	waitForSPI();
 8000d4a:	f000 fa77 	bl	800123c <waitForSPI>
	if(receivePacket() == 1)
 8000d4e:	f000 fa9f 	bl	8001290 <receivePacket>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d105      	bne.n	8000d64 <bno080_Initialization+0x98>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <bno080_Initialization+0xa8>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2bf8      	cmp	r3, #248	; 0xf8
 8000d5e:	d101      	bne.n	8000d64 <bno080_Initialization+0x98>
		{
			// Sensor OK
			return 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <bno080_Initialization+0x9a>
		}
	}

	// Something went wrong
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40003c00 	.word	0x40003c00
 8000d70:	40020400 	.word	0x40020400
 8000d74:	20000154 	.word	0x20000154

08000d78 <bno080_start_IT>:

/*
 * Start Reading in Interrupt Mode
 * */
void bno080_start_IT(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(BNO_IRQN);
 8000d7c:	2028      	movs	r0, #40	; 0x28
 8000d7e:	f001 fc1c 	bl	80025ba <HAL_NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <bno080_stop_IT>:

/*
 * Stop Reading in Interrupt Mode
 * */
void bno080_stop_IT(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(BNO_IRQN);
 8000d8a:	2028      	movs	r0, #40	; 0x28
 8000d8c:	f001 fc23 	bl	80025d6 <HAL_NVIC_DisableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <bno080_qToFloat>:

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float bno080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	ed2d 8b02 	vpush	{d8}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	80fb      	strh	r3, [r7, #6]
 8000da4:	4613      	mov	r3, r2
 8000da6:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8000da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	425b      	negs	r3, r3
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	eef0 0a67 	vmov.f32	s1, s15
 8000dc4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000dc8:	f003 fe16 	bl	80049f8 <powf>
 8000dcc:	eef0 7a40 	vmov.f32	s15, s0
 8000dd0:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8000dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	ecbd 8b02 	vpop	{d8}
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <bno080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void bno080_enableRotationVector(uint16_t timeBetweenReports)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	80fb      	strh	r3, [r7, #6]
	setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	2005      	movs	r0, #5
 8000df4:	f000 f804 	bl	8000e00 <setFeatureCommand>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <setFeatureCommand>:


//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e10:	22fd      	movs	r2, #253	; 0xfd
 8000e12:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8000e14:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e32:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e3c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e46:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	0e1b      	lsrs	r3, r3, #24
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e50:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e70:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e7a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	0c1b      	lsrs	r3, r3, #16
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e84:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0e1b      	lsrs	r3, r3, #24
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <setFeatureCommand+0xa0>)
 8000e8e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	sendPacket(CHANNEL_CONTROL, 17);
 8000e90:	2111      	movs	r1, #17
 8000e92:	2002      	movs	r0, #2
 8000e94:	f000 faf4 	bl	8001480 <sendPacket>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000154 	.word	0x20000154

08000ea4 <parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void parseCommandReport(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <parseCommandReport+0x30>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2bf1      	cmp	r3, #241	; 0xf1
 8000eb0:	d109      	bne.n	8000ec6 <parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <parseCommandReport+0x30>)
 8000eb4:	789b      	ldrb	r3, [r3, #2]
 8000eb6:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	d103      	bne.n	8000ec6 <parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <parseCommandReport+0x30>)
 8000ec0:	795a      	ldrb	r2, [r3, #5]
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <parseCommandReport+0x34>)
 8000ec4:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000154 	.word	0x20000154
 8000ed8:	200001d7 	.word	0x200001d7

08000edc <parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void parseInputReport(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <parseInputReport+0x20c>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <parseInputReport+0x20c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8000ef4:	8a3b      	ldrh	r3, [r7, #16]
 8000ef6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000efa:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8000efc:	8a3b      	ldrh	r3, [r7, #16]
 8000efe:	3b04      	subs	r3, #4
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8000f04:	4b79      	ldr	r3, [pc, #484]	; (80010ec <parseInputReport+0x210>)
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	061b      	lsls	r3, r3, #24
 8000f0a:	4a78      	ldr	r2, [pc, #480]	; (80010ec <parseInputReport+0x210>)
 8000f0c:	78d2      	ldrb	r2, [r2, #3]
 8000f0e:	0412      	lsls	r2, r2, #16
 8000f10:	4313      	orrs	r3, r2
 8000f12:	4a76      	ldr	r2, [pc, #472]	; (80010ec <parseInputReport+0x210>)
 8000f14:	7892      	ldrb	r2, [r2, #2]
 8000f16:	0212      	lsls	r2, r2, #8
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	4a74      	ldr	r2, [pc, #464]	; (80010ec <parseInputReport+0x210>)
 8000f1c:	7852      	ldrb	r2, [r2, #1]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	4a73      	ldr	r2, [pc, #460]	; (80010f0 <parseInputReport+0x214>)
 8000f22:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8000f24:	4b71      	ldr	r3, [pc, #452]	; (80010ec <parseInputReport+0x210>)
 8000f26:	79db      	ldrb	r3, [r3, #7]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8000f2e:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <parseInputReport+0x210>)
 8000f30:	7a9b      	ldrb	r3, [r3, #10]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <parseInputReport+0x210>)
 8000f38:	7a5b      	ldrb	r3, [r3, #9]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8000f42:	4b6a      	ldr	r3, [pc, #424]	; (80010ec <parseInputReport+0x210>)
 8000f44:	7b1b      	ldrb	r3, [r3, #12]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	4b68      	ldr	r3, [pc, #416]	; (80010ec <parseInputReport+0x210>)
 8000f4c:	7adb      	ldrb	r3, [r3, #11]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8000f56:	4b65      	ldr	r3, [pc, #404]	; (80010ec <parseInputReport+0x210>)
 8000f58:	7b9b      	ldrb	r3, [r3, #14]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b63      	ldr	r3, [pc, #396]	; (80010ec <parseInputReport+0x210>)
 8000f60:	7b5b      	ldrb	r3, [r3, #13]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8000f72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f76:	2b0e      	cmp	r3, #14
 8000f78:	dd09      	ble.n	8000f8e <parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8000f7a:	4b5c      	ldr	r3, [pc, #368]	; (80010ec <parseInputReport+0x210>)
 8000f7c:	7c1b      	ldrb	r3, [r3, #16]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <parseInputReport+0x210>)
 8000f84:	7bdb      	ldrb	r3, [r3, #15]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8000f8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f92:	2b10      	cmp	r3, #16
 8000f94:	dd09      	ble.n	8000faa <parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8000f96:	4b55      	ldr	r3, [pc, #340]	; (80010ec <parseInputReport+0x210>)
 8000f98:	7c9b      	ldrb	r3, [r3, #18]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	4b53      	ldr	r3, [pc, #332]	; (80010ec <parseInputReport+0x210>)
 8000fa0:	7c5b      	ldrb	r3, [r3, #17]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <parseInputReport+0x210>)
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d053      	beq.n	800105a <parseInputReport+0x17e>
 8000fb2:	2b05      	cmp	r3, #5
 8000fb4:	dc0b      	bgt.n	8000fce <parseInputReport+0xf2>
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d033      	beq.n	8001022 <parseInputReport+0x146>
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	dc02      	bgt.n	8000fc4 <parseInputReport+0xe8>
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d013      	beq.n	8000fea <parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000fc2:	e08a      	b.n	80010da <parseInputReport+0x1fe>
	switch(shtpData[5])
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d03a      	beq.n	800103e <parseInputReport+0x162>
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d01c      	beq.n	8001006 <parseInputReport+0x12a>
}
 8000fcc:	e085      	b.n	80010da <parseInputReport+0x1fe>
	switch(shtpData[5])
 8000fce:	2b13      	cmp	r3, #19
 8000fd0:	d05b      	beq.n	800108a <parseInputReport+0x1ae>
 8000fd2:	2b13      	cmp	r3, #19
 8000fd4:	dc04      	bgt.n	8000fe0 <parseInputReport+0x104>
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d03f      	beq.n	800105a <parseInputReport+0x17e>
 8000fda:	2b11      	cmp	r3, #17
 8000fdc:	d051      	beq.n	8001082 <parseInputReport+0x1a6>
}
 8000fde:	e07c      	b.n	80010da <parseInputReport+0x1fe>
	switch(shtpData[5])
 8000fe0:	2b1e      	cmp	r3, #30
 8000fe2:	d057      	beq.n	8001094 <parseInputReport+0x1b8>
 8000fe4:	2bf1      	cmp	r3, #241	; 0xf1
 8000fe6:	d06d      	beq.n	80010c4 <parseInputReport+0x1e8>
}
 8000fe8:	e077      	b.n	80010da <parseInputReport+0x1fe>
			accelAccuracy = status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <parseInputReport+0x218>)
 8000ff0:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8000ff2:	4a41      	ldr	r2, [pc, #260]	; (80010f8 <parseInputReport+0x21c>)
 8000ff4:	89bb      	ldrh	r3, [r7, #12]
 8000ff6:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8000ff8:	4a40      	ldr	r2, [pc, #256]	; (80010fc <parseInputReport+0x220>)
 8000ffa:	897b      	ldrh	r3, [r7, #10]
 8000ffc:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8000ffe:	4a40      	ldr	r2, [pc, #256]	; (8001100 <parseInputReport+0x224>)
 8001000:	893b      	ldrh	r3, [r7, #8]
 8001002:	8013      	strh	r3, [r2, #0]
			break;
 8001004:	e069      	b.n	80010da <parseInputReport+0x1fe>
			accelLinAccuracy = status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <parseInputReport+0x228>)
 800100c:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800100e:	4a3e      	ldr	r2, [pc, #248]	; (8001108 <parseInputReport+0x22c>)
 8001010:	89bb      	ldrh	r3, [r7, #12]
 8001012:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001014:	4a3d      	ldr	r2, [pc, #244]	; (800110c <parseInputReport+0x230>)
 8001016:	897b      	ldrh	r3, [r7, #10]
 8001018:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800101a:	4a3d      	ldr	r2, [pc, #244]	; (8001110 <parseInputReport+0x234>)
 800101c:	893b      	ldrh	r3, [r7, #8]
 800101e:	8013      	strh	r3, [r2, #0]
			break;
 8001020:	e05b      	b.n	80010da <parseInputReport+0x1fe>
			gyroAccuracy = status;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <parseInputReport+0x238>)
 8001028:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800102a:	4a3b      	ldr	r2, [pc, #236]	; (8001118 <parseInputReport+0x23c>)
 800102c:	89bb      	ldrh	r3, [r7, #12]
 800102e:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <parseInputReport+0x240>)
 8001032:	897b      	ldrh	r3, [r7, #10]
 8001034:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <parseInputReport+0x244>)
 8001038:	893b      	ldrh	r3, [r7, #8]
 800103a:	8013      	strh	r3, [r2, #0]
			break;
 800103c:	e04d      	b.n	80010da <parseInputReport+0x1fe>
			magAccuracy = status;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <parseInputReport+0x248>)
 8001044:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001046:	4a38      	ldr	r2, [pc, #224]	; (8001128 <parseInputReport+0x24c>)
 8001048:	89bb      	ldrh	r3, [r7, #12]
 800104a:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 800104c:	4a37      	ldr	r2, [pc, #220]	; (800112c <parseInputReport+0x250>)
 800104e:	897b      	ldrh	r3, [r7, #10]
 8001050:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001052:	4a37      	ldr	r2, [pc, #220]	; (8001130 <parseInputReport+0x254>)
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	8013      	strh	r3, [r2, #0]
			break;
 8001058:	e03f      	b.n	80010da <parseInputReport+0x1fe>
			quatAccuracy = status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <parseInputReport+0x258>)
 8001060:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001062:	4a35      	ldr	r2, [pc, #212]	; (8001138 <parseInputReport+0x25c>)
 8001064:	89bb      	ldrh	r3, [r7, #12]
 8001066:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001068:	4a34      	ldr	r2, [pc, #208]	; (800113c <parseInputReport+0x260>)
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800106e:	4a34      	ldr	r2, [pc, #208]	; (8001140 <parseInputReport+0x264>)
 8001070:	893b      	ldrh	r3, [r7, #8]
 8001072:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001074:	4a33      	ldr	r2, [pc, #204]	; (8001144 <parseInputReport+0x268>)
 8001076:	8afb      	ldrh	r3, [r7, #22]
 8001078:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800107a:	4a33      	ldr	r2, [pc, #204]	; (8001148 <parseInputReport+0x26c>)
 800107c:	8abb      	ldrh	r3, [r7, #20]
 800107e:	8013      	strh	r3, [r2, #0]
			break;
 8001080:	e02b      	b.n	80010da <parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 8001082:	4a32      	ldr	r2, [pc, #200]	; (800114c <parseInputReport+0x270>)
 8001084:	893b      	ldrh	r3, [r7, #8]
 8001086:	8013      	strh	r3, [r2, #0]
			break;
 8001088:	e027      	b.n	80010da <parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <parseInputReport+0x210>)
 800108c:	7a5a      	ldrb	r2, [r3, #9]
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <parseInputReport+0x274>)
 8001090:	701a      	strb	r2, [r3, #0]
			break;
 8001092:	e022      	b.n	80010da <parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <parseInputReport+0x210>)
 8001096:	7a9a      	ldrb	r2, [r3, #10]
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <parseInputReport+0x278>)
 800109a:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800109c:	2300      	movs	r3, #0
 800109e:	74fb      	strb	r3, [r7, #19]
 80010a0:	e00c      	b.n	80010bc <parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80010a2:	7cfb      	ldrb	r3, [r7, #19]
 80010a4:	f103 020b 	add.w	r2, r3, #11
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <parseInputReport+0x27c>)
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	440b      	add	r3, r1
 80010b0:	490e      	ldr	r1, [pc, #56]	; (80010ec <parseInputReport+0x210>)
 80010b2:	5c8a      	ldrb	r2, [r1, r2]
 80010b4:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80010b6:	7cfb      	ldrb	r3, [r7, #19]
 80010b8:	3301      	adds	r3, #1
 80010ba:	74fb      	strb	r3, [r7, #19]
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d9ef      	bls.n	80010a2 <parseInputReport+0x1c6>
			break;
 80010c2:	e00a      	b.n	80010da <parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <parseInputReport+0x210>)
 80010c6:	79db      	ldrb	r3, [r3, #7]
 80010c8:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	d103      	bne.n	80010d8 <parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <parseInputReport+0x210>)
 80010d2:	7a9a      	ldrb	r2, [r3, #10]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <parseInputReport+0x280>)
 80010d6:	701a      	strb	r2, [r3, #0]
			break;
 80010d8:	bf00      	nop
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000104 	.word	0x20000104
 80010ec:	20000154 	.word	0x20000154
 80010f0:	20000110 	.word	0x20000110
 80010f4:	200001dc 	.word	0x200001dc
 80010f8:	200001d4 	.word	0x200001d4
 80010fc:	200001de 	.word	0x200001de
 8001100:	20000146 	.word	0x20000146
 8001104:	20000142 	.word	0x20000142
 8001108:	20000114 	.word	0x20000114
 800110c:	200001d8 	.word	0x200001d8
 8001110:	2000014c 	.word	0x2000014c
 8001114:	2000014e 	.word	0x2000014e
 8001118:	20000150 	.word	0x20000150
 800111c:	2000013e 	.word	0x2000013e
 8001120:	2000013c 	.word	0x2000013c
 8001124:	20000108 	.word	0x20000108
 8001128:	20000140 	.word	0x20000140
 800112c:	200001da 	.word	0x200001da
 8001130:	20000144 	.word	0x20000144
 8001134:	200000b0 	.word	0x200000b0
 8001138:	200000a6 	.word	0x200000a6
 800113c:	200000a8 	.word	0x200000a8
 8001140:	200000aa 	.word	0x200000aa
 8001144:	200000ac 	.word	0x200000ac
 8001148:	200000ae 	.word	0x200000ae
 800114c:	200001e0 	.word	0x200001e0
 8001150:	20000152 	.word	0x20000152
 8001154:	200001d6 	.word	0x200001d6
 8001158:	20000148 	.word	0x20000148
 800115c:	200001d7 	.word	0x200001d7

08001160 <bno080_getQuatI>:

//Return the rotation vector quaternion I
float bno080_getQuatI(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatI, rotationVector_Q1);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <bno080_getQuatI+0x24>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <bno080_getQuatI+0x28>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f7ff fe0d 	bl	8000d94 <bno080_qToFloat>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
}
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000a6 	.word	0x200000a6
 8001188:	20000000 	.word	0x20000000

0800118c <bno080_getQuatJ>:

//Return the rotation vector quaternion J
float bno080_getQuatJ(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <bno080_getQuatJ+0x24>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <bno080_getQuatJ+0x28>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff fdf7 	bl	8000d94 <bno080_qToFloat>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200000a8 	.word	0x200000a8
 80011b4:	20000000 	.word	0x20000000

080011b8 <bno080_getQuatK>:

//Return the rotation vector quaternion K
float bno080_getQuatK(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatK, rotationVector_Q1);
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <bno080_getQuatK+0x24>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <bno080_getQuatK+0x28>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff fde1 	bl	8000d94 <bno080_qToFloat>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000aa 	.word	0x200000aa
 80011e0:	20000000 	.word	0x20000000

080011e4 <bno080_getQuatReal>:

//Return the rotation vector quaternion Real
float bno080_getQuatReal(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatReal, rotationVector_Q1);
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <bno080_getQuatReal+0x24>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <bno080_getQuatReal+0x28>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4619      	mov	r1, r3
 80011f8:	4610      	mov	r0, r2
 80011fa:	f7ff fdcb 	bl	8000d94 <bno080_qToFloat>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000ac 	.word	0x200000ac
 800120c:	20000000 	.word	0x20000000

08001210 <bno080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float bno080_getQuatRadianAccuracy(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <bno080_getQuatRadianAccuracy+0x24>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <bno080_getQuatRadianAccuracy+0x28>)
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f7ff fdb5 	bl	8000d94 <bno080_qToFloat>
 800122a:	eef0 7a40 	vmov.f32	s15, s0
}
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000ae 	.word	0x200000ae
 8001238:	20000000 	.word	0x20000000

0800123c <waitForSPI>:




uint8_t waitForSPI(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	uint32_t tickstart = HAL_GetTick();
 8001242:	f001 f873 	bl	800232c <HAL_GetTick>
 8001246:	6078      	str	r0, [r7, #4]
	while(HAL_GPIO_ReadPin(BNO_INT_PORT_F, BNO_INT_PIN_F) != GPIO_PIN_RESET){
 8001248:	e010      	b.n	800126c <waitForSPI+0x30>
		vall += 1;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <waitForSPI+0x4c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <waitForSPI+0x4c>)
 8001256:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick() - tickstart) > 300){
 8001258:	f001 f868 	bl	800232c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001266:	d901      	bls.n	800126c <waitForSPI+0x30>
			return 0;
 8001268:	2300      	movs	r3, #0
 800126a:	e008      	b.n	800127e <waitForSPI+0x42>
	while(HAL_GPIO_ReadPin(BNO_INT_PORT_F, BNO_INT_PIN_F) != GPIO_PIN_RESET){
 800126c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001270:	4806      	ldr	r0, [pc, #24]	; (800128c <waitForSPI+0x50>)
 8001272:	f001 fe6f 	bl	8002f54 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e6      	bne.n	800124a <waitForSPI+0xe>
		}
	}

	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000b3 	.word	0x200000b3
 800128c:	40020800 	.word	0x40020800

08001290 <receivePacket>:




uint8_t receivePacket(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

	uint8_t incoming;

	if (HAL_GPIO_ReadPin(BNO_INT_PORT_F, BNO_INT_PIN_F) == 1)
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	4834      	ldr	r0, [pc, #208]	; (800136c <receivePacket+0xdc>)
 800129c:	f001 fe5a 	bl	8002f54 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <receivePacket+0x1a>
	{
		return 0; //Data is not available
 80012a6:	2300      	movs	r3, #0
 80012a8:	e05b      	b.n	8001362 <receivePacket+0xd2>
	}

	BNO_SELECT;
 80012aa:	2200      	movs	r2, #0
 80012ac:	2110      	movs	r1, #16
 80012ae:	4830      	ldr	r0, [pc, #192]	; (8001370 <receivePacket+0xe0>)
 80012b0:	f001 fe68 	bl	8002f84 <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = LL_SPI_SendByte(0);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f933 	bl	8001520 <LL_SPI_SendByte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = LL_SPI_SendByte(0);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f92e 	bl	8001520 <LL_SPI_SendByte>
 80012c4:	4603      	mov	r3, r0
 80012c6:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = LL_SPI_SendByte(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f929 	bl	8001520 <LL_SPI_SendByte>
 80012ce:	4603      	mov	r3, r0
 80012d0:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = LL_SPI_SendByte(0); //Not sure if we need to store this or not
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f924 	bl	8001520 <LL_SPI_SendByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <receivePacket+0xe4>)
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80012e2:	4a24      	ldr	r2, [pc, #144]	; (8001374 <receivePacket+0xe4>)
 80012e4:	7b3b      	ldrb	r3, [r7, #12]
 80012e6:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80012e8:	4a22      	ldr	r2, [pc, #136]	; (8001374 <receivePacket+0xe4>)
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <receivePacket+0xe4>)
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001302:	893b      	ldrh	r3, [r7, #8]
 8001304:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001308:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800130a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <receivePacket+0x86>
	{
		//Packet is empty
		return 0; //All done
 8001312:	2300      	movs	r3, #0
 8001314:	e025      	b.n	8001362 <receivePacket+0xd2>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001316:	893b      	ldrh	r3, [r7, #8]
 8001318:	3b04      	subs	r3, #4
 800131a:	b29b      	uxth	r3, r3
 800131c:	813b      	strh	r3, [r7, #8]
	dataLength = 210;
 800131e:	23d2      	movs	r3, #210	; 0xd2
 8001320:	813b      	strh	r3, [r7, #8]
	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001322:	2300      	movs	r3, #0
 8001324:	81fb      	strh	r3, [r7, #14]
 8001326:	e00e      	b.n	8001346 <receivePacket+0xb6>
	{
		incoming = LL_SPI_SendByte(0xFF);
 8001328:	20ff      	movs	r0, #255	; 0xff
 800132a:	f000 f8f9 	bl	8001520 <LL_SPI_SendByte>
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001332:	89fb      	ldrh	r3, [r7, #14]
 8001334:	2b7f      	cmp	r3, #127	; 0x7f
 8001336:	d803      	bhi.n	8001340 <receivePacket+0xb0>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	490f      	ldr	r1, [pc, #60]	; (8001378 <receivePacket+0xe8>)
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	3301      	adds	r3, #1
 8001344:	81fb      	strh	r3, [r7, #14]
 8001346:	89fa      	ldrh	r2, [r7, #14]
 8001348:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbeb      	blt.n	8001328 <receivePacket+0x98>
	}
	//printf("\n");

	BNO_DESELECT;
 8001350:	2201      	movs	r2, #1
 8001352:	2110      	movs	r1, #16
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <receivePacket+0xe0>)
 8001356:	f001 fe15 	bl	8002f84 <HAL_GPIO_WritePin>

	bno_read_done = 1;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <receivePacket+0xec>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]

	return 1;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40020800 	.word	0x40020800
 8001370:	40020400 	.word	0x40020400
 8001374:	20000104 	.word	0x20000104
 8001378:	20000154 	.word	0x20000154
 800137c:	200000b2 	.word	0x200000b2

08001380 <receivePacket_IT>:

uint8_t receivePacket_IT(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
	uint8_t incoming;

	BNO_SELECT;
 8001386:	2200      	movs	r2, #0
 8001388:	2110      	movs	r1, #16
 800138a:	483a      	ldr	r0, [pc, #232]	; (8001474 <receivePacket_IT+0xf4>)
 800138c:	f001 fdfa 	bl	8002f84 <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = LL_SPI_SendByte(0);
 8001390:	2000      	movs	r0, #0
 8001392:	f000 f8c5 	bl	8001520 <LL_SPI_SendByte>
 8001396:	4603      	mov	r3, r0
 8001398:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = LL_SPI_SendByte(0);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f8c0 	bl	8001520 <LL_SPI_SendByte>
 80013a0:	4603      	mov	r3, r0
 80013a2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = LL_SPI_SendByte(0);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f8bb 	bl	8001520 <LL_SPI_SendByte>
 80013aa:	4603      	mov	r3, r0
 80013ac:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = LL_SPI_SendByte(0); //Not sure if we need to store this or not
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f8b6 	bl	8001520 <LL_SPI_SendByte>
 80013b4:	4603      	mov	r3, r0
 80013b6:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80013b8:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <receivePacket_IT+0xf8>)
 80013ba:	7b7b      	ldrb	r3, [r7, #13]
 80013bc:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80013be:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <receivePacket_IT+0xf8>)
 80013c0:	7b3b      	ldrb	r3, [r7, #12]
 80013c2:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80013c4:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <receivePacket_IT+0xf8>)
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80013ca:	4a2b      	ldr	r2, [pc, #172]	; (8001478 <receivePacket_IT+0xf8>)
 80013cc:	7abb      	ldrb	r3, [r7, #10]
 80013ce:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80013de:	893b      	ldrh	r3, [r7, #8]
 80013e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013e4:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80013e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <receivePacket_IT+0x72>
	{
		//Packet is empty
		return 0; //All done
 80013ee:	2300      	movs	r3, #0
 80013f0:	e03c      	b.n	800146c <receivePacket_IT+0xec>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80013f2:	893b      	ldrh	r3, [r7, #8]
 80013f4:	3b04      	subs	r3, #4
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	813b      	strh	r3, [r7, #8]
	//dataLength = 210;
	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	81fb      	strh	r3, [r7, #14]
 80013fe:	e00e      	b.n	800141e <receivePacket_IT+0x9e>
	{
		incoming = LL_SPI_SendByte(0xFF);
 8001400:	20ff      	movs	r0, #255	; 0xff
 8001402:	f000 f88d 	bl	8001520 <LL_SPI_SendByte>
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	2b7f      	cmp	r3, #127	; 0x7f
 800140e:	d803      	bhi.n	8001418 <receivePacket_IT+0x98>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	491a      	ldr	r1, [pc, #104]	; (800147c <receivePacket_IT+0xfc>)
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	3301      	adds	r3, #1
 800141c:	81fb      	strh	r3, [r7, #14]
 800141e:	89fa      	ldrh	r2, [r7, #14]
 8001420:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbeb      	blt.n	8001400 <receivePacket_IT+0x80>
	}

	BNO_DESELECT;
 8001428:	2201      	movs	r2, #1
 800142a:	2110      	movs	r1, #16
 800142c:	4811      	ldr	r0, [pc, #68]	; (8001474 <receivePacket_IT+0xf4>)
 800142e:	f001 fda9 	bl	8002f84 <HAL_GPIO_WritePin>

	//Check to see if this packet is a sensor reporting its data to us
	if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <receivePacket_IT+0xf8>)
 8001434:	789b      	ldrb	r3, [r3, #2]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d107      	bne.n	800144a <receivePacket_IT+0xca>
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <receivePacket_IT+0xfc>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2bfb      	cmp	r3, #251	; 0xfb
 8001440:	d103      	bne.n	800144a <receivePacket_IT+0xca>
	{
		parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001442:	f7ff fd4b 	bl	8000edc <parseInputReport>
		return 1;
 8001446:	2301      	movs	r3, #1
 8001448:	e010      	b.n	800146c <receivePacket_IT+0xec>
	}
	else if (shtpHeader[2] == CHANNEL_CONTROL)
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <receivePacket_IT+0xf8>)
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d103      	bne.n	800145a <receivePacket_IT+0xda>
	{
		parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001452:	f7ff fd27 	bl	8000ea4 <parseCommandReport>
		return 1;
 8001456:	2301      	movs	r3, #1
 8001458:	e008      	b.n	800146c <receivePacket_IT+0xec>
	}
	else if(shtpHeader[2] == CHANNEL_GYRO)
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <receivePacket_IT+0xf8>)
 800145c:	789b      	ldrb	r3, [r3, #2]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d103      	bne.n	800146a <receivePacket_IT+0xea>
	{
		parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001462:	f7ff fd3b 	bl	8000edc <parseInputReport>
		return 1;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <receivePacket_IT+0xec>
	}


	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40020400 	.word	0x40020400
 8001478:	20000104 	.word	0x20000104
 800147c:	20000154 	.word	0x20000154

08001480 <sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
uint8_t sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	4613      	mov	r3, r2
 800148e:	71bb      	strb	r3, [r7, #6]

	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	3304      	adds	r3, #4
 8001494:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (waitForSPI() == 0){
 8001496:	f7ff fed1 	bl	800123c <waitForSPI>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <sendPacket+0x24>
		return 0; //Data is not available
 80014a0:	2300      	movs	r3, #0
 80014a2:	e032      	b.n	800150a <sendPacket+0x8a>
	}

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	BNO_SELECT;
 80014a4:	2200      	movs	r2, #0
 80014a6:	2110      	movs	r1, #16
 80014a8:	481a      	ldr	r0, [pc, #104]	; (8001514 <sendPacket+0x94>)
 80014aa:	f001 fd6b 	bl	8002f84 <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	LL_SPI_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f835 	bl	8001520 <LL_SPI_SendByte>
	LL_SPI_SendByte(packetLength >> 8);				//Packet length MSB
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	121b      	asrs	r3, r3, #8
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f82f 	bl	8001520 <LL_SPI_SendByte>
	LL_SPI_SendByte(channelNumber);					//Channel number
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 f82b 	bl	8001520 <LL_SPI_SendByte>
	LL_SPI_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <sendPacket+0x98>)
 80014ce:	5cd2      	ldrb	r2, [r2, r3]
 80014d0:	1c51      	adds	r1, r2, #1
 80014d2:	b2c8      	uxtb	r0, r1
 80014d4:	4910      	ldr	r1, [pc, #64]	; (8001518 <sendPacket+0x98>)
 80014d6:	54c8      	strb	r0, [r1, r3]
 80014d8:	4610      	mov	r0, r2
 80014da:	f000 f821 	bl	8001520 <LL_SPI_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e008      	b.n	80014f6 <sendPacket+0x76>
	{
		LL_SPI_SendByte(shtpData[i]);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <sendPacket+0x9c>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f818 	bl	8001520 <LL_SPI_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3301      	adds	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3f2      	bcc.n	80014e4 <sendPacket+0x64>
	}

	BNO_DESELECT;
 80014fe:	2201      	movs	r2, #1
 8001500:	2110      	movs	r1, #16
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <sendPacket+0x94>)
 8001504:	f001 fd3e 	bl	8002f84 <HAL_GPIO_WritePin>


	return 1;
 8001508:	2301      	movs	r3, #1
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40020400 	.word	0x40020400
 8001518:	200000a0 	.word	0x200000a0
 800151c:	20000154 	.word	0x20000154

08001520 <LL_SPI_SendByte>:

/*
 * SPI Send/Receive Byte
 * */
uint8_t LL_SPI_SendByte(uint8_t data)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO_SPI_CHANNEL)==RESET);
 800152a:	bf00      	nop
 800152c:	4810      	ldr	r0, [pc, #64]	; (8001570 <LL_SPI_SendByte+0x50>)
 800152e:	f7ff fb88 	bl	8000c42 <LL_SPI_IsActiveFlag_TXE>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f9      	beq.n	800152c <LL_SPI_SendByte+0xc>
	LL_SPI_TransmitData8(BNO_SPI_CHANNEL, data);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4619      	mov	r1, r3
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <LL_SPI_SendByte+0x50>)
 800153e:	f7ff fbb3 	bl	8000ca8 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_BSY(BNO_SPI_CHANNEL) == SET);
 8001542:	bf00      	nop
 8001544:	480a      	ldr	r0, [pc, #40]	; (8001570 <LL_SPI_SendByte+0x50>)
 8001546:	f7ff fb8f 	bl	8000c68 <LL_SPI_IsActiveFlag_BSY>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d0f9      	beq.n	8001544 <LL_SPI_SendByte+0x24>

	while(LL_SPI_IsActiveFlag_RXNE(BNO_SPI_CHANNEL)==RESET);
 8001550:	bf00      	nop
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <LL_SPI_SendByte+0x50>)
 8001554:	f7ff fb62 	bl	8000c1c <LL_SPI_IsActiveFlag_RXNE>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f9      	beq.n	8001552 <LL_SPI_SendByte+0x32>
	return LL_SPI_ReceiveData8(BNO_SPI_CHANNEL);
 800155e:	4804      	ldr	r0, [pc, #16]	; (8001570 <LL_SPI_SendByte+0x50>)
 8001560:	f7ff fb95 	bl	8000c8e <LL_SPI_ReceiveData8>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40003c00 	.word	0x40003c00

08001574 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BNO_INT_PIN_F){
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001584:	d127      	bne.n	80015d6 <HAL_GPIO_EXTI_Callback+0x62>
		receivePacket_IT();
 8001586:	f7ff fefb 	bl	8001380 <receivePacket_IT>
		q[0] = bno080_getQuatI();
 800158a:	f7ff fde9 	bl	8001160 <bno080_getQuatI>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001594:	edc3 7a00 	vstr	s15, [r3]
		q[1] = bno080_getQuatJ();
 8001598:	f7ff fdf8 	bl	800118c <bno080_getQuatJ>
 800159c:	eef0 7a40 	vmov.f32	s15, s0
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80015a2:	edc3 7a01 	vstr	s15, [r3, #4]
		q[2] = bno080_getQuatK();
 80015a6:	f7ff fe07 	bl	80011b8 <bno080_getQuatK>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80015b0:	edc3 7a02 	vstr	s15, [r3, #8]
		q[3] = bno080_getQuatReal();
 80015b4:	f7ff fe16 	bl	80011e4 <bno080_getQuatReal>
 80015b8:	eef0 7a40 	vmov.f32	s15, s0
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80015be:	edc3 7a03 	vstr	s15, [r3, #12]
		quatRadianAccuracy = bno080_getQuatRadianAccuracy();
 80015c2:	f7ff fe25 	bl	8001210 <bno080_getQuatRadianAccuracy>
 80015c6:	eef0 7a40 	vmov.f32	s15, s0
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x70>)
 80015cc:	edc3 7a00 	vstr	s15, [r3]
		Quaternion_Update(&q[0]);
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80015d2:	f7ff f985 	bl	80008e0 <Quaternion_Update>
	}
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000004 	.word	0x20000004
 80015e4:	2000010c 	.word	0x2000010c

080015e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_DMA_Init+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <MX_DMA_Init+0x88>)
 80015f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_DMA_Init+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_DMA_Init+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <MX_DMA_Init+0x88>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_DMA_Init+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200d      	movs	r0, #13
 800162c:	f000 ffa9 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001630:	200d      	movs	r0, #13
 8001632:	f000 ffc2 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	200f      	movs	r0, #15
 800163c:	f000 ffa1 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001640:	200f      	movs	r0, #15
 8001642:	f000 ffba 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2038      	movs	r0, #56	; 0x38
 800164c:	f000 ff99 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001650:	2038      	movs	r0, #56	; 0x38
 8001652:	f000 ffb2 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	203b      	movs	r0, #59	; 0x3b
 800165c:	f000 ff91 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001660:	203b      	movs	r0, #59	; 0x3b
 8001662:	f000 ffaa 	bl	80025ba <HAL_NVIC_EnableIRQ>

}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <_ZN5CGNSSC1Ev>:


class CGNSS
{
  public:
    CGNSS(){}
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_ZN8CSensorsC1Ev>:
};

class CSensors
{
public:
      CSensors() {}
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ffed 	bl	8001674 <_ZN5CGNSSC1Ev>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_Z41__static_initialization_and_destruction_0ii>:
{
	mshort x;
	x.b[1] = b[1];
	x.b[0] = b[0];
	return(x.i);
}
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d102      	bne.n	80016c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
CSensors gnss_sensor;
 80016be:	4803      	ldr	r0, [pc, #12]	; (80016cc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80016c0:	f7ff ffe3 	bl	800168a <_ZN8CSensorsC1Ev>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200000b4 	.word	0x200000b4

080016d0 <_GLOBAL__sub_I_rxString>:
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff ffe3 	bl	80016a4 <_Z41__static_initialization_and_destruction_0ii>
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a60      	ldr	r2, [pc, #384]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a59      	ldr	r2, [pc, #356]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <MX_GPIO_Init+0x1d8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 800176c:	4853      	ldr	r0, [pc, #332]	; (80018bc <MX_GPIO_Init+0x1dc>)
 800176e:	f001 fc09 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RPI_INT_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001778:	4851      	ldr	r0, [pc, #324]	; (80018c0 <MX_GPIO_Init+0x1e0>)
 800177a:	f001 fc03 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	484f      	ldr	r0, [pc, #316]	; (80018c0 <MX_GPIO_Init+0x1e0>)
 8001784:	f001 fbfe 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178e:	484d      	ldr	r0, [pc, #308]	; (80018c4 <MX_GPIO_Init+0x1e4>)
 8001790:	f001 fbf8 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179a:	484a      	ldr	r0, [pc, #296]	; (80018c4 <MX_GPIO_Init+0x1e4>)
 800179c:	f001 fbf2 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_CS_Pin|BNO_RST_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2130      	movs	r1, #48	; 0x30
 80017a4:	4845      	ldr	r0, [pc, #276]	; (80018bc <MX_GPIO_Init+0x1dc>)
 80017a6:	f001 fbed 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 80017aa:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	483e      	ldr	r0, [pc, #248]	; (80018bc <MX_GPIO_Init+0x1dc>)
 80017c4:	f001 fa2c 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4836      	ldr	r0, [pc, #216]	; (80018bc <MX_GPIO_Init+0x1dc>)
 80017e2:	f001 fa1d 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPI_INT_Pin;
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RPI_INT_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4830      	ldr	r0, [pc, #192]	; (80018c0 <MX_GPIO_Init+0x1e0>)
 80017fe:	f001 fa0f 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4829      	ldr	r0, [pc, #164]	; (80018c0 <MX_GPIO_Init+0x1e0>)
 800181a:	f001 fa01 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800181e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4822      	ldr	r0, [pc, #136]	; (80018c0 <MX_GPIO_Init+0x1e0>)
 8001838:	f001 f9f2 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800183c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	481b      	ldr	r0, [pc, #108]	; (80018c4 <MX_GPIO_Init+0x1e4>)
 8001856:	f001 f9e3 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4814      	ldr	r0, [pc, #80]	; (80018c4 <MX_GPIO_Init+0x1e4>)
 8001874:	f001 f9d4 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_GPIO_Init+0x1e8>)
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_GPIO_Init+0x1e0>)
 800188e:	f001 f9c7 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BNO_CS_Pin|BNO_RST_Pin;
 8001892:	2330      	movs	r3, #48	; 0x30
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_GPIO_Init+0x1dc>)
 80018aa:	f001 f9b9 	bl	8002c20 <HAL_GPIO_Init>

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	10110000 	.word	0x10110000

080018cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_I2C1_Init+0x50>)
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <MX_I2C1_Init+0x54>)
 80018d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_I2C1_Init+0x50>)
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_I2C1_Init+0x58>)
 80018da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_I2C1_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_I2C1_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_I2C1_Init+0x50>)
 80018ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <MX_I2C1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_I2C1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <MX_I2C1_Init+0x50>)
 800190a:	f001 fb6d 	bl	8002fe8 <HAL_I2C_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001914:	f000 f8e8 	bl	8001ae8 <Error_Handler>
  }

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200001e4 	.word	0x200001e4
 8001920:	40005400 	.word	0x40005400
 8001924:	000186a0 	.word	0x000186a0

08001928 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_I2C_MspInit+0x84>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12b      	bne.n	80019a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_I2C_MspInit+0x88>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_I2C_MspInit+0x88>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_I2C_MspInit+0x88>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001966:	23c0      	movs	r3, #192	; 0xc0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196e:	2301      	movs	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001976:	2304      	movs	r3, #4
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <HAL_I2C_MspInit+0x8c>)
 8001982:	f001 f94d 	bl	8002c20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_I2C_MspInit+0x88>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <HAL_I2C_MspInit+0x88>)
 8001990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_I2C_MspInit+0x88>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40005400 	.word	0x40005400
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020400 	.word	0x40020400

080019b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019bc:	f000 fc50 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c0:	f000 f81c 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c4:	f7ff fe8c 	bl	80016e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c8:	f7ff fe0e 	bl	80015e8 <MX_DMA_Init>
  MX_SPI3_Init();
 80019cc:	f000 f972 	bl	8001cb4 <MX_SPI3_Init>
  MX_UART4_Init();
 80019d0:	f000 fb44 	bl	800205c <MX_UART4_Init>
  MX_I2C1_Init();
 80019d4:	f7ff ff7a 	bl	80018cc <MX_I2C1_Init>
  MX_SPI2_Init();
 80019d8:	f000 f902 	bl	8001be0 <MX_SPI2_Init>
  MX_SPI1_Init();
 80019dc:	f000 f8ce 	bl	8001b7c <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80019e0:	f000 f876 	bl	8001ad0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  bno080_Initialization();  // READ sensor in external interrupt  - void EXTI9_5_IRQHandler(void)
 80019e4:	f7ff f972 	bl	8000ccc <bno080_Initialization>
  bno080_enableRotationVector(19000); //enable rotation vector at 200Hz
 80019e8:	f644 2038 	movw	r0, #19000	; 0x4a38
 80019ec:	f7ff f9f9 	bl	8000de2 <bno080_enableRotationVector>
  HAL_Delay(20);
 80019f0:	2014      	movs	r0, #20
 80019f2:	f000 fca7 	bl	8002344 <HAL_Delay>
  bno080_start_IT();
 80019f6:	f7ff f9bf 	bl	8000d78 <bno080_start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <main+0x42>

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	; 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	2230      	movs	r2, #48	; 0x30
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 ff98 	bl	8005940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <SystemClock_Config+0xcc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <SystemClock_Config+0xcc>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <SystemClock_Config+0xcc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <SystemClock_Config+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a21      	ldr	r2, [pc, #132]	; (8001acc <SystemClock_Config+0xd0>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <SystemClock_Config+0xd0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a70:	23a8      	movs	r3, #168	; 0xa8
 8001a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 fbe9 	bl	8003258 <HAL_RCC_OscConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a8c:	f000 f82c 	bl	8001ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a90:	230f      	movs	r3, #15
 8001a92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a94:	2302      	movs	r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2105      	movs	r1, #5
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fe42 	bl	8003738 <HAL_RCC_ClockConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aba:	f000 f815 	bl	8001ae8 <Error_Handler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3750      	adds	r7, #80	; 0x50
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000

08001ad0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2028      	movs	r0, #40	; 0x28
 8001ada:	f000 fd52 	bl	8002582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ade:	2028      	movs	r0, #40	; 0x28
 8001ae0:	f000 fd6b 	bl	80025ba <HAL_NVIC_EnableIRQ>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_SPI_SetStandard>:
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 0210 	bic.w	r2, r3, #16
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	605a      	str	r2, [r3, #4]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40023800 	.word	0x40023800

08001b4c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40023800 	.word	0x40023800

08001b7c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <MX_SPI1_Init+0x60>)
 8001b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bc4:	f001 ff84 	bl	8003ad0 <HAL_SPI_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8001bce:	f7ff ff8b 	bl	8001ae8 <Error_Handler>
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000238 	.word	0x20000238
 8001bdc:	40013000 	.word	0x40013000

08001be0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b090      	sub	sp, #64	; 0x40
 8001be4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	2228      	movs	r2, #40	; 0x28
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fea6 	bl	8005940 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001c04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c08:	f7ff ffa0 	bl	8001b4c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001c0c:	2004      	movs	r0, #4
 8001c0e:	f7ff ff85 	bl	8001b1c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c12:	2002      	movs	r0, #2
 8001c14:	f7ff ff82 	bl	8001b1c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001c18:	230c      	movs	r3, #12
 8001c1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	481c      	ldr	r0, [pc, #112]	; (8001ca8 <MX_SPI2_Init+0xc8>)
 8001c36:	f002 fd9c 	bl	8004772 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c40:	2302      	movs	r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001c50:	2305      	movs	r3, #5
 8001c52:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	463b      	mov	r3, r7
 8001c56:	4619      	mov	r1, r3
 8001c58:	4814      	ldr	r0, [pc, #80]	; (8001cac <MX_SPI2_Init+0xcc>)
 8001c5a:	f002 fd8a 	bl	8004772 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001c62:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c66:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001c7a:	2318      	movs	r3, #24
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001c86:	230a      	movs	r3, #10
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001c8a:	f107 0318 	add.w	r3, r7, #24
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_SPI2_Init+0xd0>)
 8001c92:	f002 fe04 	bl	800489e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001c96:	2100      	movs	r1, #0
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_SPI2_Init+0xd0>)
 8001c9a:	f7ff ff2c 	bl	8001af6 <LL_SPI_SetStandard>

}
 8001c9e:	bf00      	nop
 8001ca0:	3740      	adds	r7, #64	; 0x40
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40003800 	.word	0x40003800

08001cb4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b090      	sub	sp, #64	; 0x40
 8001cb8:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	2228      	movs	r2, #40	; 0x28
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fe3c 	bl	8005940 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	463b      	mov	r3, r7
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001cd8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cdc:	f7ff ff36 	bl	8001b4c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ce0:	2004      	movs	r0, #4
 8001ce2:	f7ff ff1b 	bl	8001b1c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7ff ff18 	bl	8001b1c <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  PB3   ------> SPI3_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001cec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cf0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001d02:	2306      	movs	r3, #6
 8001d04:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	463b      	mov	r3, r7
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481c      	ldr	r0, [pc, #112]	; (8001d7c <MX_SPI3_Init+0xc8>)
 8001d0c:	f002 fd31 	bl	8004772 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001d10:	2308      	movs	r3, #8
 8001d12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d14:	2302      	movs	r3, #2
 8001d16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001d24:	2306      	movs	r3, #6
 8001d26:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4814      	ldr	r0, [pc, #80]	; (8001d80 <MX_SPI3_Init+0xcc>)
 8001d2e:	f002 fd20 	bl	8004772 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001d36:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d3a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001d40:	2302      	movs	r3, #2
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8001d4e:	2318      	movs	r3, #24
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001d5e:	f107 0318 	add.w	r3, r7, #24
 8001d62:	4619      	mov	r1, r3
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_SPI3_Init+0xd0>)
 8001d66:	f002 fd9a 	bl	800489e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_SPI3_Init+0xd0>)
 8001d6e:	f7ff fec2 	bl	8001af6 <LL_SPI_SetStandard>

}
 8001d72:	bf00      	nop
 8001d74:	3740      	adds	r7, #64	; 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40003c00 	.word	0x40003c00

08001d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a53      	ldr	r2, [pc, #332]	; (8001ef4 <HAL_SPI_MspInit+0x16c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f040 80a0 	bne.w	8001eec <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <HAL_SPI_MspInit+0x170>)
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_SPI_MspInit+0x170>)
 8001db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dba:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbc:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <HAL_SPI_MspInit+0x170>)
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <HAL_SPI_MspInit+0x170>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_SPI_MspInit+0x170>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd8:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_SPI_MspInit+0x170>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001de4:	2310      	movs	r3, #16
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df4:	2305      	movs	r3, #5
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	483f      	ldr	r0, [pc, #252]	; (8001efc <HAL_SPI_MspInit+0x174>)
 8001e00:	f000 ff0e 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e04:	23e0      	movs	r3, #224	; 0xe0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e14:	2305      	movs	r3, #5
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4837      	ldr	r0, [pc, #220]	; (8001efc <HAL_SPI_MspInit+0x174>)
 8001e20:	f000 fefe 	bl	8002c20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e26:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <HAL_SPI_MspInit+0x17c>)
 8001e28:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e2c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e30:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e44:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e64:	4826      	ldr	r0, [pc, #152]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e66:	f000 fbd1 	bl	800260c <HAL_DMA_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8001e70:	f7ff fe3a 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e78:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <HAL_SPI_MspInit+0x178>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_SPI_MspInit+0x184>)
 8001e84:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001e88:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e8c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ec0:	4811      	ldr	r0, [pc, #68]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001ec2:	f000 fba3 	bl	800260c <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001ecc:	f7ff fe0c 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001ed4:	649a      	str	r2, [r3, #72]	; 0x48
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_SPI_MspInit+0x180>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2023      	movs	r0, #35	; 0x23
 8001ee2:	f000 fb4e 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ee6:	2023      	movs	r0, #35	; 0x23
 8001ee8:	f000 fb67 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	20000290 	.word	0x20000290
 8001f04:	40026410 	.word	0x40026410
 8001f08:	200002f0 	.word	0x200002f0
 8001f0c:	40026458 	.word	0x40026458

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f000 f9a6 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <DMA1_Stream2_IRQHandler+0x10>)
 8001fc2:	f000 fbf3 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000350 	.word	0x20000350

08001fd0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA1_Stream4_IRQHandler+0x10>)
 8001fd6:	f000 fbe9 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200003f0 	.word	0x200003f0

08001fe4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <SPI1_IRQHandler+0x10>)
 8001fea:	f001 fdd5 	bl	8003b98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000238 	.word	0x20000238

08001ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ffc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002000:	f000 ffda 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <DMA2_Stream0_IRQHandler+0x10>)
 800200e:	f000 fbcd 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000290 	.word	0x20000290

0800201c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <DMA2_Stream3_IRQHandler+0x10>)
 8002022:	f000 fbc3 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200002f0 	.word	0x200002f0

08002030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <SystemInit+0x28>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <SystemInit+0x28>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SystemInit+0x28>)
 8002046:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204a:	609a      	str	r2, [r3, #8]
#endif
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_UART4_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <MX_UART4_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <MX_UART4_Init+0x4c>)
 8002068:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800206c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_UART4_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_UART4_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_UART4_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_UART4_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_UART4_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_UART4_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_UART4_Init+0x4c>)
 8002094:	f001 fe9e 	bl	8003dd4 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800209e:	f7ff fd23 	bl	8001ae8 <Error_Handler>
  }

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200003b0 	.word	0x200003b0
 80020ac:	40004c00 	.word	0x40004c00

080020b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <HAL_UART_MspInit+0x140>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	f040 808a 	bne.w	80021e8 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_UART_MspInit+0x144>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4a45      	ldr	r2, [pc, #276]	; (80021f4 <HAL_UART_MspInit+0x144>)
 80020de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020e2:	6413      	str	r3, [r2, #64]	; 0x40
 80020e4:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_UART_MspInit+0x144>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_UART_MspInit+0x144>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a3e      	ldr	r2, [pc, #248]	; (80021f4 <HAL_UART_MspInit+0x144>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <HAL_UART_MspInit+0x144>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800210c:	2303      	movs	r3, #3
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002114:	2301      	movs	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800211c:	2308      	movs	r3, #8
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	4834      	ldr	r0, [pc, #208]	; (80021f8 <HAL_UART_MspInit+0x148>)
 8002128:	f000 fd7a 	bl	8002c20 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_UART_MspInit+0x14c>)
 800212e:	4a34      	ldr	r2, [pc, #208]	; (8002200 <HAL_UART_MspInit+0x150>)
 8002130:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002134:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002138:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_UART_MspInit+0x14c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800214c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002150:	2200      	movs	r2, #0
 8002152:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800215a:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_UART_MspInit+0x14c>)
 800215c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002160:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_UART_MspInit+0x14c>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800216e:	4823      	ldr	r0, [pc, #140]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002170:	f000 fa4c 	bl	800260c <HAL_DMA_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800217a:	f7ff fcb5 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002182:	635a      	str	r2, [r3, #52]	; 0x34
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_UART_MspInit+0x14c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_UART_MspInit+0x154>)
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_UART_MspInit+0x158>)
 800218e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_UART_MspInit+0x154>)
 8002192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002196:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_UART_MspInit+0x154>)
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021aa:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021be:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021ce:	f000 fa1d 	bl	800260c <HAL_DMA_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80021d8:	f7ff fc86 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_UART_MspInit+0x154>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40004c00 	.word	0x40004c00
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	20000350 	.word	0x20000350
 8002200:	40026040 	.word	0x40026040
 8002204:	200003f0 	.word	0x200003f0
 8002208:	40026070 	.word	0x40026070

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002212:	e003      	b.n	800221c <LoopCopyDataInit>

08002214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800221a:	3104      	adds	r1, #4

0800221c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800221c:	480b      	ldr	r0, [pc, #44]	; (800224c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002224:	d3f6      	bcc.n	8002214 <CopyDataInit>
  ldr  r2, =_sbss
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002228:	e002      	b.n	8002230 <LoopFillZerobss>

0800222a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800222a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800222c:	f842 3b04 	str.w	r3, [r2], #4

08002230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002234:	d3f9      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002236:	f7ff fefb 	bl	8002030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f003 fb5d 	bl	80058f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7ff fbbb 	bl	80019b8 <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002248:	080059e8 	.word	0x080059e8
  ldr  r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002250:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8002254:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8002258:	20000454 	.word	0x20000454

0800225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_Init+0x40>)
 800226a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_Init+0x40>)
 8002276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_Init+0x40>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002288:	2003      	movs	r0, #3
 800228a:	f000 f96f 	bl	800256c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228e:	2000      	movs	r0, #0
 8002290:	f000 f808 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002294:	f7ff fe3c 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023c00 	.word	0x40023c00

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_InitTick+0x54>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x58>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f995 	bl	80025f2 <HAL_SYSTICK_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00e      	b.n	80022f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d80a      	bhi.n	80022ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f000 f94f 	bl	8002582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_InitTick+0x5c>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000014 	.word	0x20000014
 80022fc:	2000001c 	.word	0x2000001c
 8002300:	20000018 	.word	0x20000018

08002304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x20>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_IncTick+0x24>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	2000001c 	.word	0x2000001c
 8002328:	20000450 	.word	0x20000450

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000450 	.word	0x20000450

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_Delay+0x40>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236a:	bf00      	nop
 800236c:	f7ff ffde 	bl	800232c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000001c 	.word	0x2000001c

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db10      	blt.n	800245c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4909      	ldr	r1, [pc, #36]	; (8002468 <__NVIC_DisableIRQ+0x40>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	3320      	adds	r3, #32
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002454:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002458:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	; (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf28      	it	cs
 80024de:	2304      	movcs	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <NVIC_EncodePriority+0x30>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	e000      	b.n	80024f2 <NVIC_EncodePriority+0x32>
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43d9      	mvns	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	4313      	orrs	r3, r2
         );
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d301      	bcc.n	800253e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253a:	2301      	movs	r3, #1
 800253c:	e00f      	b.n	800255e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <SysTick_Config+0x40>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002546:	210f      	movs	r1, #15
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f7ff ff8e 	bl	800246c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SysTick_Config+0x40>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SysTick_Config+0x40>)
 8002558:	2207      	movs	r2, #7
 800255a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000e010 	.word	0xe000e010

0800256c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff07 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002594:	f7ff ff1c 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7ff ff8e 	bl	80024c0 <NVIC_EncodePriority>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5d 	bl	800246c <__NVIC_SetPriority>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff0f 	bl	80023ec <__NVIC_EnableIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff1f 	bl	8002428 <__NVIC_DisableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ff94 	bl	8002528 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff fe88 	bl	800232c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e099      	b.n	800275c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002648:	e00f      	b.n	800266a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264a:	f7ff fe6f 	bl	800232c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b05      	cmp	r3, #5
 8002656:	d908      	bls.n	800266a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e078      	b.n	800275c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e8      	bne.n	800264a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_DMA_Init+0x158>)
 8002684:	4013      	ands	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d107      	bne.n	80026d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4313      	orrs	r3, r2
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0307 	bic.w	r3, r3, #7
 80026ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d117      	bne.n	800272e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fa0b 	bl	8002b2c <DMA_CheckFifoParam>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800272a:	2301      	movs	r3, #1
 800272c:	e016      	b.n	800275c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f9c2 	bl	8002ac0 <DMA_CalcBaseAndBitshift>
 800273c:	4603      	mov	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	223f      	movs	r2, #63	; 0x3f
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	f010803f 	.word	0xf010803f

08002768 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d004      	beq.n	8002786 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00c      	b.n	80027a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2205      	movs	r2, #5
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_DMA_IRQHandler+0x258>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a92      	ldr	r2, [pc, #584]	; (8002a08 <HAL_DMA_IRQHandler+0x25c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2208      	movs	r2, #8
 80027d8:	409a      	lsls	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01a      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2208      	movs	r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2201      	movs	r2, #1
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2204      	movs	r2, #4
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2204      	movs	r2, #4
 8002872:	409a      	lsls	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2210      	movs	r2, #16
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d043      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d03c      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2210      	movs	r2, #16
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d024      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e01f      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e016      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0208 	bic.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2220      	movs	r2, #32
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 808e 	beq.w	8002a4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8086 	beq.w	8002a4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2220      	movs	r2, #32
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b05      	cmp	r3, #5
 8002954:	d136      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0216 	bic.w	r2, r2, #22
 8002964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_DMA_IRQHandler+0x1da>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	223f      	movs	r2, #63	; 0x3f
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d07d      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
        }
        return;
 80029c2:	e078      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01c      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d030      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e02b      	b.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d027      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e022      	b.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
 8002a04:	20000014 	.word	0x20000014
 8002a08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0210 	bic.w	r2, r2, #16
 8002a28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d032      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d307      	bcc.n	8002a92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f2      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x2ca>
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ab6:	bf00      	nop
    }
  }
}
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop

08002ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3b10      	subs	r3, #16
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <DMA_CalcBaseAndBitshift+0x64>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ada:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <DMA_CalcBaseAndBitshift+0x68>)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d909      	bls.n	8002b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	1d1a      	adds	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	659a      	str	r2, [r3, #88]	; 0x58
 8002b00:	e007      	b.n	8002b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	aaaaaaab 	.word	0xaaaaaaab
 8002b28:	08005980 	.word	0x08005980

08002b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11f      	bne.n	8002b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d855      	bhi.n	8002bf8 <DMA_CheckFifoParam+0xcc>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <DMA_CheckFifoParam+0x28>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b77 	.word	0x08002b77
 8002b5c:	08002b65 	.word	0x08002b65
 8002b60:	08002bf9 	.word	0x08002bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d045      	beq.n	8002bfc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e042      	b.n	8002bfc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b7e:	d13f      	bne.n	8002c00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b84:	e03c      	b.n	8002c00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8e:	d121      	bne.n	8002bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d836      	bhi.n	8002c04 <DMA_CheckFifoParam+0xd8>
 8002b96:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <DMA_CheckFifoParam+0x70>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bb3 	.word	0x08002bb3
 8002ba4:	08002bad 	.word	0x08002bad
 8002ba8:	08002bc5 	.word	0x08002bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb0:	e02f      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d024      	beq.n	8002c08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc2:	e021      	b.n	8002c08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bcc:	d11e      	bne.n	8002c0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bd2:	e01b      	b.n	8002c0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d902      	bls.n	8002be0 <DMA_CheckFifoParam+0xb4>
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d003      	beq.n	8002be6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bde:	e018      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e015      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00e      	beq.n	8002c10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf6:	e00b      	b.n	8002c10 <DMA_CheckFifoParam+0xe4>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e00a      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002bfc:	bf00      	nop
 8002bfe:	e008      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c00:	bf00      	nop
 8002c02:	e006      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c04:	bf00      	nop
 8002c06:	e004      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <DMA_CheckFifoParam+0xe6>
      break;
 8002c10:	bf00      	nop
    }
  } 
  
  return status; 
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e16b      	b.n	8002f14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 815a 	bne.w	8002f0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d00b      	beq.n	8002c7a <HAL_GPIO_Init+0x5a>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6e:	2b11      	cmp	r3, #17
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b12      	cmp	r3, #18
 8002c78:	d130      	bne.n	8002cdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 0201 	and.w	r2, r3, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0xfc>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80b4 	beq.w	8002f0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <HAL_GPIO_Init+0x308>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <HAL_GPIO_Init+0x308>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <HAL_GPIO_Init+0x308>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc2:	4a5a      	ldr	r2, [pc, #360]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a51      	ldr	r2, [pc, #324]	; (8002f30 <HAL_GPIO_Init+0x310>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02b      	beq.n	8002e46 <HAL_GPIO_Init+0x226>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a50      	ldr	r2, [pc, #320]	; (8002f34 <HAL_GPIO_Init+0x314>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d025      	beq.n	8002e42 <HAL_GPIO_Init+0x222>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4f      	ldr	r2, [pc, #316]	; (8002f38 <HAL_GPIO_Init+0x318>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01f      	beq.n	8002e3e <HAL_GPIO_Init+0x21e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4e      	ldr	r2, [pc, #312]	; (8002f3c <HAL_GPIO_Init+0x31c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d019      	beq.n	8002e3a <HAL_GPIO_Init+0x21a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4d      	ldr	r2, [pc, #308]	; (8002f40 <HAL_GPIO_Init+0x320>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_GPIO_Init+0x216>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4c      	ldr	r2, [pc, #304]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00d      	beq.n	8002e32 <HAL_GPIO_Init+0x212>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_GPIO_Init+0x328>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <HAL_GPIO_Init+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4a      	ldr	r2, [pc, #296]	; (8002f4c <HAL_GPIO_Init+0x32c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_GPIO_Init+0x20a>
 8002e26:	2307      	movs	r3, #7
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e58:	4934      	ldr	r1, [pc, #208]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e66:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8a:	4a31      	ldr	r2, [pc, #196]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e90:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb4:	4a26      	ldr	r2, [pc, #152]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eba:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ede:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f08:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae90 	bls.w	8002c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3724      	adds	r7, #36	; 0x24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40020800 	.word	0x40020800
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40021400 	.word	0x40021400
 8002f48:	40021800 	.word	0x40021800
 8002f4c:	40021c00 	.word	0x40021c00
 8002f50:	40013c00 	.word	0x40013c00

08002f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	e001      	b.n	8002f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa0:	e003      	b.n	8002faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe facc 	bl	8001574 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40013c00 	.word	0x40013c00

08002fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e11f      	b.n	800323a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fc8a 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800304c:	f000 fd18 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a7b      	ldr	r2, [pc, #492]	; (8003244 <HAL_I2C_Init+0x25c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d807      	bhi.n	800306c <HAL_I2C_Init+0x84>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a7a      	ldr	r2, [pc, #488]	; (8003248 <HAL_I2C_Init+0x260>)
 8003060:	4293      	cmp	r3, r2
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e006      	b.n	800307a <HAL_I2C_Init+0x92>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a77      	ldr	r2, [pc, #476]	; (800324c <HAL_I2C_Init+0x264>)
 8003070:	4293      	cmp	r3, r2
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0db      	b.n	800323a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a72      	ldr	r2, [pc, #456]	; (8003250 <HAL_I2C_Init+0x268>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0c9b      	lsrs	r3, r3, #18
 800308c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a64      	ldr	r2, [pc, #400]	; (8003244 <HAL_I2C_Init+0x25c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d802      	bhi.n	80030bc <HAL_I2C_Init+0xd4>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3301      	adds	r3, #1
 80030ba:	e009      	b.n	80030d0 <HAL_I2C_Init+0xe8>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	4a63      	ldr	r2, [pc, #396]	; (8003254 <HAL_I2C_Init+0x26c>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	3301      	adds	r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4956      	ldr	r1, [pc, #344]	; (8003244 <HAL_I2C_Init+0x25c>)
 80030ec:	428b      	cmp	r3, r1
 80030ee:	d80d      	bhi.n	800310c <HAL_I2C_Init+0x124>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e59      	subs	r1, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	bf38      	it	cc
 8003108:	2304      	movcc	r3, #4
 800310a:	e04f      	b.n	80031ac <HAL_I2C_Init+0x1c4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_I2C_Init+0x150>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e012      	b.n	800315e <HAL_I2C_Init+0x176>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x17e>
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_I2C_Init+0x1c4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_I2C_Init+0x1a4>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e58      	subs	r0, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	440b      	add	r3, r1
 800317c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Init+0x1c4>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6911      	ldr	r1, [r2, #16]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	000186a0 	.word	0x000186a0
 8003248:	001e847f 	.word	0x001e847f
 800324c:	003d08ff 	.word	0x003d08ff
 8003250:	431bde83 	.word	0x431bde83
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e25b      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d075      	beq.n	8003362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003276:	4ba3      	ldr	r3, [pc, #652]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4ba0      	ldr	r3, [pc, #640]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b9d      	ldr	r3, [pc, #628]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b99      	ldr	r3, [pc, #612]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e236      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x74>
 80032be:	4b91      	ldr	r3, [pc, #580]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a90      	ldr	r2, [pc, #576]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a8a      	ldr	r2, [pc, #552]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a87      	ldr	r2, [pc, #540]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032f0:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a83      	ldr	r2, [pc, #524]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b81      	ldr	r3, [pc, #516]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff f80c 	bl	800232c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f808 	bl	800232c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1fb      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xc0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fff8 	bl	800232c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fff4 	bl	800232c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1e7      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336e:	4b65      	ldr	r3, [pc, #404]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b62      	ldr	r3, [pc, #392]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b5f      	ldr	r3, [pc, #380]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b5c      	ldr	r3, [pc, #368]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1bb      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b56      	ldr	r3, [pc, #344]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4952      	ldr	r1, [pc, #328]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <HAL_RCC_OscConfig+0x2b0>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe ffad 	bl	800232c <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe ffa9 	bl	800232c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e19c      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4940      	ldr	r1, [pc, #256]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_OscConfig+0x2b0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe ff8c 	bl	800232c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe ff88 	bl	800232c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e17b      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d030      	beq.n	80034a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b30      	ldr	r3, [pc, #192]	; (800350c <HAL_RCC_OscConfig+0x2b4>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe ff6c 	bl	800232c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe ff68 	bl	800232c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e15b      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x200>
 8003476:	e015      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCC_OscConfig+0x2b4>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe ff55 	bl	800232c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe ff51 	bl	800232c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e144      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a0 	beq.w	80035f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_OscConfig+0x2b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d121      	bne.n	8003532 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_RCC_OscConfig+0x2b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <HAL_RCC_OscConfig+0x2b8>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fe ff17 	bl	800232c <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e011      	b.n	8003526 <HAL_RCC_OscConfig+0x2ce>
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
 8003510:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003514:	f7fe ff0a 	bl	800232c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0fd      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b81      	ldr	r3, [pc, #516]	; (800372c <HAL_RCC_OscConfig+0x4d4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d106      	bne.n	8003548 <HAL_RCC_OscConfig+0x2f0>
 800353a:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4a7c      	ldr	r2, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6713      	str	r3, [r2, #112]	; 0x70
 8003546:	e01c      	b.n	8003582 <HAL_RCC_OscConfig+0x32a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d10c      	bne.n	800356a <HAL_RCC_OscConfig+0x312>
 8003550:	4b77      	ldr	r3, [pc, #476]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4a76      	ldr	r2, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	6713      	str	r3, [r2, #112]	; 0x70
 800355c:	4b74      	ldr	r3, [pc, #464]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a73      	ldr	r2, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	e00b      	b.n	8003582 <HAL_RCC_OscConfig+0x32a>
 800356a:	4b71      	ldr	r3, [pc, #452]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a70      	ldr	r2, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	4b6e      	ldr	r3, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a6d      	ldr	r2, [pc, #436]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d015      	beq.n	80035b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fe fecf 	bl	800232c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe fecb 	bl	800232c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e0bc      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ee      	beq.n	8003592 <HAL_RCC_OscConfig+0x33a>
 80035b4:	e014      	b.n	80035e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe feb9 	bl	800232c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe feb5 	bl	800232c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0a6      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d4:	4b56      	ldr	r3, [pc, #344]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ee      	bne.n	80035be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d105      	bne.n	80035f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e6:	4b52      	ldr	r3, [pc, #328]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a51      	ldr	r2, [pc, #324]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80035ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8092 	beq.w	8003720 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d05c      	beq.n	80036c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d141      	bne.n	8003694 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_RCC_OscConfig+0x4dc>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fe fe89 	bl	800232c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe fe85 	bl	800232c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e078      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003630:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	019b      	lsls	r3, r3, #6
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	3b01      	subs	r3, #1
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	061b      	lsls	r3, r3, #24
 8003660:	4933      	ldr	r1, [pc, #204]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_RCC_OscConfig+0x4dc>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fe5e 	bl	800232c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fe5a 	bl	800232c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04d      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x41c>
 8003692:	e045      	b.n	8003720 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_OscConfig+0x4dc>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fe fe47 	bl	800232c <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fe fe43 	bl	800232c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e036      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f0      	bne.n	80036a2 <HAL_RCC_OscConfig+0x44a>
 80036c0:	e02e      	b.n	8003720 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e029      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d11c      	bne.n	800371c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d115      	bne.n	800371c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036f6:	4013      	ands	r3, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10d      	bne.n	800371c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40007000 	.word	0x40007000
 8003730:	40023800 	.word	0x40023800
 8003734:	42470060 	.word	0x42470060

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0cc      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b68      	ldr	r3, [pc, #416]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d90c      	bls.n	8003774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b8      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494d      	ldr	r1, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d044      	beq.n	8003858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d119      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e067      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4934      	ldr	r1, [pc, #208]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	4313      	orrs	r3, r2
 8003826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fe fd80 	bl	800232c <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe fd7c 	bl	800232c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e04f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d20c      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e032      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4916      	ldr	r1, [pc, #88]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490e      	ldr	r1, [pc, #56]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038be:	f000 f821 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038c2:	4601      	mov	r1, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	fa21 f303 	lsr.w	r3, r1, r3
 80038d6:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fce0 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00
 80038f4:	40023800 	.word	0x40023800
 80038f8:	08005968 	.word	0x08005968
 80038fc:	20000014 	.word	0x20000014
 8003900:	20000018 	.word	0x20000018

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391a:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d007      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x32>
 8003926:	2b08      	cmp	r3, #8
 8003928:	d008      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x38>
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 808d 	bne.w	8003a4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003932:	60bb      	str	r3, [r7, #8]
       break;
 8003934:	e08c      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003936:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x160>)
 8003938:	60bb      	str	r3, [r7, #8]
      break;
 800393a:	e089      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800393c:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003946:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d023      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003952:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	f04f 0400 	mov.w	r4, #0
 800395c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	ea03 0501 	and.w	r5, r3, r1
 8003968:	ea04 0602 	and.w	r6, r4, r2
 800396c:	4a3d      	ldr	r2, [pc, #244]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800396e:	fb02 f106 	mul.w	r1, r2, r6
 8003972:	2200      	movs	r2, #0
 8003974:	fb02 f205 	mul.w	r2, r2, r5
 8003978:	440a      	add	r2, r1
 800397a:	493a      	ldr	r1, [pc, #232]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800397c:	fba5 0101 	umull	r0, r1, r5, r1
 8003980:	1853      	adds	r3, r2, r1
 8003982:	4619      	mov	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f04f 0400 	mov.w	r4, #0
 800398a:	461a      	mov	r2, r3
 800398c:	4623      	mov	r3, r4
 800398e:	f7fc fe27 	bl	80005e0 <__aeabi_uldivmod>
 8003992:	4603      	mov	r3, r0
 8003994:	460c      	mov	r4, r1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e049      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	ea03 0501 	and.w	r5, r3, r1
 80039b0:	ea04 0602 	and.w	r6, r4, r2
 80039b4:	4629      	mov	r1, r5
 80039b6:	4632      	mov	r2, r6
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	f04f 0400 	mov.w	r4, #0
 80039c0:	0154      	lsls	r4, r2, #5
 80039c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039c6:	014b      	lsls	r3, r1, #5
 80039c8:	4619      	mov	r1, r3
 80039ca:	4622      	mov	r2, r4
 80039cc:	1b49      	subs	r1, r1, r5
 80039ce:	eb62 0206 	sbc.w	r2, r2, r6
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	f04f 0400 	mov.w	r4, #0
 80039da:	0194      	lsls	r4, r2, #6
 80039dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039e0:	018b      	lsls	r3, r1, #6
 80039e2:	1a5b      	subs	r3, r3, r1
 80039e4:	eb64 0402 	sbc.w	r4, r4, r2
 80039e8:	f04f 0100 	mov.w	r1, #0
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	00e2      	lsls	r2, r4, #3
 80039f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f6:	00d9      	lsls	r1, r3, #3
 80039f8:	460b      	mov	r3, r1
 80039fa:	4614      	mov	r4, r2
 80039fc:	195b      	adds	r3, r3, r5
 80039fe:	eb44 0406 	adc.w	r4, r4, r6
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	02a2      	lsls	r2, r4, #10
 8003a0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a10:	0299      	lsls	r1, r3, #10
 8003a12:	460b      	mov	r3, r1
 8003a14:	4614      	mov	r4, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	4621      	mov	r1, r4
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	f7fc fddc 	bl	80005e0 <__aeabi_uldivmod>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	60bb      	str	r3, [r7, #8]
      break;
 8003a48:	e002      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a4c:	60bb      	str	r3, [r7, #8]
      break;
 8003a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a50:	68bb      	ldr	r3, [r7, #8]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	00b71b00 	.word	0x00b71b00

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000014 	.word	0x20000014

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a84:	f7ff fff0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0a9b      	lsrs	r3, r3, #10
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08005978 	.word	0x08005978

08003aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aac:	f7ff ffdc 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0b5b      	lsrs	r3, r3, #13
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08005978 	.word	0x08005978

08003ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e056      	b.n	8003b90 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fe f943 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	ea42 0103 	orr.w	r1, r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	f003 0104 	and.w	r1, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
    return;
 8003bda:	e0d8      	b.n	8003d8e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_SPI_IRQHandler+0x66>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	09db      	lsrs	r3, r3, #7
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
    return;
 8003bfc:	e0c7      	b.n	8003d8e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_SPI_IRQHandler+0x8c>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80b5 	beq.w	8003d8e <HAL_SPI_IRQHandler+0x1f6>
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80ae 	beq.w	8003d8e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d023      	beq.n	8003c86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d011      	beq.n	8003c6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f043 0204 	orr.w	r2, r3, #4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	e00b      	b.n	8003c86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]
        return;
 8003c84:	e083      	b.n	8003d8e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d014      	beq.n	8003cbc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00c      	beq.n	8003ce2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f043 0208 	orr.w	r2, r3, #8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d050      	beq.n	8003d8c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cf8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_SPI_IRQHandler+0x17e>
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d034      	beq.n	8003d80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0203 	bic.w	r2, r2, #3
 8003d24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d011      	beq.n	8003d52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d32:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <HAL_SPI_IRQHandler+0x1fc>)
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fd14 	bl	8002768 <HAL_DMA_Abort_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5e:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <HAL_SPI_IRQHandler+0x1fc>)
 8003d60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fcfe 	bl	8002768 <HAL_DMA_Abort_IT>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d7e:	e003      	b.n	8003d88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f809 	bl	8003d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d86:	e000      	b.n	8003d8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d88:	bf00      	nop
    return;
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
  }
}
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	08003dad 	.word	0x08003dad

08003d98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff ffe6 	bl	8003d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03f      	b.n	8003e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe f958 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f829 	bl	8003e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eb2:	f023 030c 	bic.w	r3, r3, #12
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ede:	f040 818b 	bne.w	80041f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4ac1      	ldr	r2, [pc, #772]	; (80041ec <UART_SetConfig+0x37c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d005      	beq.n	8003ef8 <UART_SetConfig+0x88>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4abf      	ldr	r2, [pc, #764]	; (80041f0 <UART_SetConfig+0x380>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f040 80bd 	bne.w	8004072 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7ff fdd6 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	461d      	mov	r5, r3
 8003f02:	f04f 0600 	mov.w	r6, #0
 8003f06:	46a8      	mov	r8, r5
 8003f08:	46b1      	mov	r9, r6
 8003f0a:	eb18 0308 	adds.w	r3, r8, r8
 8003f0e:	eb49 0409 	adc.w	r4, r9, r9
 8003f12:	4698      	mov	r8, r3
 8003f14:	46a1      	mov	r9, r4
 8003f16:	eb18 0805 	adds.w	r8, r8, r5
 8003f1a:	eb49 0906 	adc.w	r9, r9, r6
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f32:	4688      	mov	r8, r1
 8003f34:	4691      	mov	r9, r2
 8003f36:	eb18 0005 	adds.w	r0, r8, r5
 8003f3a:	eb49 0106 	adc.w	r1, r9, r6
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	461d      	mov	r5, r3
 8003f44:	f04f 0600 	mov.w	r6, #0
 8003f48:	196b      	adds	r3, r5, r5
 8003f4a:	eb46 0406 	adc.w	r4, r6, r6
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4623      	mov	r3, r4
 8003f52:	f7fc fb45 	bl	80005e0 <__aeabi_uldivmod>
 8003f56:	4603      	mov	r3, r0
 8003f58:	460c      	mov	r4, r1
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4ba5      	ldr	r3, [pc, #660]	; (80041f4 <UART_SetConfig+0x384>)
 8003f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	461d      	mov	r5, r3
 8003f6c:	f04f 0600 	mov.w	r6, #0
 8003f70:	46a9      	mov	r9, r5
 8003f72:	46b2      	mov	sl, r6
 8003f74:	eb19 0309 	adds.w	r3, r9, r9
 8003f78:	eb4a 040a 	adc.w	r4, sl, sl
 8003f7c:	4699      	mov	r9, r3
 8003f7e:	46a2      	mov	sl, r4
 8003f80:	eb19 0905 	adds.w	r9, r9, r5
 8003f84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f9c:	4689      	mov	r9, r1
 8003f9e:	4692      	mov	sl, r2
 8003fa0:	eb19 0005 	adds.w	r0, r9, r5
 8003fa4:	eb4a 0106 	adc.w	r1, sl, r6
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	461d      	mov	r5, r3
 8003fae:	f04f 0600 	mov.w	r6, #0
 8003fb2:	196b      	adds	r3, r5, r5
 8003fb4:	eb46 0406 	adc.w	r4, r6, r6
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	f7fc fb10 	bl	80005e0 <__aeabi_uldivmod>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4b8b      	ldr	r3, [pc, #556]	; (80041f4 <UART_SetConfig+0x384>)
 8003fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2164      	movs	r1, #100	; 0x64
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	3332      	adds	r3, #50	; 0x32
 8003fda:	4a86      	ldr	r2, [pc, #536]	; (80041f4 <UART_SetConfig+0x384>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fe8:	4498      	add	r8, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	461d      	mov	r5, r3
 8003fee:	f04f 0600 	mov.w	r6, #0
 8003ff2:	46a9      	mov	r9, r5
 8003ff4:	46b2      	mov	sl, r6
 8003ff6:	eb19 0309 	adds.w	r3, r9, r9
 8003ffa:	eb4a 040a 	adc.w	r4, sl, sl
 8003ffe:	4699      	mov	r9, r3
 8004000:	46a2      	mov	sl, r4
 8004002:	eb19 0905 	adds.w	r9, r9, r5
 8004006:	eb4a 0a06 	adc.w	sl, sl, r6
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004016:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800401a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800401e:	4689      	mov	r9, r1
 8004020:	4692      	mov	sl, r2
 8004022:	eb19 0005 	adds.w	r0, r9, r5
 8004026:	eb4a 0106 	adc.w	r1, sl, r6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	461d      	mov	r5, r3
 8004030:	f04f 0600 	mov.w	r6, #0
 8004034:	196b      	adds	r3, r5, r5
 8004036:	eb46 0406 	adc.w	r4, r6, r6
 800403a:	461a      	mov	r2, r3
 800403c:	4623      	mov	r3, r4
 800403e:	f7fc facf 	bl	80005e0 <__aeabi_uldivmod>
 8004042:	4603      	mov	r3, r0
 8004044:	460c      	mov	r4, r1
 8004046:	461a      	mov	r2, r3
 8004048:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <UART_SetConfig+0x384>)
 800404a:	fba3 1302 	umull	r1, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2164      	movs	r1, #100	; 0x64
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	3332      	adds	r3, #50	; 0x32
 800405c:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <UART_SetConfig+0x384>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	f003 0207 	and.w	r2, r3, #7
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4442      	add	r2, r8
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	e26f      	b.n	8004552 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004072:	f7ff fd05 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8004076:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	461d      	mov	r5, r3
 800407c:	f04f 0600 	mov.w	r6, #0
 8004080:	46a8      	mov	r8, r5
 8004082:	46b1      	mov	r9, r6
 8004084:	eb18 0308 	adds.w	r3, r8, r8
 8004088:	eb49 0409 	adc.w	r4, r9, r9
 800408c:	4698      	mov	r8, r3
 800408e:	46a1      	mov	r9, r4
 8004090:	eb18 0805 	adds.w	r8, r8, r5
 8004094:	eb49 0906 	adc.w	r9, r9, r6
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ac:	4688      	mov	r8, r1
 80040ae:	4691      	mov	r9, r2
 80040b0:	eb18 0005 	adds.w	r0, r8, r5
 80040b4:	eb49 0106 	adc.w	r1, r9, r6
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	461d      	mov	r5, r3
 80040be:	f04f 0600 	mov.w	r6, #0
 80040c2:	196b      	adds	r3, r5, r5
 80040c4:	eb46 0406 	adc.w	r4, r6, r6
 80040c8:	461a      	mov	r2, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	f7fc fa88 	bl	80005e0 <__aeabi_uldivmod>
 80040d0:	4603      	mov	r3, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <UART_SetConfig+0x384>)
 80040d8:	fba3 2302 	umull	r2, r3, r3, r2
 80040dc:	095b      	lsrs	r3, r3, #5
 80040de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	461d      	mov	r5, r3
 80040e6:	f04f 0600 	mov.w	r6, #0
 80040ea:	46a9      	mov	r9, r5
 80040ec:	46b2      	mov	sl, r6
 80040ee:	eb19 0309 	adds.w	r3, r9, r9
 80040f2:	eb4a 040a 	adc.w	r4, sl, sl
 80040f6:	4699      	mov	r9, r3
 80040f8:	46a2      	mov	sl, r4
 80040fa:	eb19 0905 	adds.w	r9, r9, r5
 80040fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800410e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004112:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004116:	4689      	mov	r9, r1
 8004118:	4692      	mov	sl, r2
 800411a:	eb19 0005 	adds.w	r0, r9, r5
 800411e:	eb4a 0106 	adc.w	r1, sl, r6
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	461d      	mov	r5, r3
 8004128:	f04f 0600 	mov.w	r6, #0
 800412c:	196b      	adds	r3, r5, r5
 800412e:	eb46 0406 	adc.w	r4, r6, r6
 8004132:	461a      	mov	r2, r3
 8004134:	4623      	mov	r3, r4
 8004136:	f7fc fa53 	bl	80005e0 <__aeabi_uldivmod>
 800413a:	4603      	mov	r3, r0
 800413c:	460c      	mov	r4, r1
 800413e:	461a      	mov	r2, r3
 8004140:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <UART_SetConfig+0x384>)
 8004142:	fba3 1302 	umull	r1, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2164      	movs	r1, #100	; 0x64
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	3332      	adds	r3, #50	; 0x32
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <UART_SetConfig+0x384>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004162:	4498      	add	r8, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	461d      	mov	r5, r3
 8004168:	f04f 0600 	mov.w	r6, #0
 800416c:	46a9      	mov	r9, r5
 800416e:	46b2      	mov	sl, r6
 8004170:	eb19 0309 	adds.w	r3, r9, r9
 8004174:	eb4a 040a 	adc.w	r4, sl, sl
 8004178:	4699      	mov	r9, r3
 800417a:	46a2      	mov	sl, r4
 800417c:	eb19 0905 	adds.w	r9, r9, r5
 8004180:	eb4a 0a06 	adc.w	sl, sl, r6
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004198:	4689      	mov	r9, r1
 800419a:	4692      	mov	sl, r2
 800419c:	eb19 0005 	adds.w	r0, r9, r5
 80041a0:	eb4a 0106 	adc.w	r1, sl, r6
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	461d      	mov	r5, r3
 80041aa:	f04f 0600 	mov.w	r6, #0
 80041ae:	196b      	adds	r3, r5, r5
 80041b0:	eb46 0406 	adc.w	r4, r6, r6
 80041b4:	461a      	mov	r2, r3
 80041b6:	4623      	mov	r3, r4
 80041b8:	f7fc fa12 	bl	80005e0 <__aeabi_uldivmod>
 80041bc:	4603      	mov	r3, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <UART_SetConfig+0x384>)
 80041c4:	fba3 1302 	umull	r1, r3, r3, r2
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	2164      	movs	r1, #100	; 0x64
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	3332      	adds	r3, #50	; 0x32
 80041d6:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <UART_SetConfig+0x384>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	f003 0207 	and.w	r2, r3, #7
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4442      	add	r2, r8
 80041e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041ea:	e1b2      	b.n	8004552 <UART_SetConfig+0x6e2>
 80041ec:	40011000 	.word	0x40011000
 80041f0:	40011400 	.word	0x40011400
 80041f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4ad7      	ldr	r2, [pc, #860]	; (800455c <UART_SetConfig+0x6ec>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d005      	beq.n	800420e <UART_SetConfig+0x39e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4ad6      	ldr	r2, [pc, #856]	; (8004560 <UART_SetConfig+0x6f0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	f040 80d1 	bne.w	80043b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800420e:	f7ff fc4b 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8004212:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	469a      	mov	sl, r3
 8004218:	f04f 0b00 	mov.w	fp, #0
 800421c:	46d0      	mov	r8, sl
 800421e:	46d9      	mov	r9, fp
 8004220:	eb18 0308 	adds.w	r3, r8, r8
 8004224:	eb49 0409 	adc.w	r4, r9, r9
 8004228:	4698      	mov	r8, r3
 800422a:	46a1      	mov	r9, r4
 800422c:	eb18 080a 	adds.w	r8, r8, sl
 8004230:	eb49 090b 	adc.w	r9, r9, fp
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004240:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004244:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004248:	4688      	mov	r8, r1
 800424a:	4691      	mov	r9, r2
 800424c:	eb1a 0508 	adds.w	r5, sl, r8
 8004250:	eb4b 0609 	adc.w	r6, fp, r9
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4619      	mov	r1, r3
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	f04f 0400 	mov.w	r4, #0
 8004266:	0094      	lsls	r4, r2, #2
 8004268:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800426c:	008b      	lsls	r3, r1, #2
 800426e:	461a      	mov	r2, r3
 8004270:	4623      	mov	r3, r4
 8004272:	4628      	mov	r0, r5
 8004274:	4631      	mov	r1, r6
 8004276:	f7fc f9b3 	bl	80005e0 <__aeabi_uldivmod>
 800427a:	4603      	mov	r3, r0
 800427c:	460c      	mov	r4, r1
 800427e:	461a      	mov	r2, r3
 8004280:	4bb8      	ldr	r3, [pc, #736]	; (8004564 <UART_SetConfig+0x6f4>)
 8004282:	fba3 2302 	umull	r2, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	469b      	mov	fp, r3
 8004290:	f04f 0c00 	mov.w	ip, #0
 8004294:	46d9      	mov	r9, fp
 8004296:	46e2      	mov	sl, ip
 8004298:	eb19 0309 	adds.w	r3, r9, r9
 800429c:	eb4a 040a 	adc.w	r4, sl, sl
 80042a0:	4699      	mov	r9, r3
 80042a2:	46a2      	mov	sl, r4
 80042a4:	eb19 090b 	adds.w	r9, r9, fp
 80042a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042c0:	4689      	mov	r9, r1
 80042c2:	4692      	mov	sl, r2
 80042c4:	eb1b 0509 	adds.w	r5, fp, r9
 80042c8:	eb4c 060a 	adc.w	r6, ip, sl
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4619      	mov	r1, r3
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	f04f 0400 	mov.w	r4, #0
 80042de:	0094      	lsls	r4, r2, #2
 80042e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042e4:	008b      	lsls	r3, r1, #2
 80042e6:	461a      	mov	r2, r3
 80042e8:	4623      	mov	r3, r4
 80042ea:	4628      	mov	r0, r5
 80042ec:	4631      	mov	r1, r6
 80042ee:	f7fc f977 	bl	80005e0 <__aeabi_uldivmod>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b9a      	ldr	r3, [pc, #616]	; (8004564 <UART_SetConfig+0x6f4>)
 80042fa:	fba3 1302 	umull	r1, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2164      	movs	r1, #100	; 0x64
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	3332      	adds	r3, #50	; 0x32
 800430c:	4a95      	ldr	r2, [pc, #596]	; (8004564 <UART_SetConfig+0x6f4>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004318:	4498      	add	r8, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	469b      	mov	fp, r3
 800431e:	f04f 0c00 	mov.w	ip, #0
 8004322:	46d9      	mov	r9, fp
 8004324:	46e2      	mov	sl, ip
 8004326:	eb19 0309 	adds.w	r3, r9, r9
 800432a:	eb4a 040a 	adc.w	r4, sl, sl
 800432e:	4699      	mov	r9, r3
 8004330:	46a2      	mov	sl, r4
 8004332:	eb19 090b 	adds.w	r9, r9, fp
 8004336:	eb4a 0a0c 	adc.w	sl, sl, ip
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004346:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800434a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800434e:	4689      	mov	r9, r1
 8004350:	4692      	mov	sl, r2
 8004352:	eb1b 0509 	adds.w	r5, fp, r9
 8004356:	eb4c 060a 	adc.w	r6, ip, sl
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4619      	mov	r1, r3
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	f04f 0400 	mov.w	r4, #0
 800436c:	0094      	lsls	r4, r2, #2
 800436e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004372:	008b      	lsls	r3, r1, #2
 8004374:	461a      	mov	r2, r3
 8004376:	4623      	mov	r3, r4
 8004378:	4628      	mov	r0, r5
 800437a:	4631      	mov	r1, r6
 800437c:	f7fc f930 	bl	80005e0 <__aeabi_uldivmod>
 8004380:	4603      	mov	r3, r0
 8004382:	460c      	mov	r4, r1
 8004384:	461a      	mov	r2, r3
 8004386:	4b77      	ldr	r3, [pc, #476]	; (8004564 <UART_SetConfig+0x6f4>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	; 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a72      	ldr	r2, [pc, #456]	; (8004564 <UART_SetConfig+0x6f4>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4442      	add	r2, r8
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	e0d0      	b.n	8004552 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7ff fb66 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 80043b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	469a      	mov	sl, r3
 80043ba:	f04f 0b00 	mov.w	fp, #0
 80043be:	46d0      	mov	r8, sl
 80043c0:	46d9      	mov	r9, fp
 80043c2:	eb18 0308 	adds.w	r3, r8, r8
 80043c6:	eb49 0409 	adc.w	r4, r9, r9
 80043ca:	4698      	mov	r8, r3
 80043cc:	46a1      	mov	r9, r4
 80043ce:	eb18 080a 	adds.w	r8, r8, sl
 80043d2:	eb49 090b 	adc.w	r9, r9, fp
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043ea:	4688      	mov	r8, r1
 80043ec:	4691      	mov	r9, r2
 80043ee:	eb1a 0508 	adds.w	r5, sl, r8
 80043f2:	eb4b 0609 	adc.w	r6, fp, r9
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4619      	mov	r1, r3
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	f04f 0400 	mov.w	r4, #0
 8004408:	0094      	lsls	r4, r2, #2
 800440a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800440e:	008b      	lsls	r3, r1, #2
 8004410:	461a      	mov	r2, r3
 8004412:	4623      	mov	r3, r4
 8004414:	4628      	mov	r0, r5
 8004416:	4631      	mov	r1, r6
 8004418:	f7fc f8e2 	bl	80005e0 <__aeabi_uldivmod>
 800441c:	4603      	mov	r3, r0
 800441e:	460c      	mov	r4, r1
 8004420:	461a      	mov	r2, r3
 8004422:	4b50      	ldr	r3, [pc, #320]	; (8004564 <UART_SetConfig+0x6f4>)
 8004424:	fba3 2302 	umull	r2, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	469b      	mov	fp, r3
 8004432:	f04f 0c00 	mov.w	ip, #0
 8004436:	46d9      	mov	r9, fp
 8004438:	46e2      	mov	sl, ip
 800443a:	eb19 0309 	adds.w	r3, r9, r9
 800443e:	eb4a 040a 	adc.w	r4, sl, sl
 8004442:	4699      	mov	r9, r3
 8004444:	46a2      	mov	sl, r4
 8004446:	eb19 090b 	adds.w	r9, r9, fp
 800444a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004462:	4689      	mov	r9, r1
 8004464:	4692      	mov	sl, r2
 8004466:	eb1b 0509 	adds.w	r5, fp, r9
 800446a:	eb4c 060a 	adc.w	r6, ip, sl
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4619      	mov	r1, r3
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	f04f 0400 	mov.w	r4, #0
 8004480:	0094      	lsls	r4, r2, #2
 8004482:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004486:	008b      	lsls	r3, r1, #2
 8004488:	461a      	mov	r2, r3
 800448a:	4623      	mov	r3, r4
 800448c:	4628      	mov	r0, r5
 800448e:	4631      	mov	r1, r6
 8004490:	f7fc f8a6 	bl	80005e0 <__aeabi_uldivmod>
 8004494:	4603      	mov	r3, r0
 8004496:	460c      	mov	r4, r1
 8004498:	461a      	mov	r2, r3
 800449a:	4b32      	ldr	r3, [pc, #200]	; (8004564 <UART_SetConfig+0x6f4>)
 800449c:	fba3 1302 	umull	r1, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	2164      	movs	r1, #100	; 0x64
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	3332      	adds	r3, #50	; 0x32
 80044ae:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <UART_SetConfig+0x6f4>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ba:	4498      	add	r8, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	469b      	mov	fp, r3
 80044c0:	f04f 0c00 	mov.w	ip, #0
 80044c4:	46d9      	mov	r9, fp
 80044c6:	46e2      	mov	sl, ip
 80044c8:	eb19 0309 	adds.w	r3, r9, r9
 80044cc:	eb4a 040a 	adc.w	r4, sl, sl
 80044d0:	4699      	mov	r9, r3
 80044d2:	46a2      	mov	sl, r4
 80044d4:	eb19 090b 	adds.w	r9, r9, fp
 80044d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044f0:	4689      	mov	r9, r1
 80044f2:	4692      	mov	sl, r2
 80044f4:	eb1b 0509 	adds.w	r5, fp, r9
 80044f8:	eb4c 060a 	adc.w	r6, ip, sl
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4619      	mov	r1, r3
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	f04f 0400 	mov.w	r4, #0
 800450e:	0094      	lsls	r4, r2, #2
 8004510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004514:	008b      	lsls	r3, r1, #2
 8004516:	461a      	mov	r2, r3
 8004518:	4623      	mov	r3, r4
 800451a:	4628      	mov	r0, r5
 800451c:	4631      	mov	r1, r6
 800451e:	f7fc f85f 	bl	80005e0 <__aeabi_uldivmod>
 8004522:	4603      	mov	r3, r0
 8004524:	460c      	mov	r4, r1
 8004526:	461a      	mov	r2, r3
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <UART_SetConfig+0x6f4>)
 800452a:	fba3 1302 	umull	r1, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2164      	movs	r1, #100	; 0x64
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	3332      	adds	r3, #50	; 0x32
 800453c:	4a09      	ldr	r2, [pc, #36]	; (8004564 <UART_SetConfig+0x6f4>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4442      	add	r2, r8
 800454e:	609a      	str	r2, [r3, #8]
}
 8004550:	e7ff      	b.n	8004552 <UART_SetConfig+0x6e2>
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455c:	40011000 	.word	0x40011000
 8004560:	40011400 	.word	0x40011400
 8004564:	51eb851f 	.word	0x51eb851f

08004568 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	2103      	movs	r1, #3
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	401a      	ands	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	61bb      	str	r3, [r7, #24]
  return result;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3724      	adds	r7, #36	; 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	43db      	mvns	r3, r3
 80045da:	401a      	ands	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	605a      	str	r2, [r3, #4]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b089      	sub	sp, #36	; 0x24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	613b      	str	r3, [r7, #16]
  return result;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	fab3 f383 	clz	r3, r3
 8004618:	b2db      	uxtb	r3, r3
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2103      	movs	r1, #3
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	401a      	ands	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	61bb      	str	r3, [r7, #24]
  return result;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	431a      	orrs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004648:	bf00      	nop
 800464a:	3724      	adds	r7, #36	; 0x24
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	613b      	str	r3, [r7, #16]
  return result;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	2103      	movs	r1, #3
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	61bb      	str	r3, [r7, #24]
  return result;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	60da      	str	r2, [r3, #12]
}
 80046a6:	bf00      	nop
 80046a8:	3724      	adds	r7, #36	; 0x24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b089      	sub	sp, #36	; 0x24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	fa93 f3a3 	rbit	r3, r3
 80046cc:	613b      	str	r3, [r7, #16]
  return result;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	210f      	movs	r1, #15
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	401a      	ands	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	61bb      	str	r3, [r7, #24]
  return result;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	431a      	orrs	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004704:	bf00      	nop
 8004706:	3724      	adds	r7, #36	; 0x24
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	613b      	str	r3, [r7, #16]
  return result;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	210f      	movs	r1, #15
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	401a      	ands	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	61bb      	str	r3, [r7, #24]
  return result;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004766:	bf00      	nop
 8004768:	3724      	adds	r7, #36	; 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b088      	sub	sp, #32
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	613b      	str	r3, [r7, #16]
  return result;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800479c:	e050      	b.n	8004840 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	2101      	movs	r1, #1
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d042      	beq.n	800483a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d003      	beq.n	80047c4 <LL_GPIO_Init+0x52>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d10d      	bne.n	80047e0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	461a      	mov	r2, r3
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff12 	bl	80045f6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	461a      	mov	r2, r3
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fef3 	bl	80045c6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	461a      	mov	r2, r3
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff33 	bl	8004654 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d11a      	bne.n	800482c <LL_GPIO_Init+0xba>
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	60bb      	str	r3, [r7, #8]
  return result;
 8004802:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b07      	cmp	r3, #7
 800480c:	d807      	bhi.n	800481e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	461a      	mov	r2, r3
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ff4b 	bl	80046b2 <LL_GPIO_SetAFPin_0_7>
 800481c:	e006      	b.n	800482c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	461a      	mov	r2, r3
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff72 	bl	8004710 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	461a      	mov	r2, r3
 8004832:	69b9      	ldr	r1, [r7, #24]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fe97 	bl	8004568 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1a7      	bne.n	800479e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <LL_SPI_IsEnabled>:
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d101      	bne.n	8004870 <LL_SPI_IsEnabled+0x18>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <LL_SPI_IsEnabled+0x1a>
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <LL_SPI_SetCRCPolynomial>:
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ffd3 	bl	8004858 <LL_SPI_IsEnabled>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d139      	bne.n	800492c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c0:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	6811      	ldr	r1, [r2, #0]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	6852      	ldr	r2, [r2, #4]
 80048cc:	4311      	orrs	r1, r2
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	4311      	orrs	r1, r2
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	68d2      	ldr	r2, [r2, #12]
 80048d8:	4311      	orrs	r1, r2
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	6912      	ldr	r2, [r2, #16]
 80048de:	4311      	orrs	r1, r2
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	6952      	ldr	r2, [r2, #20]
 80048e4:	4311      	orrs	r1, r2
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	6992      	ldr	r2, [r2, #24]
 80048ea:	4311      	orrs	r1, r2
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	69d2      	ldr	r2, [r2, #28]
 80048f0:	4311      	orrs	r1, r2
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	6a12      	ldr	r2, [r2, #32]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f023 0204 	bic.w	r2, r3, #4
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	0c1b      	lsrs	r3, r3, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491a:	d105      	bne.n	8004928 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff ffab 	bl	800487e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	61da      	str	r2, [r3, #28]
  return status;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <asinf>:
 8004944:	b510      	push	{r4, lr}
 8004946:	ed2d 8b02 	vpush	{d8}
 800494a:	4c27      	ldr	r4, [pc, #156]	; (80049e8 <asinf+0xa4>)
 800494c:	b08a      	sub	sp, #40	; 0x28
 800494e:	eeb0 8a40 	vmov.f32	s16, s0
 8004952:	f000 f9b5 	bl	8004cc0 <__ieee754_asinf>
 8004956:	f994 3000 	ldrsb.w	r3, [r4]
 800495a:	3301      	adds	r3, #1
 800495c:	eef0 8a40 	vmov.f32	s17, s0
 8004960:	d03c      	beq.n	80049dc <asinf+0x98>
 8004962:	eeb4 8a48 	vcmp.f32	s16, s16
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	d637      	bvs.n	80049dc <asinf+0x98>
 800496c:	eeb0 0a48 	vmov.f32	s0, s16
 8004970:	f000 fede 	bl	8005730 <fabsf>
 8004974:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004978:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800497c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004980:	dd2c      	ble.n	80049dc <asinf+0x98>
 8004982:	2301      	movs	r3, #1
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	4b19      	ldr	r3, [pc, #100]	; (80049ec <asinf+0xa8>)
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	ee18 0a10 	vmov	r0, s16
 800498e:	2300      	movs	r3, #0
 8004990:	9308      	str	r3, [sp, #32]
 8004992:	f7fb fd7d 	bl	8000490 <__aeabi_f2d>
 8004996:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800499a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800499e:	4814      	ldr	r0, [pc, #80]	; (80049f0 <asinf+0xac>)
 80049a0:	f000 fdea 	bl	8005578 <nan>
 80049a4:	f994 3000 	ldrsb.w	r3, [r4]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	ed8d 0b06 	vstr	d0, [sp, #24]
 80049ae:	d104      	bne.n	80049ba <asinf+0x76>
 80049b0:	f000 ff9c 	bl	80058ec <__errno>
 80049b4:	2321      	movs	r3, #33	; 0x21
 80049b6:	6003      	str	r3, [r0, #0]
 80049b8:	e004      	b.n	80049c4 <asinf+0x80>
 80049ba:	4668      	mov	r0, sp
 80049bc:	f000 fdd9 	bl	8005572 <matherr>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d0f5      	beq.n	80049b0 <asinf+0x6c>
 80049c4:	9b08      	ldr	r3, [sp, #32]
 80049c6:	b11b      	cbz	r3, 80049d0 <asinf+0x8c>
 80049c8:	f000 ff90 	bl	80058ec <__errno>
 80049cc:	9b08      	ldr	r3, [sp, #32]
 80049ce:	6003      	str	r3, [r0, #0]
 80049d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049d4:	f7fb fdb4 	bl	8000540 <__aeabi_d2f>
 80049d8:	ee08 0a90 	vmov	s17, r0
 80049dc:	eeb0 0a68 	vmov.f32	s0, s17
 80049e0:	b00a      	add	sp, #40	; 0x28
 80049e2:	ecbd 8b02 	vpop	{d8}
 80049e6:	bd10      	pop	{r4, pc}
 80049e8:	2000001d 	.word	0x2000001d
 80049ec:	08005988 	.word	0x08005988
 80049f0:	0800598d 	.word	0x0800598d

080049f4 <atan2f>:
 80049f4:	f000 ba4c 	b.w	8004e90 <__ieee754_atan2f>

080049f8 <powf>:
 80049f8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80049fc:	ed2d 8b04 	vpush	{d8-d9}
 8004a00:	4ca7      	ldr	r4, [pc, #668]	; (8004ca0 <powf+0x2a8>)
 8004a02:	b08a      	sub	sp, #40	; 0x28
 8004a04:	eef0 8a40 	vmov.f32	s17, s0
 8004a08:	eeb0 8a60 	vmov.f32	s16, s1
 8004a0c:	f000 faee 	bl	8004fec <__ieee754_powf>
 8004a10:	f994 5000 	ldrsb.w	r5, [r4]
 8004a14:	1c6b      	adds	r3, r5, #1
 8004a16:	eeb0 9a40 	vmov.f32	s18, s0
 8004a1a:	4626      	mov	r6, r4
 8004a1c:	d05f      	beq.n	8004ade <powf+0xe6>
 8004a1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	d65a      	bvs.n	8004ade <powf+0xe6>
 8004a28:	eef4 8a68 	vcmp.f32	s17, s17
 8004a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a30:	d721      	bvc.n	8004a76 <powf+0x7e>
 8004a32:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3a:	d150      	bne.n	8004ade <powf+0xe6>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4b98      	ldr	r3, [pc, #608]	; (8004ca4 <powf+0x2ac>)
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	ee18 0a90 	vmov	r0, s17
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9308      	str	r3, [sp, #32]
 8004a4c:	f7fb fd20 	bl	8000490 <__aeabi_f2d>
 8004a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a54:	ee18 0a10 	vmov	r0, s16
 8004a58:	f7fb fd1a 	bl	8000490 <__aeabi_f2d>
 8004a5c:	4b92      	ldr	r3, [pc, #584]	; (8004ca8 <powf+0x2b0>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2d02      	cmp	r5, #2
 8004a62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a6a:	d032      	beq.n	8004ad2 <powf+0xda>
 8004a6c:	4668      	mov	r0, sp
 8004a6e:	f000 fd80 	bl	8005572 <matherr>
 8004a72:	bb40      	cbnz	r0, 8004ac6 <powf+0xce>
 8004a74:	e065      	b.n	8004b42 <powf+0x14a>
 8004a76:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8004cac <powf+0x2b4>
 8004a7a:	eef4 8a69 	vcmp.f32	s17, s19
 8004a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a82:	d163      	bne.n	8004b4c <powf+0x154>
 8004a84:	eeb4 8a69 	vcmp.f32	s16, s19
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	d12e      	bne.n	8004aec <powf+0xf4>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	4b84      	ldr	r3, [pc, #528]	; (8004ca4 <powf+0x2ac>)
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	ee18 0a90 	vmov	r0, s17
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	9308      	str	r3, [sp, #32]
 8004a9e:	f7fb fcf7 	bl	8000490 <__aeabi_f2d>
 8004aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa6:	ee18 0a10 	vmov	r0, s16
 8004aaa:	f7fb fcf1 	bl	8000490 <__aeabi_f2d>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	d0d6      	beq.n	8004a6c <powf+0x74>
 8004abe:	4b7a      	ldr	r3, [pc, #488]	; (8004ca8 <powf+0x2b0>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ac6:	9b08      	ldr	r3, [sp, #32]
 8004ac8:	b11b      	cbz	r3, 8004ad2 <powf+0xda>
 8004aca:	f000 ff0f 	bl	80058ec <__errno>
 8004ace:	9b08      	ldr	r3, [sp, #32]
 8004ad0:	6003      	str	r3, [r0, #0]
 8004ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ad6:	f7fb fd33 	bl	8000540 <__aeabi_d2f>
 8004ada:	ee09 0a10 	vmov	s18, r0
 8004ade:	eeb0 0a49 	vmov.f32	s0, s18
 8004ae2:	b00a      	add	sp, #40	; 0x28
 8004ae4:	ecbd 8b04 	vpop	{d8-d9}
 8004ae8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004aec:	eeb0 0a48 	vmov.f32	s0, s16
 8004af0:	f000 fe25 	bl	800573e <finitef>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d0f2      	beq.n	8004ade <powf+0xe6>
 8004af8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	d5ed      	bpl.n	8004ade <powf+0xe6>
 8004b02:	2301      	movs	r3, #1
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <powf+0x2ac>)
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	ee18 0a90 	vmov	r0, s17
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9308      	str	r3, [sp, #32]
 8004b12:	f7fb fcbd 	bl	8000490 <__aeabi_f2d>
 8004b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b1a:	ee18 0a10 	vmov	r0, s16
 8004b1e:	f7fb fcb7 	bl	8000490 <__aeabi_f2d>
 8004b22:	f994 3000 	ldrsb.w	r3, [r4]
 8004b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b2a:	b923      	cbnz	r3, 8004b36 <powf+0x13e>
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b34:	e79a      	b.n	8004a6c <powf+0x74>
 8004b36:	495e      	ldr	r1, [pc, #376]	; (8004cb0 <powf+0x2b8>)
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d194      	bne.n	8004a6c <powf+0x74>
 8004b42:	f000 fed3 	bl	80058ec <__errno>
 8004b46:	2321      	movs	r3, #33	; 0x21
 8004b48:	6003      	str	r3, [r0, #0]
 8004b4a:	e7bc      	b.n	8004ac6 <powf+0xce>
 8004b4c:	f000 fdf7 	bl	800573e <finitef>
 8004b50:	4605      	mov	r5, r0
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d173      	bne.n	8004c3e <powf+0x246>
 8004b56:	eeb0 0a68 	vmov.f32	s0, s17
 8004b5a:	f000 fdf0 	bl	800573e <finitef>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d06d      	beq.n	8004c3e <powf+0x246>
 8004b62:	eeb0 0a48 	vmov.f32	s0, s16
 8004b66:	f000 fdea 	bl	800573e <finitef>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d067      	beq.n	8004c3e <powf+0x246>
 8004b6e:	ee18 0a90 	vmov	r0, s17
 8004b72:	f7fb fc8d 	bl	8000490 <__aeabi_f2d>
 8004b76:	4680      	mov	r8, r0
 8004b78:	ee18 0a10 	vmov	r0, s16
 8004b7c:	4689      	mov	r9, r1
 8004b7e:	f7fb fc87 	bl	8000490 <__aeabi_f2d>
 8004b82:	eeb4 9a49 	vcmp.f32	s18, s18
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	f994 4000 	ldrsb.w	r4, [r4]
 8004b8e:	4b45      	ldr	r3, [pc, #276]	; (8004ca4 <powf+0x2ac>)
 8004b90:	d713      	bvc.n	8004bba <powf+0x1c2>
 8004b92:	2201      	movs	r2, #1
 8004b94:	e9cd 2300 	strd	r2, r3, [sp]
 8004b98:	9508      	str	r5, [sp, #32]
 8004b9a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ba2:	2c00      	cmp	r4, #0
 8004ba4:	d0c2      	beq.n	8004b2c <powf+0x134>
 8004ba6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8004baa:	ee17 0a90 	vmov	r0, s15
 8004bae:	f7fb fc6f 	bl	8000490 <__aeabi_f2d>
 8004bb2:	2c02      	cmp	r4, #2
 8004bb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004bb8:	e7c2      	b.n	8004b40 <powf+0x148>
 8004bba:	2203      	movs	r2, #3
 8004bbc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004bc0:	e9cd 2300 	strd	r2, r3, [sp]
 8004bc4:	9508      	str	r5, [sp, #32]
 8004bc6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004bca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bce:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004bd2:	b9fc      	cbnz	r4, 8004c14 <powf+0x21c>
 8004bd4:	4b37      	ldr	r3, [pc, #220]	; (8004cb4 <powf+0x2bc>)
 8004bd6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004bda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004be6:	d553      	bpl.n	8004c90 <powf+0x298>
 8004be8:	eeb0 0a48 	vmov.f32	s0, s16
 8004bec:	f000 fdb8 	bl	8005760 <rintf>
 8004bf0:	eeb4 0a48 	vcmp.f32	s0, s16
 8004bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf8:	d004      	beq.n	8004c04 <powf+0x20c>
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <powf+0x2c0>)
 8004bfc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004c00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c04:	f996 3000 	ldrsb.w	r3, [r6]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d141      	bne.n	8004c90 <powf+0x298>
 8004c0c:	f000 fe6e 	bl	80058ec <__errno>
 8004c10:	2322      	movs	r3, #34	; 0x22
 8004c12:	e799      	b.n	8004b48 <powf+0x150>
 8004c14:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <powf+0x2c4>)
 8004c16:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c24:	d5ee      	bpl.n	8004c04 <powf+0x20c>
 8004c26:	eeb0 0a48 	vmov.f32	s0, s16
 8004c2a:	f000 fd99 	bl	8005760 <rintf>
 8004c2e:	eeb4 0a48 	vcmp.f32	s0, s16
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	d0e5      	beq.n	8004c04 <powf+0x20c>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <powf+0x2b8>)
 8004c3c:	e7e0      	b.n	8004c00 <powf+0x208>
 8004c3e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	f47f af4a 	bne.w	8004ade <powf+0xe6>
 8004c4a:	eeb0 0a68 	vmov.f32	s0, s17
 8004c4e:	f000 fd76 	bl	800573e <finitef>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f43f af43 	beq.w	8004ade <powf+0xe6>
 8004c58:	eeb0 0a48 	vmov.f32	s0, s16
 8004c5c:	f000 fd6f 	bl	800573e <finitef>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f43f af3c 	beq.w	8004ade <powf+0xe6>
 8004c66:	2304      	movs	r3, #4
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <powf+0x2ac>)
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	ee18 0a90 	vmov	r0, s17
 8004c72:	2300      	movs	r3, #0
 8004c74:	9308      	str	r3, [sp, #32]
 8004c76:	f7fb fc0b 	bl	8000490 <__aeabi_f2d>
 8004c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c7e:	ee18 0a10 	vmov	r0, s16
 8004c82:	f7fb fc05 	bl	8000490 <__aeabi_f2d>
 8004c86:	2200      	movs	r2, #0
 8004c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e7b7      	b.n	8004c00 <powf+0x208>
 8004c90:	4668      	mov	r0, sp
 8004c92:	f000 fc6e 	bl	8005572 <matherr>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f47f af15 	bne.w	8004ac6 <powf+0xce>
 8004c9c:	e7b6      	b.n	8004c0c <powf+0x214>
 8004c9e:	bf00      	nop
 8004ca0:	2000001d 	.word	0x2000001d
 8004ca4:	0800598e 	.word	0x0800598e
 8004ca8:	3ff00000 	.word	0x3ff00000
 8004cac:	00000000 	.word	0x00000000
 8004cb0:	fff00000 	.word	0xfff00000
 8004cb4:	47efffff 	.word	0x47efffff
 8004cb8:	c7efffff 	.word	0xc7efffff
 8004cbc:	7ff00000 	.word	0x7ff00000

08004cc0 <__ieee754_asinf>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	ee10 5a10 	vmov	r5, s0
 8004cc6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8004cca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004cce:	ed2d 8b04 	vpush	{d8-d9}
 8004cd2:	d10c      	bne.n	8004cee <__ieee754_asinf+0x2e>
 8004cd4:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8004e50 <__ieee754_asinf+0x190>
 8004cd8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004e54 <__ieee754_asinf+0x194>
 8004cdc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ce0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce8:	ecbd 8b04 	vpop	{d8-d9}
 8004cec:	bd38      	pop	{r3, r4, r5, pc}
 8004cee:	dd04      	ble.n	8004cfa <__ieee754_asinf+0x3a>
 8004cf0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004cf4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004cf8:	e7f6      	b.n	8004ce8 <__ieee754_asinf+0x28>
 8004cfa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8004cfe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004d02:	da0b      	bge.n	8004d1c <__ieee754_asinf+0x5c>
 8004d04:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8004d08:	da52      	bge.n	8004db0 <__ieee754_asinf+0xf0>
 8004d0a:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004e58 <__ieee754_asinf+0x198>
 8004d0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8004d12:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	dce5      	bgt.n	8004ce8 <__ieee754_asinf+0x28>
 8004d1c:	f000 fd08 	bl	8005730 <fabsf>
 8004d20:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8004d24:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8004d28:	ee20 8a08 	vmul.f32	s16, s0, s16
 8004d2c:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8004e5c <__ieee754_asinf+0x19c>
 8004d30:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004e60 <__ieee754_asinf+0x1a0>
 8004d34:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8004e64 <__ieee754_asinf+0x1a4>
 8004d38:	eea8 7a27 	vfma.f32	s14, s16, s15
 8004d3c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8004e68 <__ieee754_asinf+0x1a8>
 8004d40:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004d44:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004e6c <__ieee754_asinf+0x1ac>
 8004d48:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004d4c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8004e70 <__ieee754_asinf+0x1b0>
 8004d50:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004d54:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004e74 <__ieee754_asinf+0x1b4>
 8004d58:	eea7 9a88 	vfma.f32	s18, s15, s16
 8004d5c:	eddf 7a46 	vldr	s15, [pc, #280]	; 8004e78 <__ieee754_asinf+0x1b8>
 8004d60:	eee8 7a07 	vfma.f32	s15, s16, s14
 8004d64:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004e7c <__ieee754_asinf+0x1bc>
 8004d68:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004d6c:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004e80 <__ieee754_asinf+0x1c0>
 8004d70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004d74:	eeb0 0a48 	vmov.f32	s0, s16
 8004d78:	eee7 8a88 	vfma.f32	s17, s15, s16
 8004d7c:	f000 fbf6 	bl	800556c <__ieee754_sqrtf>
 8004d80:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <__ieee754_asinf+0x1c4>)
 8004d82:	ee29 9a08 	vmul.f32	s18, s18, s16
 8004d86:	429c      	cmp	r4, r3
 8004d88:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8004d8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004d90:	dd3d      	ble.n	8004e0e <__ieee754_asinf+0x14e>
 8004d92:	eea0 0a06 	vfma.f32	s0, s0, s12
 8004d96:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8004e88 <__ieee754_asinf+0x1c8>
 8004d9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004d9e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8004e54 <__ieee754_asinf+0x194>
 8004da2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	bfd8      	it	le
 8004daa:	eeb1 0a40 	vnegle.f32	s0, s0
 8004dae:	e79b      	b.n	8004ce8 <__ieee754_asinf+0x28>
 8004db0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8004db4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004e5c <__ieee754_asinf+0x19c>
 8004db8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004e60 <__ieee754_asinf+0x1a0>
 8004dbc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8004e74 <__ieee754_asinf+0x1b4>
 8004dc0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004dc4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8004e68 <__ieee754_asinf+0x1a8>
 8004dc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004dcc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004e6c <__ieee754_asinf+0x1ac>
 8004dd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004dd4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e70 <__ieee754_asinf+0x1b0>
 8004dd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ddc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e64 <__ieee754_asinf+0x1a4>
 8004de0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004de4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004e78 <__ieee754_asinf+0x1b8>
 8004de8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8004dec:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8004e7c <__ieee754_asinf+0x1bc>
 8004df0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8004df4:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004e80 <__ieee754_asinf+0x1c0>
 8004df8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e00:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8004e04:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8004e08:	eea0 0a27 	vfma.f32	s0, s0, s15
 8004e0c:	e76c      	b.n	8004ce8 <__ieee754_asinf+0x28>
 8004e0e:	ee10 3a10 	vmov	r3, s0
 8004e12:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e16:	f023 030f 	bic.w	r3, r3, #15
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef1 6a67 	vneg.f32	s13, s15
 8004e22:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8004e26:	ee70 5a00 	vadd.f32	s11, s0, s0
 8004e2a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004e2e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004e50 <__ieee754_asinf+0x190>
 8004e32:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8004e36:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8004e8c <__ieee754_asinf+0x1cc>
 8004e3a:	eee5 7a47 	vfms.f32	s15, s10, s14
 8004e3e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8004e42:	eeb0 6a40 	vmov.f32	s12, s0
 8004e46:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004e4a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004e4e:	e7a8      	b.n	8004da2 <__ieee754_asinf+0xe2>
 8004e50:	b33bbd2e 	.word	0xb33bbd2e
 8004e54:	3fc90fdb 	.word	0x3fc90fdb
 8004e58:	7149f2ca 	.word	0x7149f2ca
 8004e5c:	3811ef08 	.word	0x3811ef08
 8004e60:	3a4f7f04 	.word	0x3a4f7f04
 8004e64:	3e2aaaab 	.word	0x3e2aaaab
 8004e68:	bd241146 	.word	0xbd241146
 8004e6c:	3e4e0aa8 	.word	0x3e4e0aa8
 8004e70:	bea6b090 	.word	0xbea6b090
 8004e74:	3d9dc62e 	.word	0x3d9dc62e
 8004e78:	bf303361 	.word	0xbf303361
 8004e7c:	4001572d 	.word	0x4001572d
 8004e80:	c019d139 	.word	0xc019d139
 8004e84:	3f799999 	.word	0x3f799999
 8004e88:	333bbd2e 	.word	0x333bbd2e
 8004e8c:	3f490fdb 	.word	0x3f490fdb

08004e90 <__ieee754_atan2f>:
 8004e90:	ee10 2a90 	vmov	r2, s1
 8004e94:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004e98:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	eef0 7a40 	vmov.f32	s15, s0
 8004ea2:	dc06      	bgt.n	8004eb2 <__ieee754_atan2f+0x22>
 8004ea4:	ee10 0a10 	vmov	r0, s0
 8004ea8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004eac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004eb0:	dd04      	ble.n	8004ebc <__ieee754_atan2f+0x2c>
 8004eb2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eba:	bd10      	pop	{r4, pc}
 8004ebc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8004ec0:	d103      	bne.n	8004eca <__ieee754_atan2f+0x3a>
 8004ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec6:	f000 bb5f 	b.w	8005588 <atanf>
 8004eca:	1794      	asrs	r4, r2, #30
 8004ecc:	f004 0402 	and.w	r4, r4, #2
 8004ed0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004ed4:	b943      	cbnz	r3, 8004ee8 <__ieee754_atan2f+0x58>
 8004ed6:	2c02      	cmp	r4, #2
 8004ed8:	d06e      	beq.n	8004fb8 <__ieee754_atan2f+0x128>
 8004eda:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004fc0 <__ieee754_atan2f+0x130>
 8004ede:	2c03      	cmp	r4, #3
 8004ee0:	bf08      	it	eq
 8004ee2:	eef0 7a47 	vmoveq.f32	s15, s14
 8004ee6:	e7e6      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004ee8:	b941      	cbnz	r1, 8004efc <__ieee754_atan2f+0x6c>
 8004eea:	eddf 7a36 	vldr	s15, [pc, #216]	; 8004fc4 <__ieee754_atan2f+0x134>
 8004eee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004fc8 <__ieee754_atan2f+0x138>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	bfb8      	it	lt
 8004ef6:	eef0 7a47 	vmovlt.f32	s15, s14
 8004efa:	e7dc      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004efc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004f00:	d122      	bne.n	8004f48 <__ieee754_atan2f+0xb8>
 8004f02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f06:	d112      	bne.n	8004f2e <__ieee754_atan2f+0x9e>
 8004f08:	2c02      	cmp	r4, #2
 8004f0a:	d00a      	beq.n	8004f22 <__ieee754_atan2f+0x92>
 8004f0c:	2c03      	cmp	r4, #3
 8004f0e:	d00b      	beq.n	8004f28 <__ieee754_atan2f+0x98>
 8004f10:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004fcc <__ieee754_atan2f+0x13c>
 8004f14:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004fd0 <__ieee754_atan2f+0x140>
 8004f18:	2c01      	cmp	r4, #1
 8004f1a:	bf18      	it	ne
 8004f1c:	eef0 7a47 	vmovne.f32	s15, s14
 8004f20:	e7c9      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004f22:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8004fd4 <__ieee754_atan2f+0x144>
 8004f26:	e7c6      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004f28:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004fd8 <__ieee754_atan2f+0x148>
 8004f2c:	e7c3      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004f2e:	2c02      	cmp	r4, #2
 8004f30:	d042      	beq.n	8004fb8 <__ieee754_atan2f+0x128>
 8004f32:	2c03      	cmp	r4, #3
 8004f34:	d005      	beq.n	8004f42 <__ieee754_atan2f+0xb2>
 8004f36:	2c01      	cmp	r4, #1
 8004f38:	eddf 7a28 	vldr	s15, [pc, #160]	; 8004fdc <__ieee754_atan2f+0x14c>
 8004f3c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004fe0 <__ieee754_atan2f+0x150>
 8004f40:	e7eb      	b.n	8004f1a <__ieee754_atan2f+0x8a>
 8004f42:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004fc0 <__ieee754_atan2f+0x130>
 8004f46:	e7b6      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004f48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f4c:	d0cd      	beq.n	8004eea <__ieee754_atan2f+0x5a>
 8004f4e:	1a5b      	subs	r3, r3, r1
 8004f50:	15db      	asrs	r3, r3, #23
 8004f52:	2b3c      	cmp	r3, #60	; 0x3c
 8004f54:	dc1a      	bgt.n	8004f8c <__ieee754_atan2f+0xfc>
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	da01      	bge.n	8004f5e <__ieee754_atan2f+0xce>
 8004f5a:	333c      	adds	r3, #60	; 0x3c
 8004f5c:	db19      	blt.n	8004f92 <__ieee754_atan2f+0x102>
 8004f5e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8004f62:	f000 fbe5 	bl	8005730 <fabsf>
 8004f66:	f000 fb0f 	bl	8005588 <atanf>
 8004f6a:	eef0 7a40 	vmov.f32	s15, s0
 8004f6e:	2c01      	cmp	r4, #1
 8004f70:	d012      	beq.n	8004f98 <__ieee754_atan2f+0x108>
 8004f72:	2c02      	cmp	r4, #2
 8004f74:	d017      	beq.n	8004fa6 <__ieee754_atan2f+0x116>
 8004f76:	2c00      	cmp	r4, #0
 8004f78:	d09d      	beq.n	8004eb6 <__ieee754_atan2f+0x26>
 8004f7a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004fe4 <__ieee754_atan2f+0x154>
 8004f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004fe8 <__ieee754_atan2f+0x158>
 8004f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f8a:	e794      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004f8c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004fc4 <__ieee754_atan2f+0x134>
 8004f90:	e7ed      	b.n	8004f6e <__ieee754_atan2f+0xde>
 8004f92:	eddf 7a13 	vldr	s15, [pc, #76]	; 8004fe0 <__ieee754_atan2f+0x150>
 8004f96:	e7ea      	b.n	8004f6e <__ieee754_atan2f+0xde>
 8004f98:	ee17 3a90 	vmov	r3, s15
 8004f9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	e787      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004fa6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004fe4 <__ieee754_atan2f+0x154>
 8004faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004fe8 <__ieee754_atan2f+0x158>
 8004fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb6:	e77e      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004fb8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004fe8 <__ieee754_atan2f+0x158>
 8004fbc:	e77b      	b.n	8004eb6 <__ieee754_atan2f+0x26>
 8004fbe:	bf00      	nop
 8004fc0:	c0490fdb 	.word	0xc0490fdb
 8004fc4:	3fc90fdb 	.word	0x3fc90fdb
 8004fc8:	bfc90fdb 	.word	0xbfc90fdb
 8004fcc:	bf490fdb 	.word	0xbf490fdb
 8004fd0:	3f490fdb 	.word	0x3f490fdb
 8004fd4:	4016cbe4 	.word	0x4016cbe4
 8004fd8:	c016cbe4 	.word	0xc016cbe4
 8004fdc:	80000000 	.word	0x80000000
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	33bbbd2e 	.word	0x33bbbd2e
 8004fe8:	40490fdb 	.word	0x40490fdb

08004fec <__ieee754_powf>:
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff0:	ee10 5a90 	vmov	r5, s1
 8004ff4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004ff8:	ed2d 8b02 	vpush	{d8}
 8004ffc:	eeb0 8a40 	vmov.f32	s16, s0
 8005000:	eef0 8a60 	vmov.f32	s17, s1
 8005004:	f000 8293 	beq.w	800552e <__ieee754_powf+0x542>
 8005008:	ee10 8a10 	vmov	r8, s0
 800500c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8005010:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005014:	dc06      	bgt.n	8005024 <__ieee754_powf+0x38>
 8005016:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800501a:	dd0a      	ble.n	8005032 <__ieee754_powf+0x46>
 800501c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005020:	f000 8285 	beq.w	800552e <__ieee754_powf+0x542>
 8005024:	ecbd 8b02 	vpop	{d8}
 8005028:	48d9      	ldr	r0, [pc, #868]	; (8005390 <__ieee754_powf+0x3a4>)
 800502a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800502e:	f000 bb91 	b.w	8005754 <nanf>
 8005032:	f1b8 0f00 	cmp.w	r8, #0
 8005036:	da1d      	bge.n	8005074 <__ieee754_powf+0x88>
 8005038:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800503c:	da2c      	bge.n	8005098 <__ieee754_powf+0xac>
 800503e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005042:	db30      	blt.n	80050a6 <__ieee754_powf+0xba>
 8005044:	15fb      	asrs	r3, r7, #23
 8005046:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800504a:	fa47 f603 	asr.w	r6, r7, r3
 800504e:	fa06 f303 	lsl.w	r3, r6, r3
 8005052:	42bb      	cmp	r3, r7
 8005054:	d127      	bne.n	80050a6 <__ieee754_powf+0xba>
 8005056:	f006 0601 	and.w	r6, r6, #1
 800505a:	f1c6 0602 	rsb	r6, r6, #2
 800505e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005062:	d122      	bne.n	80050aa <__ieee754_powf+0xbe>
 8005064:	2d00      	cmp	r5, #0
 8005066:	f280 8268 	bge.w	800553a <__ieee754_powf+0x54e>
 800506a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800506e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005072:	e00d      	b.n	8005090 <__ieee754_powf+0xa4>
 8005074:	2600      	movs	r6, #0
 8005076:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800507a:	d1f0      	bne.n	800505e <__ieee754_powf+0x72>
 800507c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005080:	f000 8255 	beq.w	800552e <__ieee754_powf+0x542>
 8005084:	dd0a      	ble.n	800509c <__ieee754_powf+0xb0>
 8005086:	2d00      	cmp	r5, #0
 8005088:	f280 8254 	bge.w	8005534 <__ieee754_powf+0x548>
 800508c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8005394 <__ieee754_powf+0x3a8>
 8005090:	ecbd 8b02 	vpop	{d8}
 8005094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005098:	2602      	movs	r6, #2
 800509a:	e7ec      	b.n	8005076 <__ieee754_powf+0x8a>
 800509c:	2d00      	cmp	r5, #0
 800509e:	daf5      	bge.n	800508c <__ieee754_powf+0xa0>
 80050a0:	eeb1 0a68 	vneg.f32	s0, s17
 80050a4:	e7f4      	b.n	8005090 <__ieee754_powf+0xa4>
 80050a6:	2600      	movs	r6, #0
 80050a8:	e7d9      	b.n	800505e <__ieee754_powf+0x72>
 80050aa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80050ae:	d102      	bne.n	80050b6 <__ieee754_powf+0xca>
 80050b0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80050b4:	e7ec      	b.n	8005090 <__ieee754_powf+0xa4>
 80050b6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80050ba:	eeb0 0a48 	vmov.f32	s0, s16
 80050be:	d108      	bne.n	80050d2 <__ieee754_powf+0xe6>
 80050c0:	f1b8 0f00 	cmp.w	r8, #0
 80050c4:	db05      	blt.n	80050d2 <__ieee754_powf+0xe6>
 80050c6:	ecbd 8b02 	vpop	{d8}
 80050ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ce:	f000 ba4d 	b.w	800556c <__ieee754_sqrtf>
 80050d2:	f000 fb2d 	bl	8005730 <fabsf>
 80050d6:	b124      	cbz	r4, 80050e2 <__ieee754_powf+0xf6>
 80050d8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80050dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80050e0:	d117      	bne.n	8005112 <__ieee754_powf+0x126>
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	bfbc      	itt	lt
 80050e6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80050ea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80050ee:	f1b8 0f00 	cmp.w	r8, #0
 80050f2:	dacd      	bge.n	8005090 <__ieee754_powf+0xa4>
 80050f4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80050f8:	ea54 0306 	orrs.w	r3, r4, r6
 80050fc:	d104      	bne.n	8005108 <__ieee754_powf+0x11c>
 80050fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005102:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005106:	e7c3      	b.n	8005090 <__ieee754_powf+0xa4>
 8005108:	2e01      	cmp	r6, #1
 800510a:	d1c1      	bne.n	8005090 <__ieee754_powf+0xa4>
 800510c:	eeb1 0a40 	vneg.f32	s0, s0
 8005110:	e7be      	b.n	8005090 <__ieee754_powf+0xa4>
 8005112:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8005116:	3801      	subs	r0, #1
 8005118:	ea56 0300 	orrs.w	r3, r6, r0
 800511c:	d104      	bne.n	8005128 <__ieee754_powf+0x13c>
 800511e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005122:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005126:	e7b3      	b.n	8005090 <__ieee754_powf+0xa4>
 8005128:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800512c:	dd6d      	ble.n	800520a <__ieee754_powf+0x21e>
 800512e:	4b9a      	ldr	r3, [pc, #616]	; (8005398 <__ieee754_powf+0x3ac>)
 8005130:	429c      	cmp	r4, r3
 8005132:	dc06      	bgt.n	8005142 <__ieee754_powf+0x156>
 8005134:	2d00      	cmp	r5, #0
 8005136:	daa9      	bge.n	800508c <__ieee754_powf+0xa0>
 8005138:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800539c <__ieee754_powf+0x3b0>
 800513c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005140:	e7a6      	b.n	8005090 <__ieee754_powf+0xa4>
 8005142:	4b97      	ldr	r3, [pc, #604]	; (80053a0 <__ieee754_powf+0x3b4>)
 8005144:	429c      	cmp	r4, r3
 8005146:	dd02      	ble.n	800514e <__ieee754_powf+0x162>
 8005148:	2d00      	cmp	r5, #0
 800514a:	dcf5      	bgt.n	8005138 <__ieee754_powf+0x14c>
 800514c:	e79e      	b.n	800508c <__ieee754_powf+0xa0>
 800514e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005152:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005156:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80053a4 <__ieee754_powf+0x3b8>
 800515a:	eef1 6a40 	vneg.f32	s13, s0
 800515e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005162:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005166:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800516a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800516e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8005172:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80053a8 <__ieee754_powf+0x3bc>
 8005176:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800517a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80053ac <__ieee754_powf+0x3c0>
 800517e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8005182:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005186:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80053b0 <__ieee754_powf+0x3c4>
 800518a:	eeb0 6a67 	vmov.f32	s12, s15
 800518e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8005192:	ee16 3a10 	vmov	r3, s12
 8005196:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800519a:	f023 030f 	bic.w	r3, r3, #15
 800519e:	ee00 3a90 	vmov	s1, r3
 80051a2:	eee6 0a87 	vfma.f32	s1, s13, s14
 80051a6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80051aa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80051ae:	f025 050f 	bic.w	r5, r5, #15
 80051b2:	ee07 5a10 	vmov	s14, r5
 80051b6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80051ba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80051c6:	3e01      	subs	r6, #1
 80051c8:	ea56 0200 	orrs.w	r2, r6, r0
 80051cc:	ee07 5a10 	vmov	s14, r5
 80051d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80051d8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80051dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80051e0:	ee17 4a10 	vmov	r4, s14
 80051e4:	bf08      	it	eq
 80051e6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80051ea:	2c00      	cmp	r4, #0
 80051ec:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80051f0:	f340 8184 	ble.w	80054fc <__ieee754_powf+0x510>
 80051f4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80051f8:	f340 80fc 	ble.w	80053f4 <__ieee754_powf+0x408>
 80051fc:	eddf 7a67 	vldr	s15, [pc, #412]	; 800539c <__ieee754_powf+0x3b0>
 8005200:	ee28 0a27 	vmul.f32	s0, s16, s15
 8005204:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005208:	e742      	b.n	8005090 <__ieee754_powf+0xa4>
 800520a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800520e:	bfbf      	itttt	lt
 8005210:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80053b4 <__ieee754_powf+0x3c8>
 8005214:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005218:	f06f 0217 	mvnlt.w	r2, #23
 800521c:	ee17 4a90 	vmovlt	r4, s15
 8005220:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8005224:	bfa8      	it	ge
 8005226:	2200      	movge	r2, #0
 8005228:	3b7f      	subs	r3, #127	; 0x7f
 800522a:	4413      	add	r3, r2
 800522c:	4a62      	ldr	r2, [pc, #392]	; (80053b8 <__ieee754_powf+0x3cc>)
 800522e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005232:	4294      	cmp	r4, r2
 8005234:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8005238:	dd06      	ble.n	8005248 <__ieee754_powf+0x25c>
 800523a:	4a60      	ldr	r2, [pc, #384]	; (80053bc <__ieee754_powf+0x3d0>)
 800523c:	4294      	cmp	r4, r2
 800523e:	f340 80a5 	ble.w	800538c <__ieee754_powf+0x3a0>
 8005242:	3301      	adds	r3, #1
 8005244:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005248:	2400      	movs	r4, #0
 800524a:	4a5d      	ldr	r2, [pc, #372]	; (80053c0 <__ieee754_powf+0x3d4>)
 800524c:	00a7      	lsls	r7, r4, #2
 800524e:	443a      	add	r2, r7
 8005250:	ee07 1a90 	vmov	s15, r1
 8005254:	ed92 7a00 	vldr	s14, [r2]
 8005258:	4a5a      	ldr	r2, [pc, #360]	; (80053c4 <__ieee754_powf+0x3d8>)
 800525a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800525e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005262:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8005266:	1049      	asrs	r1, r1, #1
 8005268:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800526c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005270:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8005274:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005278:	ee06 1a10 	vmov	s12, r1
 800527c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8005280:	ee14 ca90 	vmov	ip, s9
 8005284:	ea02 0c0c 	and.w	ip, r2, ip
 8005288:	ee05 ca10 	vmov	s10, ip
 800528c:	eeb1 4a45 	vneg.f32	s8, s10
 8005290:	eee4 5a06 	vfma.f32	s11, s8, s12
 8005294:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005298:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80053c8 <__ieee754_powf+0x3dc>
 800529c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80052a0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80052a4:	eee4 5a06 	vfma.f32	s11, s8, s12
 80052a8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80052ac:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80052b0:	eddf 5a46 	vldr	s11, [pc, #280]	; 80053cc <__ieee754_powf+0x3e0>
 80052b4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80052b8:	eddf 5a45 	vldr	s11, [pc, #276]	; 80053d0 <__ieee754_powf+0x3e4>
 80052bc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80052c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80053a4 <__ieee754_powf+0x3b8>
 80052c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80052c8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80053d4 <__ieee754_powf+0x3e8>
 80052cc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80052d0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80053d8 <__ieee754_powf+0x3ec>
 80052d4:	ee75 6a24 	vadd.f32	s13, s10, s9
 80052d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80052dc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80052e0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80052e4:	eef0 7a65 	vmov.f32	s15, s11
 80052e8:	eee3 6a87 	vfma.f32	s13, s7, s14
 80052ec:	eee5 7a05 	vfma.f32	s15, s10, s10
 80052f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f4:	ee17 1a90 	vmov	r1, s15
 80052f8:	4011      	ands	r1, r2
 80052fa:	ee07 1a90 	vmov	s15, r1
 80052fe:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8005302:	eddf 5a36 	vldr	s11, [pc, #216]	; 80053dc <__ieee754_powf+0x3f0>
 8005306:	eea4 7a05 	vfma.f32	s14, s8, s10
 800530a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800530e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005312:	eea7 7a86 	vfma.f32	s14, s15, s12
 8005316:	eeb0 6a47 	vmov.f32	s12, s14
 800531a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800531e:	ee16 1a10 	vmov	r1, s12
 8005322:	4011      	ands	r1, r2
 8005324:	ee06 1a90 	vmov	s13, r1
 8005328:	eee4 6a27 	vfma.f32	s13, s8, s15
 800532c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80053e0 <__ieee754_powf+0x3f4>
 8005330:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005334:	ee06 1a10 	vmov	s12, r1
 8005338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800533c:	eddf 7a29 	vldr	s15, [pc, #164]	; 80053e4 <__ieee754_powf+0x3f8>
 8005340:	4929      	ldr	r1, [pc, #164]	; (80053e8 <__ieee754_powf+0x3fc>)
 8005342:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005346:	4439      	add	r1, r7
 8005348:	edd1 7a00 	vldr	s15, [r1]
 800534c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eef0 0a47 	vmov.f32	s1, s14
 8005358:	4b24      	ldr	r3, [pc, #144]	; (80053ec <__ieee754_powf+0x400>)
 800535a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800535e:	443b      	add	r3, r7
 8005360:	ed93 5a00 	vldr	s10, [r3]
 8005364:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005368:	ee70 0a85 	vadd.f32	s1, s1, s10
 800536c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8005370:	ee17 3a90 	vmov	r3, s15
 8005374:	4013      	ands	r3, r2
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800537e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005382:	eee6 7a65 	vfms.f32	s15, s12, s11
 8005386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538a:	e70e      	b.n	80051aa <__ieee754_powf+0x1be>
 800538c:	2401      	movs	r4, #1
 800538e:	e75c      	b.n	800524a <__ieee754_powf+0x25e>
 8005390:	0800598d 	.word	0x0800598d
 8005394:	00000000 	.word	0x00000000
 8005398:	3f7ffff7 	.word	0x3f7ffff7
 800539c:	7149f2ca 	.word	0x7149f2ca
 80053a0:	3f800007 	.word	0x3f800007
 80053a4:	3eaaaaab 	.word	0x3eaaaaab
 80053a8:	36eca570 	.word	0x36eca570
 80053ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80053b0:	3fb8aa00 	.word	0x3fb8aa00
 80053b4:	4b800000 	.word	0x4b800000
 80053b8:	001cc471 	.word	0x001cc471
 80053bc:	005db3d6 	.word	0x005db3d6
 80053c0:	08005994 	.word	0x08005994
 80053c4:	fffff000 	.word	0xfffff000
 80053c8:	3e6c3255 	.word	0x3e6c3255
 80053cc:	3e53f142 	.word	0x3e53f142
 80053d0:	3e8ba305 	.word	0x3e8ba305
 80053d4:	3edb6db7 	.word	0x3edb6db7
 80053d8:	3f19999a 	.word	0x3f19999a
 80053dc:	3f763800 	.word	0x3f763800
 80053e0:	3f76384f 	.word	0x3f76384f
 80053e4:	369dc3a0 	.word	0x369dc3a0
 80053e8:	080059a4 	.word	0x080059a4
 80053ec:	0800599c 	.word	0x0800599c
 80053f0:	3338aa3c 	.word	0x3338aa3c
 80053f4:	f040 8092 	bne.w	800551c <__ieee754_powf+0x530>
 80053f8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80053f0 <__ieee754_powf+0x404>
 80053fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005400:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005404:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540c:	f73f aef6 	bgt.w	80051fc <__ieee754_powf+0x210>
 8005410:	15db      	asrs	r3, r3, #23
 8005412:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8005416:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800541a:	4103      	asrs	r3, r0
 800541c:	4423      	add	r3, r4
 800541e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005422:	4947      	ldr	r1, [pc, #284]	; (8005540 <__ieee754_powf+0x554>)
 8005424:	3a7f      	subs	r2, #127	; 0x7f
 8005426:	4111      	asrs	r1, r2
 8005428:	ea23 0101 	bic.w	r1, r3, r1
 800542c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8005430:	ee07 1a10 	vmov	s14, r1
 8005434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005438:	f1c2 0217 	rsb	r2, r2, #23
 800543c:	4110      	asrs	r0, r2
 800543e:	2c00      	cmp	r4, #0
 8005440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005444:	bfb8      	it	lt
 8005446:	4240      	neglt	r0, r0
 8005448:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800544c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005544 <__ieee754_powf+0x558>
 8005450:	ee17 3a10 	vmov	r3, s14
 8005454:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005458:	f023 030f 	bic.w	r3, r3, #15
 800545c:	ee07 3a10 	vmov	s14, r3
 8005460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005464:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005468:	eddf 7a37 	vldr	s15, [pc, #220]	; 8005548 <__ieee754_powf+0x55c>
 800546c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005470:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8005474:	eddf 6a35 	vldr	s13, [pc, #212]	; 800554c <__ieee754_powf+0x560>
 8005478:	eeb0 0a67 	vmov.f32	s0, s15
 800547c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8005480:	eeb0 6a40 	vmov.f32	s12, s0
 8005484:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005488:	ee20 7a00 	vmul.f32	s14, s0, s0
 800548c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005490:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005550 <__ieee754_powf+0x564>
 8005494:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8005554 <__ieee754_powf+0x568>
 8005498:	eea7 6a26 	vfma.f32	s12, s14, s13
 800549c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8005558 <__ieee754_powf+0x56c>
 80054a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80054a4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800555c <__ieee754_powf+0x570>
 80054a8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80054ac:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8005560 <__ieee754_powf+0x574>
 80054b0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80054b4:	eeb0 6a40 	vmov.f32	s12, s0
 80054b8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80054bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80054c0:	eeb0 7a46 	vmov.f32	s14, s12
 80054c4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80054c8:	ee20 6a06 	vmul.f32	s12, s0, s12
 80054cc:	eee0 7a27 	vfma.f32	s15, s0, s15
 80054d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80054d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80054dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80054e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80054e4:	ee10 3a10 	vmov	r3, s0
 80054e8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80054ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054f0:	da1a      	bge.n	8005528 <__ieee754_powf+0x53c>
 80054f2:	f000 f98f 	bl	8005814 <scalbnf>
 80054f6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80054fa:	e5c9      	b.n	8005090 <__ieee754_powf+0xa4>
 80054fc:	4a19      	ldr	r2, [pc, #100]	; (8005564 <__ieee754_powf+0x578>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	dd02      	ble.n	8005508 <__ieee754_powf+0x51c>
 8005502:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005568 <__ieee754_powf+0x57c>
 8005506:	e67b      	b.n	8005200 <__ieee754_powf+0x214>
 8005508:	d108      	bne.n	800551c <__ieee754_powf+0x530>
 800550a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800550e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005516:	f6ff af7b 	blt.w	8005410 <__ieee754_powf+0x424>
 800551a:	e7f2      	b.n	8005502 <__ieee754_powf+0x516>
 800551c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005520:	f73f af76 	bgt.w	8005410 <__ieee754_powf+0x424>
 8005524:	2000      	movs	r0, #0
 8005526:	e78f      	b.n	8005448 <__ieee754_powf+0x45c>
 8005528:	ee00 3a10 	vmov	s0, r3
 800552c:	e7e3      	b.n	80054f6 <__ieee754_powf+0x50a>
 800552e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005532:	e5ad      	b.n	8005090 <__ieee754_powf+0xa4>
 8005534:	eeb0 0a68 	vmov.f32	s0, s17
 8005538:	e5aa      	b.n	8005090 <__ieee754_powf+0xa4>
 800553a:	eeb0 0a48 	vmov.f32	s0, s16
 800553e:	e5a7      	b.n	8005090 <__ieee754_powf+0xa4>
 8005540:	007fffff 	.word	0x007fffff
 8005544:	3f317218 	.word	0x3f317218
 8005548:	35bfbe8c 	.word	0x35bfbe8c
 800554c:	3f317200 	.word	0x3f317200
 8005550:	3331bb4c 	.word	0x3331bb4c
 8005554:	b5ddea0e 	.word	0xb5ddea0e
 8005558:	388ab355 	.word	0x388ab355
 800555c:	bb360b61 	.word	0xbb360b61
 8005560:	3e2aaaab 	.word	0x3e2aaaab
 8005564:	43160000 	.word	0x43160000
 8005568:	0da24260 	.word	0x0da24260

0800556c <__ieee754_sqrtf>:
 800556c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005570:	4770      	bx	lr

08005572 <matherr>:
 8005572:	2000      	movs	r0, #0
 8005574:	4770      	bx	lr
	...

08005578 <nan>:
 8005578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005580 <nan+0x8>
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	00000000 	.word	0x00000000
 8005584:	7ff80000 	.word	0x7ff80000

08005588 <atanf>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	ee10 5a10 	vmov	r5, s0
 800558e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005592:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005596:	eef0 7a40 	vmov.f32	s15, s0
 800559a:	db10      	blt.n	80055be <atanf+0x36>
 800559c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80055a0:	dd04      	ble.n	80055ac <atanf+0x24>
 80055a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80055a6:	eeb0 0a67 	vmov.f32	s0, s15
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80056e4 <atanf+0x15c>
 80055b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80056e8 <atanf+0x160>
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	bfd8      	it	le
 80055b8:	eef0 7a47 	vmovle.f32	s15, s14
 80055bc:	e7f3      	b.n	80055a6 <atanf+0x1e>
 80055be:	4b4b      	ldr	r3, [pc, #300]	; (80056ec <atanf+0x164>)
 80055c0:	429c      	cmp	r4, r3
 80055c2:	dc10      	bgt.n	80055e6 <atanf+0x5e>
 80055c4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80055c8:	da0a      	bge.n	80055e0 <atanf+0x58>
 80055ca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80056f0 <atanf+0x168>
 80055ce:	ee30 7a07 	vadd.f32	s14, s0, s14
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80055da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055de:	dce2      	bgt.n	80055a6 <atanf+0x1e>
 80055e0:	f04f 33ff 	mov.w	r3, #4294967295
 80055e4:	e013      	b.n	800560e <atanf+0x86>
 80055e6:	f000 f8a3 	bl	8005730 <fabsf>
 80055ea:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <atanf+0x16c>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	dc4f      	bgt.n	8005690 <atanf+0x108>
 80055f0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80055f4:	429c      	cmp	r4, r3
 80055f6:	dc41      	bgt.n	800567c <atanf+0xf4>
 80055f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80055fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005600:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005604:	2300      	movs	r3, #0
 8005606:	ee30 0a27 	vadd.f32	s0, s0, s15
 800560a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005614:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80056f8 <atanf+0x170>
 8005618:	eddf 5a38 	vldr	s11, [pc, #224]	; 80056fc <atanf+0x174>
 800561c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005700 <atanf+0x178>
 8005620:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005624:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005628:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005704 <atanf+0x17c>
 800562c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005630:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005708 <atanf+0x180>
 8005634:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005638:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800570c <atanf+0x184>
 800563c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005640:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005710 <atanf+0x188>
 8005644:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005648:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005714 <atanf+0x18c>
 800564c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005650:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005718 <atanf+0x190>
 8005654:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005658:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800571c <atanf+0x194>
 800565c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005660:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005720 <atanf+0x198>
 8005664:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005668:	ee27 7a26 	vmul.f32	s14, s14, s13
 800566c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005674:	d121      	bne.n	80056ba <atanf+0x132>
 8005676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800567a:	e794      	b.n	80055a6 <atanf+0x1e>
 800567c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005680:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005684:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005688:	2301      	movs	r3, #1
 800568a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800568e:	e7be      	b.n	800560e <atanf+0x86>
 8005690:	4b24      	ldr	r3, [pc, #144]	; (8005724 <atanf+0x19c>)
 8005692:	429c      	cmp	r4, r3
 8005694:	dc0b      	bgt.n	80056ae <atanf+0x126>
 8005696:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800569a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800569e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80056a2:	2302      	movs	r3, #2
 80056a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80056a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ac:	e7af      	b.n	800560e <atanf+0x86>
 80056ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80056b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80056b6:	2303      	movs	r3, #3
 80056b8:	e7a9      	b.n	800560e <atanf+0x86>
 80056ba:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <atanf+0x1a0>)
 80056bc:	491b      	ldr	r1, [pc, #108]	; (800572c <atanf+0x1a4>)
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	440b      	add	r3, r1
 80056c4:	edd3 6a00 	vldr	s13, [r3]
 80056c8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056d2:	ed92 7a00 	vldr	s14, [r2]
 80056d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056da:	bfb8      	it	lt
 80056dc:	eef1 7a67 	vneglt.f32	s15, s15
 80056e0:	e761      	b.n	80055a6 <atanf+0x1e>
 80056e2:	bf00      	nop
 80056e4:	bfc90fdb 	.word	0xbfc90fdb
 80056e8:	3fc90fdb 	.word	0x3fc90fdb
 80056ec:	3edfffff 	.word	0x3edfffff
 80056f0:	7149f2ca 	.word	0x7149f2ca
 80056f4:	3f97ffff 	.word	0x3f97ffff
 80056f8:	3c8569d7 	.word	0x3c8569d7
 80056fc:	3d4bda59 	.word	0x3d4bda59
 8005700:	bd6ef16b 	.word	0xbd6ef16b
 8005704:	3d886b35 	.word	0x3d886b35
 8005708:	3dba2e6e 	.word	0x3dba2e6e
 800570c:	3e124925 	.word	0x3e124925
 8005710:	3eaaaaab 	.word	0x3eaaaaab
 8005714:	bd15a221 	.word	0xbd15a221
 8005718:	bd9d8795 	.word	0xbd9d8795
 800571c:	bde38e38 	.word	0xbde38e38
 8005720:	be4ccccd 	.word	0xbe4ccccd
 8005724:	401bffff 	.word	0x401bffff
 8005728:	080059ac 	.word	0x080059ac
 800572c:	080059bc 	.word	0x080059bc

08005730 <fabsf>:
 8005730:	ee10 3a10 	vmov	r3, s0
 8005734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005738:	ee00 3a10 	vmov	s0, r3
 800573c:	4770      	bx	lr

0800573e <finitef>:
 800573e:	ee10 3a10 	vmov	r3, s0
 8005742:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005746:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800574a:	bfac      	ite	ge
 800574c:	2000      	movge	r0, #0
 800574e:	2001      	movlt	r0, #1
 8005750:	4770      	bx	lr
	...

08005754 <nanf>:
 8005754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800575c <nanf+0x8>
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	7fc00000 	.word	0x7fc00000

08005760 <rintf>:
 8005760:	b513      	push	{r0, r1, r4, lr}
 8005762:	ee10 1a10 	vmov	r1, s0
 8005766:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800576a:	0ddc      	lsrs	r4, r3, #23
 800576c:	3c7f      	subs	r4, #127	; 0x7f
 800576e:	2c16      	cmp	r4, #22
 8005770:	dc46      	bgt.n	8005800 <rintf+0xa0>
 8005772:	b32b      	cbz	r3, 80057c0 <rintf+0x60>
 8005774:	2c00      	cmp	r4, #0
 8005776:	ee10 2a10 	vmov	r2, s0
 800577a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800577e:	da21      	bge.n	80057c4 <rintf+0x64>
 8005780:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8005784:	425b      	negs	r3, r3
 8005786:	4a21      	ldr	r2, [pc, #132]	; (800580c <rintf+0xac>)
 8005788:	0a5b      	lsrs	r3, r3, #9
 800578a:	0d09      	lsrs	r1, r1, #20
 800578c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005790:	0509      	lsls	r1, r1, #20
 8005792:	430b      	orrs	r3, r1
 8005794:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	edd2 6a00 	vldr	s13, [r2]
 80057a0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80057a4:	ed8d 7a01 	vstr	s14, [sp, #4]
 80057a8:	eddd 7a01 	vldr	s15, [sp, #4]
 80057ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057b0:	ee17 3a90 	vmov	r3, s15
 80057b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057b8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80057bc:	ee00 3a10 	vmov	s0, r3
 80057c0:	b002      	add	sp, #8
 80057c2:	bd10      	pop	{r4, pc}
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <rintf+0xb0>)
 80057c6:	4123      	asrs	r3, r4
 80057c8:	4219      	tst	r1, r3
 80057ca:	d0f9      	beq.n	80057c0 <rintf+0x60>
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	4219      	tst	r1, r3
 80057d0:	d006      	beq.n	80057e0 <rintf+0x80>
 80057d2:	ea21 0203 	bic.w	r2, r1, r3
 80057d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057da:	fa43 f404 	asr.w	r4, r3, r4
 80057de:	4322      	orrs	r2, r4
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <rintf+0xac>)
 80057e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057e6:	ed90 7a00 	vldr	s14, [r0]
 80057ea:	ee07 2a90 	vmov	s15, r2
 80057ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057f2:	edcd 7a01 	vstr	s15, [sp, #4]
 80057f6:	ed9d 0a01 	vldr	s0, [sp, #4]
 80057fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80057fe:	e7df      	b.n	80057c0 <rintf+0x60>
 8005800:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005804:	d3dc      	bcc.n	80057c0 <rintf+0x60>
 8005806:	ee30 0a00 	vadd.f32	s0, s0, s0
 800580a:	e7d9      	b.n	80057c0 <rintf+0x60>
 800580c:	080059cc 	.word	0x080059cc
 8005810:	007fffff 	.word	0x007fffff

08005814 <scalbnf>:
 8005814:	b508      	push	{r3, lr}
 8005816:	ee10 2a10 	vmov	r2, s0
 800581a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800581e:	ed2d 8b02 	vpush	{d8}
 8005822:	eef0 0a40 	vmov.f32	s1, s0
 8005826:	d004      	beq.n	8005832 <scalbnf+0x1e>
 8005828:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800582c:	d306      	bcc.n	800583c <scalbnf+0x28>
 800582e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005832:	ecbd 8b02 	vpop	{d8}
 8005836:	eeb0 0a60 	vmov.f32	s0, s1
 800583a:	bd08      	pop	{r3, pc}
 800583c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005840:	d21c      	bcs.n	800587c <scalbnf+0x68>
 8005842:	4b1f      	ldr	r3, [pc, #124]	; (80058c0 <scalbnf+0xac>)
 8005844:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80058c4 <scalbnf+0xb0>
 8005848:	4298      	cmp	r0, r3
 800584a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800584e:	db10      	blt.n	8005872 <scalbnf+0x5e>
 8005850:	ee10 2a90 	vmov	r2, s1
 8005854:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005858:	3b19      	subs	r3, #25
 800585a:	4403      	add	r3, r0
 800585c:	2bfe      	cmp	r3, #254	; 0xfe
 800585e:	dd0f      	ble.n	8005880 <scalbnf+0x6c>
 8005860:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80058c8 <scalbnf+0xb4>
 8005864:	eeb0 0a48 	vmov.f32	s0, s16
 8005868:	f000 f834 	bl	80058d4 <copysignf>
 800586c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005870:	e7df      	b.n	8005832 <scalbnf+0x1e>
 8005872:	eddf 7a16 	vldr	s15, [pc, #88]	; 80058cc <scalbnf+0xb8>
 8005876:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800587a:	e7da      	b.n	8005832 <scalbnf+0x1e>
 800587c:	0ddb      	lsrs	r3, r3, #23
 800587e:	e7ec      	b.n	800585a <scalbnf+0x46>
 8005880:	2b00      	cmp	r3, #0
 8005882:	dd06      	ble.n	8005892 <scalbnf+0x7e>
 8005884:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005888:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800588c:	ee00 3a90 	vmov	s1, r3
 8005890:	e7cf      	b.n	8005832 <scalbnf+0x1e>
 8005892:	f113 0f16 	cmn.w	r3, #22
 8005896:	da06      	bge.n	80058a6 <scalbnf+0x92>
 8005898:	f24c 3350 	movw	r3, #50000	; 0xc350
 800589c:	4298      	cmp	r0, r3
 800589e:	dcdf      	bgt.n	8005860 <scalbnf+0x4c>
 80058a0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80058cc <scalbnf+0xb8>
 80058a4:	e7de      	b.n	8005864 <scalbnf+0x50>
 80058a6:	3319      	adds	r3, #25
 80058a8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80058ac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80058b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80058d0 <scalbnf+0xbc>
 80058b4:	ee07 3a10 	vmov	s14, r3
 80058b8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80058bc:	e7b9      	b.n	8005832 <scalbnf+0x1e>
 80058be:	bf00      	nop
 80058c0:	ffff3cb0 	.word	0xffff3cb0
 80058c4:	4c000000 	.word	0x4c000000
 80058c8:	7149f2ca 	.word	0x7149f2ca
 80058cc:	0da24260 	.word	0x0da24260
 80058d0:	33000000 	.word	0x33000000

080058d4 <copysignf>:
 80058d4:	ee10 3a10 	vmov	r3, s0
 80058d8:	ee10 2a90 	vmov	r2, s1
 80058dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058e4:	4313      	orrs	r3, r2
 80058e6:	ee00 3a10 	vmov	s0, r3
 80058ea:	4770      	bx	lr

080058ec <__errno>:
 80058ec:	4b01      	ldr	r3, [pc, #4]	; (80058f4 <__errno+0x8>)
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20000020 	.word	0x20000020

080058f8 <__libc_init_array>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4e0d      	ldr	r6, [pc, #52]	; (8005930 <__libc_init_array+0x38>)
 80058fc:	4c0d      	ldr	r4, [pc, #52]	; (8005934 <__libc_init_array+0x3c>)
 80058fe:	1ba4      	subs	r4, r4, r6
 8005900:	10a4      	asrs	r4, r4, #2
 8005902:	2500      	movs	r5, #0
 8005904:	42a5      	cmp	r5, r4
 8005906:	d109      	bne.n	800591c <__libc_init_array+0x24>
 8005908:	4e0b      	ldr	r6, [pc, #44]	; (8005938 <__libc_init_array+0x40>)
 800590a:	4c0c      	ldr	r4, [pc, #48]	; (800593c <__libc_init_array+0x44>)
 800590c:	f000 f820 	bl	8005950 <_init>
 8005910:	1ba4      	subs	r4, r4, r6
 8005912:	10a4      	asrs	r4, r4, #2
 8005914:	2500      	movs	r5, #0
 8005916:	42a5      	cmp	r5, r4
 8005918:	d105      	bne.n	8005926 <__libc_init_array+0x2e>
 800591a:	bd70      	pop	{r4, r5, r6, pc}
 800591c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005920:	4798      	blx	r3
 8005922:	3501      	adds	r5, #1
 8005924:	e7ee      	b.n	8005904 <__libc_init_array+0xc>
 8005926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800592a:	4798      	blx	r3
 800592c:	3501      	adds	r5, #1
 800592e:	e7f2      	b.n	8005916 <__libc_init_array+0x1e>
 8005930:	080059dc 	.word	0x080059dc
 8005934:	080059dc 	.word	0x080059dc
 8005938:	080059dc 	.word	0x080059dc
 800593c:	080059e4 	.word	0x080059e4

08005940 <memset>:
 8005940:	4402      	add	r2, r0
 8005942:	4603      	mov	r3, r0
 8005944:	4293      	cmp	r3, r2
 8005946:	d100      	bne.n	800594a <memset+0xa>
 8005948:	4770      	bx	lr
 800594a:	f803 1b01 	strb.w	r1, [r3], #1
 800594e:	e7f9      	b.n	8005944 <memset+0x4>

08005950 <_init>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

0800595c <_fini>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr
