
STM32F405_DJI_rpi_shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800599c  0800599c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a4  080059a4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080059b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000084  08005a34  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000504  08005a34  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fa7  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028aa  00000000  00000000  0003105b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  00033908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  000346a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005f9f  00000000  00000000  00035310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c80b  00000000  00000000  0003b2af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be5ba  00000000  00000000  00047aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  001060f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005918 	.word	0x08005918

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08005918 	.word	0x08005918

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b972 	b.w	80008dc <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	4688      	mov	r8, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14b      	bne.n	80006b6 <__udivmoddi4+0xa6>
 800061e:	428a      	cmp	r2, r1
 8000620:	4615      	mov	r5, r2
 8000622:	d967      	bls.n	80006f4 <__udivmoddi4+0xe4>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b14a      	cbz	r2, 800063e <__udivmoddi4+0x2e>
 800062a:	f1c2 0720 	rsb	r7, r2, #32
 800062e:	fa01 f302 	lsl.w	r3, r1, r2
 8000632:	fa20 f707 	lsr.w	r7, r0, r7
 8000636:	4095      	lsls	r5, r2
 8000638:	ea47 0803 	orr.w	r8, r7, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000642:	0c23      	lsrs	r3, r4, #16
 8000644:	fbb8 f7fe 	udiv	r7, r8, lr
 8000648:	fa1f fc85 	uxth.w	ip, r5
 800064c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000650:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000654:	fb07 f10c 	mul.w	r1, r7, ip
 8000658:	4299      	cmp	r1, r3
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x60>
 800065c:	18eb      	adds	r3, r5, r3
 800065e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000662:	f080 811b 	bcs.w	800089c <__udivmoddi4+0x28c>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 8118 	bls.w	800089c <__udivmoddi4+0x28c>
 800066c:	3f02      	subs	r7, #2
 800066e:	442b      	add	r3, r5
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0fe 	udiv	r0, r3, lr
 8000678:	fb0e 3310 	mls	r3, lr, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 fc0c 	mul.w	ip, r0, ip
 8000684:	45a4      	cmp	ip, r4
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x8c>
 8000688:	192c      	adds	r4, r5, r4
 800068a:	f100 33ff 	add.w	r3, r0, #4294967295
 800068e:	f080 8107 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000692:	45a4      	cmp	ip, r4
 8000694:	f240 8104 	bls.w	80008a0 <__udivmoddi4+0x290>
 8000698:	3802      	subs	r0, #2
 800069a:	442c      	add	r4, r5
 800069c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a0:	eba4 040c 	sub.w	r4, r4, ip
 80006a4:	2700      	movs	r7, #0
 80006a6:	b11e      	cbz	r6, 80006b0 <__udivmoddi4+0xa0>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c6 4300 	strd	r4, r3, [r6]
 80006b0:	4639      	mov	r1, r7
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d909      	bls.n	80006ce <__udivmoddi4+0xbe>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80eb 	beq.w	8000896 <__udivmoddi4+0x286>
 80006c0:	2700      	movs	r7, #0
 80006c2:	e9c6 0100 	strd	r0, r1, [r6]
 80006c6:	4638      	mov	r0, r7
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	fab3 f783 	clz	r7, r3
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d147      	bne.n	8000766 <__udivmoddi4+0x156>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xd0>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 80fa 	bhi.w	80008d4 <__udivmoddi4+0x2c4>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb61 0303 	sbc.w	r3, r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4698      	mov	r8, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d0e0      	beq.n	80006b0 <__udivmoddi4+0xa0>
 80006ee:	e9c6 4800 	strd	r4, r8, [r6]
 80006f2:	e7dd      	b.n	80006b0 <__udivmoddi4+0xa0>
 80006f4:	b902      	cbnz	r2, 80006f8 <__udivmoddi4+0xe8>
 80006f6:	deff      	udf	#255	; 0xff
 80006f8:	fab2 f282 	clz	r2, r2
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 808f 	bne.w	8000820 <__udivmoddi4+0x210>
 8000702:	1b49      	subs	r1, r1, r5
 8000704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000708:	fa1f f885 	uxth.w	r8, r5
 800070c:	2701      	movs	r7, #1
 800070e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000712:	0c23      	lsrs	r3, r4, #16
 8000714:	fb0e 111c 	mls	r1, lr, ip, r1
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb08 f10c 	mul.w	r1, r8, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x124>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4299      	cmp	r1, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2bc>
 8000732:	4684      	mov	ip, r0
 8000734:	1a59      	subs	r1, r3, r1
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000740:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x14c>
 800074c:	192c      	adds	r4, r5, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x14a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80b6 	bhi.w	80008c6 <__udivmoddi4+0x2b6>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e79f      	b.n	80006a6 <__udivmoddi4+0x96>
 8000766:	f1c7 0c20 	rsb	ip, r7, #32
 800076a:	40bb      	lsls	r3, r7
 800076c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000770:	ea4e 0e03 	orr.w	lr, lr, r3
 8000774:	fa01 f407 	lsl.w	r4, r1, r7
 8000778:	fa20 f50c 	lsr.w	r5, r0, ip
 800077c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000780:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000784:	4325      	orrs	r5, r4
 8000786:	fbb3 f9f8 	udiv	r9, r3, r8
 800078a:	0c2c      	lsrs	r4, r5, #16
 800078c:	fb08 3319 	mls	r3, r8, r9, r3
 8000790:	fa1f fa8e 	uxth.w	sl, lr
 8000794:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000798:	fb09 f40a 	mul.w	r4, r9, sl
 800079c:	429c      	cmp	r4, r3
 800079e:	fa02 f207 	lsl.w	r2, r2, r7
 80007a2:	fa00 f107 	lsl.w	r1, r0, r7
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b0:	f080 8087 	bcs.w	80008c2 <__udivmoddi4+0x2b2>
 80007b4:	429c      	cmp	r4, r3
 80007b6:	f240 8084 	bls.w	80008c2 <__udivmoddi4+0x2b2>
 80007ba:	f1a9 0902 	sub.w	r9, r9, #2
 80007be:	4473      	add	r3, lr
 80007c0:	1b1b      	subs	r3, r3, r4
 80007c2:	b2ad      	uxth	r5, r5
 80007c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007c8:	fb08 3310 	mls	r3, r8, r0, r3
 80007cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007d4:	45a2      	cmp	sl, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1e 0404 	adds.w	r4, lr, r4
 80007dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e0:	d26b      	bcs.n	80008ba <__udivmoddi4+0x2aa>
 80007e2:	45a2      	cmp	sl, r4
 80007e4:	d969      	bls.n	80008ba <__udivmoddi4+0x2aa>
 80007e6:	3802      	subs	r0, #2
 80007e8:	4474      	add	r4, lr
 80007ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ee:	fba0 8902 	umull	r8, r9, r0, r2
 80007f2:	eba4 040a 	sub.w	r4, r4, sl
 80007f6:	454c      	cmp	r4, r9
 80007f8:	46c2      	mov	sl, r8
 80007fa:	464b      	mov	r3, r9
 80007fc:	d354      	bcc.n	80008a8 <__udivmoddi4+0x298>
 80007fe:	d051      	beq.n	80008a4 <__udivmoddi4+0x294>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d069      	beq.n	80008d8 <__udivmoddi4+0x2c8>
 8000804:	ebb1 050a 	subs.w	r5, r1, sl
 8000808:	eb64 0403 	sbc.w	r4, r4, r3
 800080c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000810:	40fd      	lsrs	r5, r7
 8000812:	40fc      	lsrs	r4, r7
 8000814:	ea4c 0505 	orr.w	r5, ip, r5
 8000818:	e9c6 5400 	strd	r5, r4, [r6]
 800081c:	2700      	movs	r7, #0
 800081e:	e747      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000820:	f1c2 0320 	rsb	r3, r2, #32
 8000824:	fa20 f703 	lsr.w	r7, r0, r3
 8000828:	4095      	lsls	r5, r2
 800082a:	fa01 f002 	lsl.w	r0, r1, r2
 800082e:	fa21 f303 	lsr.w	r3, r1, r3
 8000832:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000836:	4338      	orrs	r0, r7
 8000838:	0c01      	lsrs	r1, r0, #16
 800083a:	fbb3 f7fe 	udiv	r7, r3, lr
 800083e:	fa1f f885 	uxth.w	r8, r5
 8000842:	fb0e 3317 	mls	r3, lr, r7, r3
 8000846:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084a:	fb07 f308 	mul.w	r3, r7, r8
 800084e:	428b      	cmp	r3, r1
 8000850:	fa04 f402 	lsl.w	r4, r4, r2
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x256>
 8000856:	1869      	adds	r1, r5, r1
 8000858:	f107 3cff 	add.w	ip, r7, #4294967295
 800085c:	d22f      	bcs.n	80008be <__udivmoddi4+0x2ae>
 800085e:	428b      	cmp	r3, r1
 8000860:	d92d      	bls.n	80008be <__udivmoddi4+0x2ae>
 8000862:	3f02      	subs	r7, #2
 8000864:	4429      	add	r1, r5
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	b281      	uxth	r1, r0
 800086a:	fbb3 f0fe 	udiv	r0, r3, lr
 800086e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000872:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000876:	fb00 f308 	mul.w	r3, r0, r8
 800087a:	428b      	cmp	r3, r1
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x27e>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f100 3cff 	add.w	ip, r0, #4294967295
 8000884:	d217      	bcs.n	80008b6 <__udivmoddi4+0x2a6>
 8000886:	428b      	cmp	r3, r1
 8000888:	d915      	bls.n	80008b6 <__udivmoddi4+0x2a6>
 800088a:	3802      	subs	r0, #2
 800088c:	4429      	add	r1, r5
 800088e:	1ac9      	subs	r1, r1, r3
 8000890:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000894:	e73b      	b.n	800070e <__udivmoddi4+0xfe>
 8000896:	4637      	mov	r7, r6
 8000898:	4630      	mov	r0, r6
 800089a:	e709      	b.n	80006b0 <__udivmoddi4+0xa0>
 800089c:	4607      	mov	r7, r0
 800089e:	e6e7      	b.n	8000670 <__udivmoddi4+0x60>
 80008a0:	4618      	mov	r0, r3
 80008a2:	e6fb      	b.n	800069c <__udivmoddi4+0x8c>
 80008a4:	4541      	cmp	r1, r8
 80008a6:	d2ab      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ac:	eb69 020e 	sbc.w	r2, r9, lr
 80008b0:	3801      	subs	r0, #1
 80008b2:	4613      	mov	r3, r2
 80008b4:	e7a4      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b6:	4660      	mov	r0, ip
 80008b8:	e7e9      	b.n	800088e <__udivmoddi4+0x27e>
 80008ba:	4618      	mov	r0, r3
 80008bc:	e795      	b.n	80007ea <__udivmoddi4+0x1da>
 80008be:	4667      	mov	r7, ip
 80008c0:	e7d1      	b.n	8000866 <__udivmoddi4+0x256>
 80008c2:	4681      	mov	r9, r0
 80008c4:	e77c      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	442c      	add	r4, r5
 80008ca:	e747      	b.n	800075c <__udivmoddi4+0x14c>
 80008cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d0:	442b      	add	r3, r5
 80008d2:	e72f      	b.n	8000734 <__udivmoddi4+0x124>
 80008d4:	4638      	mov	r0, r7
 80008d6:	e708      	b.n	80006ea <__udivmoddi4+0xda>
 80008d8:	4637      	mov	r7, r6
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0xa0>

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	ed93 7a00 	vldr	s14, [r3]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3304      	adds	r3, #4
 80008fc:	edd3 6a00 	vldr	s13, [r3]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3304      	adds	r3, #4
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800090c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3308      	adds	r3, #8
 8000914:	edd3 6a00 	vldr	s13, [r3]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3308      	adds	r3, #8
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	330c      	adds	r3, #12
 800092c:	edd3 6a00 	vldr	s13, [r3]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	330c      	adds	r3, #12
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800093c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000940:	eeb0 0a67 	vmov.f32	s0, s15
 8000944:	f000 f91e 	bl	8000b84 <invSqrt>
 8000948:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	ed97 7a07 	vldr	s14, [r7, #28]
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3304      	adds	r3, #4
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ed97 7a07 	vldr	s14, [r7, #28]
 800096a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800096e:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3308      	adds	r3, #8
 8000976:	edd3 7a00 	vldr	s15, [r3]
 800097a:	ed97 7a07 	vldr	s14, [r7, #28]
 800097e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000982:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	330c      	adds	r3, #12
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000996:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 800099a:	ed97 7a05 	vldr	s14, [r7, #20]
 800099e:	edd7 7a04 	vldr	s15, [r7, #16]
 80009a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80009aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80009ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80009be:	edd7 7a06 	vldr	s15, [r7, #24]
 80009c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c6:	edd7 6a05 	vldr	s13, [r7, #20]
 80009ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80009da:	edd7 7a04 	vldr	s15, [r7, #16]
 80009de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009e6:	edd7 6a03 	vldr	s13, [r7, #12]
 80009ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f6:	eef0 0a67 	vmov.f32	s1, s15
 80009fa:	eeb0 0a46 	vmov.f32	s0, s12
 80009fe:	f003 ffdd 	bl	80049bc <atan2f>
 8000a02:	eef0 7a40 	vmov.f32	s15, s0
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <Quaternion_Update+0x28c>)
 8000a08:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8000a0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a18:	edd7 6a06 	vldr	s13, [r7, #24]
 8000a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a30:	f003 ff6c 	bl	800490c <asinf>
 8000a34:	eef0 7a40 	vmov.f32	s15, s0
 8000a38:	eef1 7a67 	vneg.f32	s15, s15
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <Quaternion_Update+0x290>)
 8000a3e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8000a42:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a5e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8000a62:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a7e:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a9e:	eef0 0a67 	vmov.f32	s1, s15
 8000aa2:	eeb0 0a46 	vmov.f32	s0, s12
 8000aa6:	f003 ff89 	bl	80049bc <atan2f>
 8000aaa:	eef0 7a40 	vmov.f32	s15, s0
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <Quaternion_Update+0x294>)
 8000ab0:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <Quaternion_Update+0x28c>)
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000b78 <Quaternion_Update+0x298>
 8000abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <Quaternion_Update+0x28c>)
 8000ac4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <Quaternion_Update+0x290>)
 8000aca:	edd3 7a00 	vldr	s15, [r3]
 8000ace:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000b78 <Quaternion_Update+0x298>
 8000ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <Quaternion_Update+0x290>)
 8000ad8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <Quaternion_Update+0x294>)
 8000ade:	edd3 7a00 	vldr	s15, [r3]
 8000ae2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000b78 <Quaternion_Update+0x298>
 8000ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <Quaternion_Update+0x294>)
 8000aec:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <Quaternion_Update+0x294>)
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	db0a      	blt.n	8000b16 <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <Quaternion_Update+0x294>)
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000b7c <Quaternion_Update+0x29c>
 8000b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <Quaternion_Update+0x294>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]
 8000b14:	e007      	b.n	8000b26 <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <Quaternion_Update+0x294>)
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	eef1 7a67 	vneg.f32	s15, s15
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <Quaternion_Update+0x294>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b34:	db0a      	blt.n	8000b4c <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b38:	edd3 7a00 	vldr	s15, [r3]
 8000b3c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000b80 <Quaternion_Update+0x2a0>
 8000b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b46:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8000b4a:	e00b      	b.n	8000b64 <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b4e:	edd3 7a00 	vldr	s15, [r3]
 8000b52:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000b80 <Quaternion_Update+0x2a0>
 8000b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b5a:	eef1 7a67 	vneg.f32	s15, s15
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <Quaternion_Update+0x28c>)
 8000b60:	edc3 7a00 	vstr	s15, [r3]
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	200000f8 	.word	0x200000f8
 8000b74:	200000fc 	.word	0x200000fc
 8000b78:	42652ee1 	.word	0x42652ee1
 8000b7c:	43b40000 	.word	0x43b40000
 8000b80:	43340000 	.word	0x43340000

08000b84 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	105a      	asrs	r2, r3, #1
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <invSqrt+0x74>)
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000bbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	ee07 3a90 	vmov	s15, r3
}
 8000bea:	eeb0 0a67 	vmov.f32	s0, s15
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	5f3759df 	.word	0x5f3759df

08000bfc <bno080_Initialization>:
volatile uint8_t bnoIntFl = 0;
volatile uint8_t constantRead = 0;


uint8_t bno080_Initialization(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(BNO_IRQN);
 8000c00:	2028      	movs	r0, #40	; 0x28
 8000c02:	f001 f9c8 	bl	8001f96 <HAL_NVIC_DisableIRQ>

	BNO_DESELECT;
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <bno080_Initialization+0x64>)
 8000c0e:	f001 fe99 	bl	8002944 <HAL_GPIO_WritePin>
	BNO_RESET;
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <bno080_Initialization+0x68>)
 8000c18:	f001 fe94 	bl	8002944 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f001 f871 	bl	8001d04 <HAL_Delay>
	BNO_ENABLE;
 8000c22:	2201      	movs	r2, #1
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <bno080_Initialization+0x68>)
 8000c28:	f001 fe8c 	bl	8002944 <HAL_GPIO_WritePin>

	//Wait for first assertion of INT before using WAK pin. Can take ~104ms
	if(waitForSPI(BNO_NOREAD) != 1)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f8b3 	bl	8000d98 <waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When bno080 first boots it broadcasts big startup packet
	//Read it and dump it
	if(waitForSPI(BNO_READ) != 1) //Wait for assertion of INT before reading advert message.
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 f8b0 	bl	8000d98 <waitForSPI>
	}
	//receivePacket();

	//The bno080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	if(waitForSPI(BNO_READ) != 1) //Wait for assertion of INT before reading Init response
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f000 f8ad 	bl	8000d98 <waitForSPI>
		//return 0;
	}
	//receivePacket();

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <bno080_Initialization+0x6c>)
 8000c40:	22f9      	movs	r2, #249	; 0xf9
 8000c42:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;							  //Reserved
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <bno080_Initialization+0x6c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	sendPacket(CHANNEL_CONTROL, 2);
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f000 f927 	bl	8000ea0 <sendPacket>

	//Now we wait for response
	if(waitForSPI(BNO_READ) != 1)
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 f8a0 	bl	8000d98 <waitForSPI>

	if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE){
		//return 1;
	}

	return 0; //Something went wrong
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020800 	.word	0x40020800
 8000c68:	20000154 	.word	0x20000154

08000c6c <bno080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float bno080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	ed2d 8b02 	vpush	{d8}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	460a      	mov	r2, r1
 8000c7a:	80fb      	strh	r3, [r7, #6]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8000c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000c8c:	797b      	ldrb	r3, [r7, #5]
 8000c8e:	425b      	negs	r3, r3
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c98:	eef0 0a67 	vmov.f32	s1, s15
 8000c9c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000ca0:	f003 fe8e 	bl	80049c0 <powf>
 8000ca4:	eef0 7a40 	vmov.f32	s15, s0
 8000ca8:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8000cac:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	ecbd 8b02 	vpop	{d8}
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <bno080_getQuatI>:
}


//Return the rotation vector quaternion I
float bno080_getQuatI(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatI, rotationVector_Q1);
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <bno080_getQuatI+0x24>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <bno080_getQuatI+0x28>)
 8000cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f7ff ffcb 	bl	8000c6c <bno080_qToFloat>
 8000cd6:	eef0 7a40 	vmov.f32	s15, s0
}
 8000cda:	eeb0 0a67 	vmov.f32	s0, s15
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000a6 	.word	0x200000a6
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <bno080_getQuatJ>:

//Return the rotation vector quaternion J
float bno080_getQuatJ(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatJ, rotationVector_Q1);
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <bno080_getQuatJ+0x24>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <bno080_getQuatJ+0x28>)
 8000cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	f7ff ffb5 	bl	8000c6c <bno080_qToFloat>
 8000d02:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d06:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000a8 	.word	0x200000a8
 8000d10:	20000000 	.word	0x20000000

08000d14 <bno080_getQuatK>:

//Return the rotation vector quaternion K
float bno080_getQuatK(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatK, rotationVector_Q1);
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <bno080_getQuatK+0x24>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b21a      	sxth	r2, r3
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <bno080_getQuatK+0x28>)
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f7ff ff9f 	bl	8000c6c <bno080_qToFloat>
 8000d2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d32:	eeb0 0a67 	vmov.f32	s0, s15
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000aa 	.word	0x200000aa
 8000d3c:	20000000 	.word	0x20000000

08000d40 <bno080_getQuatReal>:

//Return the rotation vector quaternion Real
float bno080_getQuatReal(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatReal, rotationVector_Q1);
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <bno080_getQuatReal+0x24>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <bno080_getQuatReal+0x28>)
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f7ff ff89 	bl	8000c6c <bno080_qToFloat>
 8000d5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200000ac 	.word	0x200000ac
 8000d68:	20000000 	.word	0x20000000

08000d6c <bno080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float bno080_getQuatRadianAccuracy(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	return bno080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <bno080_getQuatRadianAccuracy+0x24>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <bno080_getQuatRadianAccuracy+0x28>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4610      	mov	r0, r2
 8000d82:	f7ff ff73 	bl	8000c6c <bno080_qToFloat>
 8000d86:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000ae 	.word	0x200000ae
 8000d94:	20000000 	.word	0x20000000

08000d98 <waitForSPI>:

*/


uint8_t waitForSPI(wait_cmd val)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	uint32_t tickstart = HAL_GetTick();
 8000da2:	f000 ffa3 	bl	8001cec <HAL_GetTick>
 8000da6:	60f8      	str	r0, [r7, #12]

	while(HAL_GPIO_ReadPin(BNO_INT_PORT_F, BNO_INT_PIN_F)){
 8000da8:	e009      	b.n	8000dbe <waitForSPI+0x26>
		if((HAL_GetTick() - tickstart) > 300){
 8000daa:	f000 ff9f 	bl	8001cec <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000db8:	d901      	bls.n	8000dbe <waitForSPI+0x26>
			return 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e00d      	b.n	8000dda <waitForSPI+0x42>
	while(HAL_GPIO_ReadPin(BNO_INT_PORT_F, BNO_INT_PIN_F)){
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <waitForSPI+0x4c>)
 8000dc4:	f001 fda6 	bl	8002914 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1ed      	bne.n	8000daa <waitForSPI+0x12>
		}
	}

	if(val == BNO_READ){
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <waitForSPI+0x40>
		receivePacket();
 8000dd4:	f000 f808 	bl	8000de8 <receivePacket>
	}

	return 1;
 8000dd8:	2301      	movs	r3, #1
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40020000 	.word	0x40020000

08000de8 <receivePacket>:



uint8_t receivePacket(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

	BNO_SELECT;
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df4:	4826      	ldr	r0, [pc, #152]	; (8000e90 <receivePacket+0xa8>)
 8000df6:	f001 fda5 	bl	8002944 <HAL_GPIO_WritePin>
	//Get the first four bytes, aka the packet header
	HAL_SPI_Receive(BNO_SPI, shtpHeader, 4, 100);
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	4925      	ldr	r1, [pc, #148]	; (8000e94 <receivePacket+0xac>)
 8000e00:	4825      	ldr	r0, [pc, #148]	; (8000e98 <receivePacket+0xb0>)
 8000e02:	f002 fcdd 	bl	80037c0 <HAL_SPI_Receive>

	//Calculate the number of data bytes in this packet
	uint16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <receivePacket+0xac>)
 8000e08:	785b      	ldrb	r3, [r3, #1]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <receivePacket+0xac>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	817b      	strh	r3, [r7, #10]
	dataLength &= ~(1 << 15); //Clear the MSbit.
 8000e1a:	897b      	ldrh	r3, [r7, #10]
 8000e1c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e20:	817b      	strh	r3, [r7, #10]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8000e22:	897b      	ldrh	r3, [r7, #10]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <receivePacket+0x44>
	{
		//Packet is empty
		return 0; //All done
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e02c      	b.n	8000e86 <receivePacket+0x9e>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8000e2c:	897b      	ldrh	r3, [r7, #10]
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	817b      	strh	r3, [r7, #10]

	if(dataLength < MAX_PACKET_SIZE){
 8000e32:	897b      	ldrh	r3, [r7, #10]
 8000e34:	2b7f      	cmp	r3, #127	; 0x7f
 8000e36:	d806      	bhi.n	8000e46 <receivePacket+0x5e>
		HAL_SPI_Receive(BNO_SPI, shtpData, dataLength, 200);
 8000e38:	897a      	ldrh	r2, [r7, #10]
 8000e3a:	23c8      	movs	r3, #200	; 0xc8
 8000e3c:	4917      	ldr	r1, [pc, #92]	; (8000e9c <receivePacket+0xb4>)
 8000e3e:	4816      	ldr	r0, [pc, #88]	; (8000e98 <receivePacket+0xb0>)
 8000e40:	f002 fcbe 	bl	80037c0 <HAL_SPI_Receive>
 8000e44:	e018      	b.n	8000e78 <receivePacket+0x90>
	}else{
		HAL_SPI_Receive(BNO_SPI, shtpData, MAX_PACKET_SIZE, 200);
 8000e46:	23c8      	movs	r3, #200	; 0xc8
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	4914      	ldr	r1, [pc, #80]	; (8000e9c <receivePacket+0xb4>)
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <receivePacket+0xb0>)
 8000e4e:	f002 fcb7 	bl	80037c0 <HAL_SPI_Receive>

		uint16_t data_left = dataLength - MAX_PACKET_SIZE;
 8000e52:	897b      	ldrh	r3, [r7, #10]
 8000e54:	3b80      	subs	r3, #128	; 0x80
 8000e56:	813b      	strh	r3, [r7, #8]
		uint8_t tmp_buff;
		for(int i=0; i < data_left; i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e008      	b.n	8000e70 <receivePacket+0x88>
			HAL_SPI_Receive(BNO_SPI, &tmp_buff, 1, 100); /// ??
 8000e5e:	1df9      	adds	r1, r7, #7
 8000e60:	2364      	movs	r3, #100	; 0x64
 8000e62:	2201      	movs	r2, #1
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <receivePacket+0xb0>)
 8000e66:	f002 fcab 	bl	80037c0 <HAL_SPI_Receive>
		for(int i=0; i < data_left; i++){
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	893b      	ldrh	r3, [r7, #8]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf2      	blt.n	8000e5e <receivePacket+0x76>
		}

	}

	BNO_DESELECT;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <receivePacket+0xa8>)
 8000e80:	f001 fd60 	bl	8002944 <HAL_GPIO_WritePin>

	return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	20000104 	.word	0x20000104
 8000e98:	20000238 	.word	0x20000238
 8000e9c:	20000154 	.word	0x20000154

08000ea0 <sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
uint8_t sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	73fb      	strb	r3, [r7, #15]

	//Wait for bno080 to indicate it is available for communication
	if(waitForSPI(BNO_NOREAD) == 0)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff6e 	bl	8000d98 <waitForSPI>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <sendPacket+0x26>
	{
		return 0; //Data is not available
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e02b      	b.n	8000f1e <sendPacket+0x7e>
	}

	uint8_t bno_buffer[4] = {packetLength & 0xFF, packetLength >> 8, channelNumber, sequenceNumber[channelNumber]++};
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	723b      	strb	r3, [r7, #8]
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	727b      	strb	r3, [r7, #9]
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	72bb      	strb	r3, [r7, #10]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <sendPacket+0x88>)
 8000eda:	5cd2      	ldrb	r2, [r2, r3]
 8000edc:	1c51      	adds	r1, r2, #1
 8000ede:	b2c8      	uxtb	r0, r1
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <sendPacket+0x88>)
 8000ee2:	54c8      	strb	r0, [r1, r3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	72fb      	strb	r3, [r7, #11]

	BNO_SELECT;
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <sendPacket+0x8c>)
 8000ef0:	f001 fd28 	bl	8002944 <HAL_GPIO_WritePin>
	//Send the 4 byte packet header
	HAL_SPI_Transmit(BNO_SPI, bno_buffer, 4, 200);
 8000ef4:	f107 0108 	add.w	r1, r7, #8
 8000ef8:	23c8      	movs	r3, #200	; 0xc8
 8000efa:	2204      	movs	r2, #4
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <sendPacket+0x90>)
 8000efe:	f002 fb2b 	bl	8003558 <HAL_SPI_Transmit>
	//Send the user's data packet
	HAL_SPI_Transmit(BNO_SPI, shtpData, dataLength, 200);
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	23c8      	movs	r3, #200	; 0xc8
 8000f08:	490a      	ldr	r1, [pc, #40]	; (8000f34 <sendPacket+0x94>)
 8000f0a:	4809      	ldr	r0, [pc, #36]	; (8000f30 <sendPacket+0x90>)
 8000f0c:	f002 fb24 	bl	8003558 <HAL_SPI_Transmit>

	BNO_DESELECT;
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <sendPacket+0x8c>)
 8000f18:	f001 fd14 	bl	8002944 <HAL_GPIO_WritePin>
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000a0 	.word	0x200000a0
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	20000238 	.word	0x20000238
 8000f34:	20000154 	.word	0x20000154

08000f38 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BNO_INT_PIN_F){
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f48:	d12f      	bne.n	8000faa <HAL_GPIO_EXTI_Callback+0x72>
		bnoIntFl = 1;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]

		// Read data constantly after each interrupt
		if(constantRead)
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d027      	beq.n	8000faa <HAL_GPIO_EXTI_Callback+0x72>
		{
			receivePacket();
 8000f5a:	f7ff ff45 	bl	8000de8 <receivePacket>
			q[0] = bno080_getQuatI();
 8000f5e:	f7ff fead 	bl	8000cbc <bno080_getQuatI>
 8000f62:	eef0 7a40 	vmov.f32	s15, s0
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x84>)
 8000f68:	edc3 7a00 	vstr	s15, [r3]
			q[1] = bno080_getQuatJ();
 8000f6c:	f7ff febc 	bl	8000ce8 <bno080_getQuatJ>
 8000f70:	eef0 7a40 	vmov.f32	s15, s0
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x84>)
 8000f76:	edc3 7a01 	vstr	s15, [r3, #4]
			q[2] = bno080_getQuatK();
 8000f7a:	f7ff fecb 	bl	8000d14 <bno080_getQuatK>
 8000f7e:	eef0 7a40 	vmov.f32	s15, s0
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x84>)
 8000f84:	edc3 7a02 	vstr	s15, [r3, #8]
			q[3] = bno080_getQuatReal();
 8000f88:	f7ff feda 	bl	8000d40 <bno080_getQuatReal>
 8000f8c:	eef0 7a40 	vmov.f32	s15, s0
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x84>)
 8000f92:	edc3 7a03 	vstr	s15, [r3, #12]
			quatRadianAccuracy = bno080_getQuatRadianAccuracy();
 8000f96:	f7ff fee9 	bl	8000d6c <bno080_getQuatRadianAccuracy>
 8000f9a:	eef0 7a40 	vmov.f32	s15, s0
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fa0:	edc3 7a00 	vstr	s15, [r3]

			Quaternion_Update(&q[0]);
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x84>)
 8000fa6:	f7ff fc9b 	bl	80008e0 <Quaternion_Update>
		}

	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000b0 	.word	0x200000b0
 8000fb8:	200000b1 	.word	0x200000b1
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	2000010c 	.word	0x2000010c

08000fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_DMA_Init+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <MX_DMA_Init+0x88>)
 8000fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_DMA_Init+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_DMA_Init+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <MX_DMA_Init+0x88>)
 8000ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_DMA_Init+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	200d      	movs	r0, #13
 8001008:	f000 ff9b 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800100c:	200d      	movs	r0, #13
 800100e:	f000 ffb4 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200f      	movs	r0, #15
 8001018:	f000 ff93 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800101c:	200f      	movs	r0, #15
 800101e:	f000 ffac 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	2038      	movs	r0, #56	; 0x38
 8001028:	f000 ff8b 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f000 ffa4 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	203b      	movs	r0, #59	; 0x3b
 8001038:	f000 ff83 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800103c:	203b      	movs	r0, #59	; 0x3b
 800103e:	f000 ff9c 	bl	8001f7a <HAL_NVIC_EnableIRQ>

}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <_ZN5CGNSSC1Ev>:


class CGNSS
{
  public:
    CGNSS(){}
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_ZN8CSensorsC1Ev>:
};

class CSensors
{
public:
      CSensors() {}
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffed 	bl	8001050 <_ZN5CGNSSC1Ev>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_Z41__static_initialization_and_destruction_0ii>:
{
	mshort x;
	x.b[1] = b[1];
	x.b[0] = b[0];
	return(x.i);
}
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d107      	bne.n	80010a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001096:	4293      	cmp	r3, r2
 8001098:	d102      	bne.n	80010a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
CSensors gnss_sensor;
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800109c:	f7ff ffe3 	bl	8001066 <_ZN8CSensorsC1Ev>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000b4 	.word	0x200000b4

080010ac <_GLOBAL__sub_I_rxString>:
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff ffe3 	bl	8001080 <_Z41__static_initialization_and_destruction_0ii>
 80010ba:	bd80      	pop	{r7, pc}

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b73      	ldr	r3, [pc, #460]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a72      	ldr	r2, [pc, #456]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b6c      	ldr	r3, [pc, #432]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a6b      	ldr	r2, [pc, #428]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b69      	ldr	r3, [pc, #420]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a64      	ldr	r2, [pc, #400]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a5d      	ldr	r2, [pc, #372]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <MX_GPIO_Init+0x1e8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8001148:	4857      	ldr	r0, [pc, #348]	; (80012a8 <MX_GPIO_Init+0x1ec>)
 800114a:	f001 fbfb 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RPI_INT_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001154:	4855      	ldr	r0, [pc, #340]	; (80012ac <MX_GPIO_Init+0x1f0>)
 8001156:	f001 fbf5 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	4853      	ldr	r0, [pc, #332]	; (80012ac <MX_GPIO_Init+0x1f0>)
 8001160:	f001 fbf0 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116a:	4851      	ldr	r0, [pc, #324]	; (80012b0 <MX_GPIO_Init+0x1f4>)
 800116c:	f001 fbea 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	484e      	ldr	r0, [pc, #312]	; (80012b0 <MX_GPIO_Init+0x1f4>)
 8001178:	f001 fbe4 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_CS_Pin|BNO_RST_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2130      	movs	r1, #48	; 0x30
 8001180:	4849      	ldr	r0, [pc, #292]	; (80012a8 <MX_GPIO_Init+0x1ec>)
 8001182:	f001 fbdf 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 8001186:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4842      	ldr	r0, [pc, #264]	; (80012a8 <MX_GPIO_Init+0x1ec>)
 80011a0:	f001 fa1e 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	483a      	ldr	r0, [pc, #232]	; (80012a8 <MX_GPIO_Init+0x1ec>)
 80011be:	f001 fa0f 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPI_INT_Pin;
 80011c2:	2340      	movs	r3, #64	; 0x40
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RPI_INT_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4834      	ldr	r0, [pc, #208]	; (80012ac <MX_GPIO_Init+0x1f0>)
 80011da:	f001 fa01 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	482d      	ldr	r0, [pc, #180]	; (80012ac <MX_GPIO_Init+0x1f0>)
 80011f6:	f001 f9f3 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4826      	ldr	r0, [pc, #152]	; (80012ac <MX_GPIO_Init+0x1f0>)
 8001214:	f001 f9e4 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	481f      	ldr	r0, [pc, #124]	; (80012b0 <MX_GPIO_Init+0x1f4>)
 8001232:	f001 f9d5 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_GPIO_Init+0x1f8>)
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001240:	2302      	movs	r3, #2
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4819      	ldr	r0, [pc, #100]	; (80012b0 <MX_GPIO_Init+0x1f4>)
 800124c:	f001 f9c8 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4811      	ldr	r0, [pc, #68]	; (80012b0 <MX_GPIO_Init+0x1f4>)
 800126a:	f001 f9b9 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BNO_CS_Pin|BNO_RST_Pin;
 800126e:	2330      	movs	r3, #48	; 0x30
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x1ec>)
 8001286:	f001 f9ab 	bl	80025e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2028      	movs	r0, #40	; 0x28
 8001290:	f000 fe57 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001294:	2028      	movs	r0, #40	; 0x28
 8001296:	f000 fe70 	bl	8001f7a <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	10210000 	.word	0x10210000

080012b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_I2C1_Init+0x50>)
 80012be:	4a13      	ldr	r2, [pc, #76]	; (800130c <MX_I2C1_Init+0x54>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_I2C1_Init+0x50>)
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_I2C1_Init+0x58>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_I2C1_Init+0x50>)
 80012d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_I2C1_Init+0x50>)
 80012f6:	f001 fb57 	bl	80029a8 <HAL_I2C_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001300:	f000 f8d2 	bl	80014a8 <Error_Handler>
  }

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001e4 	.word	0x200001e4
 800130c:	40005400 	.word	0x40005400
 8001310:	000186a0 	.word	0x000186a0

08001314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_I2C_MspInit+0x84>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135a:	2301      	movs	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <HAL_I2C_MspInit+0x8c>)
 800136e:	f001 f937 	bl	80025e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_I2C_MspInit+0x88>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40005400 	.word	0x40005400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f000 fc3a 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f812 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f7ff fe84 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 80013b4:	f7ff fe06 	bl	8000fc4 <MX_DMA_Init>
  MX_SPI3_Init();
 80013b8:	f000 f8e6 	bl	8001588 <MX_SPI3_Init>
  MX_UART4_Init();
 80013bc:	f000 fb2e 	bl	8001a1c <MX_UART4_Init>
  MX_I2C1_Init();
 80013c0:	f7ff ff7a 	bl	80012b8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80013c4:	f000 f8aa 	bl	800151c <MX_SPI2_Init>
  MX_SPI1_Init();
 80013c8:	f000 f876 	bl	80014b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  bno080_Initialization();  // READ sensor in external interrupt  - void EXTI9_5_IRQHandler(void)
 80013cc:	f7ff fc16 	bl	8000bfc <bno080_Initialization>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <main+0x2c>
	...

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fa90 	bl	8005908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <SystemClock_Config+0xcc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <SystemClock_Config+0xcc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <SystemClock_Config+0xd0>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <SystemClock_Config+0xd0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001444:	2306      	movs	r3, #6
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001448:	23a8      	movs	r3, #168	; 0xa8
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fbdd 	bl	8002c18 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001464:	f000 f820 	bl	80014a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001474:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2105      	movs	r1, #5
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fe36 	bl	80030f8 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001492:	f000 f809 	bl	80014a8 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	; 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <MX_SPI1_Init+0x60>)
 80014c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI1_Init+0x5c>)
 80014fa:	220a      	movs	r2, #10
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_SPI1_Init+0x5c>)
 8001500:	f001 ffc6 	bl	8003490 <HAL_SPI_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800150a:	f7ff ffcd 	bl	80014a8 <Error_Handler>
  }

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200002e8 	.word	0x200002e8
 8001518:	40013000 	.word	0x40013000

0800151c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_SPI2_Init+0x64>)
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MX_SPI2_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI2_Init+0x64>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI2_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_SPI2_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI2_Init+0x64>)
 800153c:	2202      	movs	r2, #2
 800153e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI2_Init+0x64>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI2_Init+0x64>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI2_Init+0x64>)
 8001550:	2218      	movs	r2, #24
 8001552:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_SPI2_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI2_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_SPI2_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI2_Init+0x64>)
 8001568:	220a      	movs	r2, #10
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_SPI2_Init+0x64>)
 800156e:	f001 ff8f 	bl	8003490 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001578:	f7ff ff96 	bl	80014a8 <Error_Handler>
  }

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000238 	.word	0x20000238
 8001584:	40003800 	.word	0x40003800

08001588 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_SPI3_Init+0x64>)
 800158e:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <MX_SPI3_Init+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_SPI3_Init+0x64>)
 8001594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_SPI3_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_SPI3_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_SPI3_Init+0x64>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_SPI3_Init+0x64>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_SPI3_Init+0x64>)
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_SPI3_Init+0x64>)
 80015bc:	2218      	movs	r2, #24
 80015be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_SPI3_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_SPI3_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_SPI3_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_SPI3_Init+0x64>)
 80015d4:	220a      	movs	r2, #10
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_SPI3_Init+0x64>)
 80015da:	f001 ff59 	bl	8003490 <HAL_SPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80015e4:	f7ff ff60 	bl	80014a8 <Error_Handler>
  }

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000290 	.word	0x20000290
 80015f0:	40003c00 	.word	0x40003c00

080015f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4aa4      	ldr	r2, [pc, #656]	; (80018a4 <HAL_SPI_MspInit+0x2b0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f040 80a1 	bne.w	800175a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
 800161c:	4ba2      	ldr	r3, [pc, #648]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	4aa1      	ldr	r2, [pc, #644]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001626:	6453      	str	r3, [r2, #68]	; 0x44
 8001628:	4b9f      	ldr	r3, [pc, #636]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	4b9b      	ldr	r3, [pc, #620]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a9a      	ldr	r2, [pc, #616]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b98      	ldr	r3, [pc, #608]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001650:	2310      	movs	r3, #16
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001660:	2305      	movs	r3, #5
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001668:	4619      	mov	r1, r3
 800166a:	4890      	ldr	r0, [pc, #576]	; (80018ac <HAL_SPI_MspInit+0x2b8>)
 800166c:	f000 ffb8 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23e0      	movs	r3, #224	; 0xe0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001678:	2302      	movs	r3, #2
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001680:	2305      	movs	r3, #5
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001688:	4619      	mov	r1, r3
 800168a:	4888      	ldr	r0, [pc, #544]	; (80018ac <HAL_SPI_MspInit+0x2b8>)
 800168c:	f000 ffa8 	bl	80025e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001690:	4b87      	ldr	r3, [pc, #540]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 8001692:	4a88      	ldr	r2, [pc, #544]	; (80018b4 <HAL_SPI_MspInit+0x2c0>)
 8001694:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001696:	4b86      	ldr	r3, [pc, #536]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 8001698:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800169c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169e:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b82      	ldr	r3, [pc, #520]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b8:	4b7d      	ldr	r3, [pc, #500]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80016be:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016c4:	4b7a      	ldr	r3, [pc, #488]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ca:	4b79      	ldr	r3, [pc, #484]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80016d0:	4877      	ldr	r0, [pc, #476]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016d2:	f000 fc7b 	bl	8001fcc <HAL_DMA_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 80016dc:	f7ff fee4 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a73      	ldr	r2, [pc, #460]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80016e6:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_SPI_MspInit+0x2bc>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80016ec:	4b72      	ldr	r3, [pc, #456]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 80016ee:	4a73      	ldr	r2, [pc, #460]	; (80018bc <HAL_SPI_MspInit+0x2c8>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80016f2:	4b71      	ldr	r3, [pc, #452]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 80016f4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800170e:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001726:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800172c:	4862      	ldr	r0, [pc, #392]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 800172e:	f000 fc4d 	bl	8001fcc <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8001738:	f7ff feb6 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a5e      	ldr	r2, [pc, #376]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001740:	649a      	str	r2, [r3, #72]	; 0x48
 8001742:	4a5d      	ldr	r2, [pc, #372]	; (80018b8 <HAL_SPI_MspInit+0x2c4>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2023      	movs	r0, #35	; 0x23
 800174e:	f000 fbf8 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001752:	2023      	movs	r0, #35	; 0x23
 8001754:	f000 fc11 	bl	8001f7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001758:	e0a0      	b.n	800189c <HAL_SPI_MspInit+0x2a8>
  else if(spiHandle->Instance==SPI2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a58      	ldr	r2, [pc, #352]	; (80018c0 <HAL_SPI_MspInit+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d14b      	bne.n	80017fc <HAL_SPI_MspInit+0x208>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a4e      	ldr	r2, [pc, #312]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800176e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177c:	623b      	str	r3, [r7, #32]
 800177e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a47      	ldr	r2, [pc, #284]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	4b45      	ldr	r3, [pc, #276]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	4a40      	ldr	r2, [pc, #256]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
 80017ac:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b8:	230c      	movs	r3, #12
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c8:	2305      	movs	r3, #5
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d0:	4619      	mov	r1, r3
 80017d2:	483c      	ldr	r0, [pc, #240]	; (80018c4 <HAL_SPI_MspInit+0x2d0>)
 80017d4:	f000 ff04 	bl	80025e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ea:	2305      	movs	r3, #5
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	4834      	ldr	r0, [pc, #208]	; (80018c8 <HAL_SPI_MspInit+0x2d4>)
 80017f6:	f000 fef3 	bl	80025e0 <HAL_GPIO_Init>
}
 80017fa:	e04f      	b.n	800189c <HAL_SPI_MspInit+0x2a8>
  else if(spiHandle->Instance==SPI3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a32      	ldr	r2, [pc, #200]	; (80018cc <HAL_SPI_MspInit+0x2d8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d14a      	bne.n	800189c <HAL_SPI_MspInit+0x2a8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_SPI_MspInit+0x2b4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800185a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800186c:	2306      	movs	r3, #6
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4813      	ldr	r0, [pc, #76]	; (80018c4 <HAL_SPI_MspInit+0x2d0>)
 8001878:	f000 feb2 	bl	80025e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800187c:	2308      	movs	r3, #8
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188c:	2306      	movs	r3, #6
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001894:	4619      	mov	r1, r3
 8001896:	480c      	ldr	r0, [pc, #48]	; (80018c8 <HAL_SPI_MspInit+0x2d4>)
 8001898:	f000 fea2 	bl	80025e0 <HAL_GPIO_Init>
}
 800189c:	bf00      	nop
 800189e:	3740      	adds	r7, #64	; 0x40
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013000 	.word	0x40013000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	20000340 	.word	0x20000340
 80018b4:	40026410 	.word	0x40026410
 80018b8:	200003a0 	.word	0x200003a0
 80018bc:	40026458 	.word	0x40026458
 80018c0:	40003800 	.word	0x40003800
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40003c00 	.word	0x40003c00

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f9a6 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <DMA1_Stream2_IRQHandler+0x10>)
 8001982:	f000 fbf3 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000400 	.word	0x20000400

08001990 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <DMA1_Stream4_IRQHandler+0x10>)
 8001996:	f000 fbe9 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200004a0 	.word	0x200004a0

080019a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <SPI1_IRQHandler+0x10>)
 80019aa:	f002 f9b5 	bl	8003d18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002e8 	.word	0x200002e8

080019b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80019bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019c0:	f000 ffda 	bl	8002978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA2_Stream0_IRQHandler+0x10>)
 80019ce:	f000 fbcd 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000340 	.word	0x20000340

080019dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA2_Stream3_IRQHandler+0x10>)
 80019e2:	f000 fbc3 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200003a0 	.word	0x200003a0

080019f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <SystemInit+0x28>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <SystemInit+0x28>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SystemInit+0x28>)
 8001a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_UART4_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001a2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_UART4_Init+0x4c>)
 8001a54:	f002 fb90 	bl	8004178 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f7ff fd23 	bl	80014a8 <Error_Handler>
  }

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000460 	.word	0x20000460
 8001a6c:	40004c00 	.word	0x40004c00

08001a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a48      	ldr	r2, [pc, #288]	; (8001bb0 <HAL_UART_MspInit+0x140>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	f040 808a 	bne.w	8001ba8 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <HAL_UART_MspInit+0x144>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a45      	ldr	r2, [pc, #276]	; (8001bb4 <HAL_UART_MspInit+0x144>)
 8001a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_UART_MspInit+0x144>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_UART_MspInit+0x144>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <HAL_UART_MspInit+0x144>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <HAL_UART_MspInit+0x144>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001acc:	2303      	movs	r3, #3
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001adc:	2308      	movs	r3, #8
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4834      	ldr	r0, [pc, #208]	; (8001bb8 <HAL_UART_MspInit+0x148>)
 8001ae8:	f000 fd7a 	bl	80025e0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001aec:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001aee:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_UART_MspInit+0x150>)
 8001af0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001af2:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001af4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b20:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b2e:	4823      	ldr	r0, [pc, #140]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b30:	f000 fa4c 	bl	8001fcc <HAL_DMA_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b3a:	f7ff fcb5 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34
 8001b44:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <HAL_UART_MspInit+0x14c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_UART_MspInit+0x158>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001b8c:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001b8e:	f000 fa1d 	bl	8001fcc <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001b98:	f7ff fc86 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_UART_MspInit+0x154>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40004c00 	.word	0x40004c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	20000400 	.word	0x20000400
 8001bc0:	40026040 	.word	0x40026040
 8001bc4:	200004a0 	.word	0x200004a0
 8001bc8:	40026070 	.word	0x40026070

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bd2:	e003      	b.n	8001bdc <LoopCopyDataInit>

08001bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bda:	3104      	adds	r1, #4

08001bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bdc:	480b      	ldr	r0, [pc, #44]	; (8001c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001be4:	d3f6      	bcc.n	8001bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001be8:	e002      	b.n	8001bf0 <LoopFillZerobss>

08001bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bec:	f842 3b04 	str.w	r3, [r2], #4

08001bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bf4:	d3f9      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf6:	f7ff fefb 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f003 fe61 	bl	80058c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7ff fbd1 	bl	80013a4 <main>
  bx  lr    
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c08:	080059b0 	.word	0x080059b0
  ldr  r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c10:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001c14:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001c18:	20000504 	.word	0x20000504

08001c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC_IRQHandler>
	...

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f96f 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fe3c 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f995 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f94f 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	2000001c 	.word	0x2000001c
 8001cc0:	20000018 	.word	0x20000018

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000001c 	.word	0x2000001c
 8001ce8:	20000500 	.word	0x20000500

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000500 	.word	0x20000500

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_Delay+0x40>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000001c 	.word	0x2000001c

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db10      	blt.n	8001e1c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4909      	ldr	r1, [pc, #36]	; (8001e28 <__NVIC_DisableIRQ+0x40>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	3320      	adds	r3, #32
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e18:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff07 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff1c 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff0f 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff1f 	bl	8001de8 <__NVIC_DisableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ff94 	bl	8001ee8 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff fe88 	bl	8001cec <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e099      	b.n	800211c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	e00f      	b.n	800202a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200a:	f7ff fe6f 	bl	8001cec <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b05      	cmp	r3, #5
 8002016:	d908      	bls.n	800202a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e078      	b.n	800211c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e8      	bne.n	800200a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_DMA_Init+0x158>)
 8002044:	4013      	ands	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2b04      	cmp	r3, #4
 8002082:	d107      	bne.n	8002094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4313      	orrs	r3, r2
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f023 0307 	bic.w	r3, r3, #7
 80020aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d117      	bne.n	80020ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fa0b 	bl	80024ec <DMA_CheckFifoParam>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ea:	2301      	movs	r3, #1
 80020ec:	e016      	b.n	800211c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f9c2 	bl	8002480 <DMA_CalcBaseAndBitshift>
 80020fc:	4603      	mov	r3, r0
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	223f      	movs	r2, #63	; 0x3f
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	f010803f 	.word	0xf010803f

08002128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d004      	beq.n	8002146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00c      	b.n	8002160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2205      	movs	r2, #5
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002178:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_DMA_IRQHandler+0x258>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a92      	ldr	r2, [pc, #584]	; (80023c8 <HAL_DMA_IRQHandler+0x25c>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2208      	movs	r2, #8
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01a      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	2208      	movs	r2, #8
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2201      	movs	r2, #1
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d012      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0202 	orr.w	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	2204      	movs	r2, #4
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d012      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	2204      	movs	r2, #4
 8002232:	409a      	lsls	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f043 0204 	orr.w	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	2210      	movs	r2, #16
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d043      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	2210      	movs	r2, #16
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d018      	beq.n	80022ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d024      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e01f      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e016      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0208 	bic.w	r2, r2, #8
 80022ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	2220      	movs	r2, #32
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 808e 	beq.w	800240a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8086 	beq.w	800240a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2220      	movs	r2, #32
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b05      	cmp	r3, #5
 8002314:	d136      	bne.n	8002384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0216 	bic.w	r2, r2, #22
 8002324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_DMA_IRQHandler+0x1da>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0208 	bic.w	r2, r2, #8
 8002354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	223f      	movs	r2, #63	; 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	2b00      	cmp	r3, #0
 8002378:	d07d      	beq.n	8002476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
        }
        return;
 8002382:	e078      	b.n	8002476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01c      	beq.n	80023cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d030      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
 80023b0:	e02b      	b.n	800240a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d027      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e022      	b.n	800240a <HAL_DMA_IRQHandler+0x29e>
 80023c4:	20000014 	.word	0x20000014
 80023c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0210 	bic.w	r2, r2, #16
 80023e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	2b00      	cmp	r3, #0
 8002410:	d032      	beq.n	8002478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d022      	beq.n	8002464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	d307      	bcc.n	8002452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f2      	bne.n	8002436 <HAL_DMA_IRQHandler+0x2ca>
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002452:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
 8002474:	e000      	b.n	8002478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002476:	bf00      	nop
    }
  }
}
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop

08002480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3b10      	subs	r3, #16
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <DMA_CalcBaseAndBitshift+0x68>)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d909      	bls.n	80024c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
 80024c0:	e007      	b.n	80024d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	aaaaaaab 	.word	0xaaaaaaab
 80024e8:	08005948 	.word	0x08005948

080024ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11f      	bne.n	8002546 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d855      	bhi.n	80025b8 <DMA_CheckFifoParam+0xcc>
 800250c:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <DMA_CheckFifoParam+0x28>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002525 	.word	0x08002525
 8002518:	08002537 	.word	0x08002537
 800251c:	08002525 	.word	0x08002525
 8002520:	080025b9 	.word	0x080025b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d045      	beq.n	80025bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002534:	e042      	b.n	80025bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800253e:	d13f      	bne.n	80025c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e03c      	b.n	80025c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254e:	d121      	bne.n	8002594 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d836      	bhi.n	80025c4 <DMA_CheckFifoParam+0xd8>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <DMA_CheckFifoParam+0x70>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002573 	.word	0x08002573
 8002564:	0800256d 	.word	0x0800256d
 8002568:	08002585 	.word	0x08002585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      break;
 8002570:	e02f      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d024      	beq.n	80025c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002582:	e021      	b.n	80025c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800258c:	d11e      	bne.n	80025cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002592:	e01b      	b.n	80025cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d902      	bls.n	80025a0 <DMA_CheckFifoParam+0xb4>
 800259a:	2b03      	cmp	r3, #3
 800259c:	d003      	beq.n	80025a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800259e:	e018      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e015      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00e      	beq.n	80025d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      break;
 80025b6:	e00b      	b.n	80025d0 <DMA_CheckFifoParam+0xe4>
      break;
 80025b8:	bf00      	nop
 80025ba:	e00a      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025bc:	bf00      	nop
 80025be:	e008      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025c0:	bf00      	nop
 80025c2:	e006      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025c4:	bf00      	nop
 80025c6:	e004      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025c8:	bf00      	nop
 80025ca:	e002      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025d0:	bf00      	nop
    }
  } 
  
  return status; 
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e16b      	b.n	80028d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 815a 	bne.w	80028ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d00b      	beq.n	800263a <HAL_GPIO_Init+0x5a>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800262e:	2b11      	cmp	r3, #17
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b12      	cmp	r3, #18
 8002638:	d130      	bne.n	800269c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 0201 	and.w	r2, r3, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0xfc>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80b4 	beq.w	80028ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <HAL_GPIO_Init+0x308>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a5e      	ldr	r2, [pc, #376]	; (80028e8 <HAL_GPIO_Init+0x308>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <HAL_GPIO_Init+0x308>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a5a      	ldr	r2, [pc, #360]	; (80028ec <HAL_GPIO_Init+0x30c>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a51      	ldr	r2, [pc, #324]	; (80028f0 <HAL_GPIO_Init+0x310>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d02b      	beq.n	8002806 <HAL_GPIO_Init+0x226>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <HAL_GPIO_Init+0x314>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d025      	beq.n	8002802 <HAL_GPIO_Init+0x222>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4f      	ldr	r2, [pc, #316]	; (80028f8 <HAL_GPIO_Init+0x318>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01f      	beq.n	80027fe <HAL_GPIO_Init+0x21e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4e      	ldr	r2, [pc, #312]	; (80028fc <HAL_GPIO_Init+0x31c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d019      	beq.n	80027fa <HAL_GPIO_Init+0x21a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_GPIO_Init+0x320>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_GPIO_Init+0x216>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4c      	ldr	r2, [pc, #304]	; (8002904 <HAL_GPIO_Init+0x324>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00d      	beq.n	80027f2 <HAL_GPIO_Init+0x212>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4b      	ldr	r2, [pc, #300]	; (8002908 <HAL_GPIO_Init+0x328>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <HAL_GPIO_Init+0x20e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4a      	ldr	r2, [pc, #296]	; (800290c <HAL_GPIO_Init+0x32c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_GPIO_Init+0x20a>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e00e      	b.n	8002808 <HAL_GPIO_Init+0x228>
 80027ea:	2308      	movs	r3, #8
 80027ec:	e00c      	b.n	8002808 <HAL_GPIO_Init+0x228>
 80027ee:	2306      	movs	r3, #6
 80027f0:	e00a      	b.n	8002808 <HAL_GPIO_Init+0x228>
 80027f2:	2305      	movs	r3, #5
 80027f4:	e008      	b.n	8002808 <HAL_GPIO_Init+0x228>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x228>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e004      	b.n	8002808 <HAL_GPIO_Init+0x228>
 80027fe:	2302      	movs	r3, #2
 8002800:	e002      	b.n	8002808 <HAL_GPIO_Init+0x228>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_GPIO_Init+0x228>
 8002806:	2300      	movs	r3, #0
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f002 0203 	and.w	r2, r2, #3
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	4093      	lsls	r3, r2
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002818:	4934      	ldr	r1, [pc, #208]	; (80028ec <HAL_GPIO_Init+0x30c>)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002826:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <HAL_GPIO_Init+0x330>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284a:	4a31      	ldr	r2, [pc, #196]	; (8002910 <HAL_GPIO_Init+0x330>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <HAL_GPIO_Init+0x330>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <HAL_GPIO_Init+0x330>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_GPIO_Init+0x330>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289e:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_GPIO_Init+0x330>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <HAL_GPIO_Init+0x330>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c8:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_GPIO_Init+0x330>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	f67f ae90 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028dc:	bf00      	nop
 80028de:	3724      	adds	r7, #36	; 0x24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40021400 	.word	0x40021400
 8002908:	40021800 	.word	0x40021800
 800290c:	40021c00 	.word	0x40021c00
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e001      	b.n	8002936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002936:	7bfb      	ldrb	r3, [r7, #15]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002960:	e003      	b.n	800296a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	041a      	lsls	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe face 	bl	8000f38 <HAL_GPIO_EXTI_Callback>
  }
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e11f      	b.n	8002bfa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe fca0 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f000 fd18 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 8002a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a7b      	ldr	r2, [pc, #492]	; (8002c04 <HAL_I2C_Init+0x25c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d807      	bhi.n	8002a2c <HAL_I2C_Init+0x84>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a7a      	ldr	r2, [pc, #488]	; (8002c08 <HAL_I2C_Init+0x260>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bf94      	ite	ls
 8002a24:	2301      	movls	r3, #1
 8002a26:	2300      	movhi	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e006      	b.n	8002a3a <HAL_I2C_Init+0x92>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a77      	ldr	r2, [pc, #476]	; (8002c0c <HAL_I2C_Init+0x264>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bf94      	ite	ls
 8002a34:	2301      	movls	r3, #1
 8002a36:	2300      	movhi	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0db      	b.n	8002bfa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <HAL_I2C_Init+0x268>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0c9b      	lsrs	r3, r3, #18
 8002a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a64      	ldr	r2, [pc, #400]	; (8002c04 <HAL_I2C_Init+0x25c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d802      	bhi.n	8002a7c <HAL_I2C_Init+0xd4>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	e009      	b.n	8002a90 <HAL_I2C_Init+0xe8>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_I2C_Init+0x26c>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	3301      	adds	r3, #1
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4956      	ldr	r1, [pc, #344]	; (8002c04 <HAL_I2C_Init+0x25c>)
 8002aac:	428b      	cmp	r3, r1
 8002aae:	d80d      	bhi.n	8002acc <HAL_I2C_Init+0x124>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e59      	subs	r1, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	bf38      	it	cc
 8002ac8:	2304      	movcc	r3, #4
 8002aca:	e04f      	b.n	8002b6c <HAL_I2C_Init+0x1c4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d111      	bne.n	8002af8 <HAL_I2C_Init+0x150>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e012      	b.n	8002b1e <HAL_I2C_Init+0x176>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Init+0x17e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e022      	b.n	8002b6c <HAL_I2C_Init+0x1c4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10e      	bne.n	8002b4c <HAL_I2C_Init+0x1a4>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1e58      	subs	r0, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	440b      	add	r3, r1
 8002b3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4a:	e00f      	b.n	8002b6c <HAL_I2C_Init+0x1c4>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	0099      	lsls	r1, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	6809      	ldr	r1, [r1, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6911      	ldr	r1, [r2, #16]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	000186a0 	.word	0x000186a0
 8002c08:	001e847f 	.word	0x001e847f
 8002c0c:	003d08ff 	.word	0x003d08ff
 8002c10:	431bde83 	.word	0x431bde83
 8002c14:	10624dd3 	.word	0x10624dd3

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e25b      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d075      	beq.n	8002d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c36:	4ba3      	ldr	r3, [pc, #652]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4ba0      	ldr	r3, [pc, #640]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b9d      	ldr	r3, [pc, #628]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b99      	ldr	r3, [pc, #612]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d157      	bne.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e236      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x74>
 8002c7e:	4b91      	ldr	r3, [pc, #580]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a90      	ldr	r2, [pc, #576]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b8b      	ldr	r3, [pc, #556]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a8a      	ldr	r2, [pc, #552]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b88      	ldr	r3, [pc, #544]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a87      	ldr	r2, [pc, #540]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xb0>
 8002cb0:	4b84      	ldr	r3, [pc, #528]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a83      	ldr	r2, [pc, #524]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b81      	ldr	r3, [pc, #516]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a80      	ldr	r2, [pc, #512]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7ff f80c 	bl	8001cec <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f808 	bl	8001cec <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1fb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fff8 	bl	8001cec <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fff4 	bl	8001cec <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1e7      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b6c      	ldr	r3, [pc, #432]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2e:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b5c      	ldr	r3, [pc, #368]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1bb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4952      	ldr	r1, [pc, #328]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e03a      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCC_OscConfig+0x2b0>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe ffad 	bl	8001cec <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe ffa9 	bl	8001cec <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e19c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4940      	ldr	r1, [pc, #256]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_OscConfig+0x2b0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe ff8c 	bl	8001cec <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe ff88 	bl	8001cec <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e17b      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d030      	beq.n	8002e64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe ff6c 	bl	8001cec <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe ff68 	bl	8001cec <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e15b      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x200>
 8002e36:	e015      	b.n	8002e64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe ff55 	bl	8001cec <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe ff51 	bl	8001cec <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e144      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a0 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7fe ff17 	bl	8001cec <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	e011      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2ce>
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	42470000 	.word	0x42470000
 8002ecc:	42470e80 	.word	0x42470e80
 8002ed0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed4:	f7fe ff0a 	bl	8001cec <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0fd      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	4b81      	ldr	r3, [pc, #516]	; (80030ec <HAL_RCC_OscConfig+0x4d4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	e01c      	b.n	8002f42 <HAL_RCC_OscConfig+0x32a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x312>
 8002f10:	4b77      	ldr	r3, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a76      	ldr	r2, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a73      	ldr	r2, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	e00b      	b.n	8002f42 <HAL_RCC_OscConfig+0x32a>
 8002f2a:	4b71      	ldr	r3, [pc, #452]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a70      	ldr	r2, [pc, #448]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	4b6e      	ldr	r3, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a6d      	ldr	r2, [pc, #436]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d015      	beq.n	8002f76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fecf 	bl	8001cec <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe fecb 	bl	8001cec <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0bc      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCC_OscConfig+0x33a>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fe feb9 	bl	8001cec <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe feb5 	bl	8001cec <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0a6      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b52      	ldr	r3, [pc, #328]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a51      	ldr	r2, [pc, #324]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8092 	beq.w	80030e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fbc:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d05c      	beq.n	8003082 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d141      	bne.n	8003054 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b48      	ldr	r3, [pc, #288]	; (80030f4 <HAL_RCC_OscConfig+0x4dc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fe89 	bl	8001cec <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fe85 	bl	8001cec <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e078      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	019b      	lsls	r3, r3, #6
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	4933      	ldr	r1, [pc, #204]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_RCC_OscConfig+0x4dc>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe fe5e 	bl	8001cec <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fe5a 	bl	8001cec <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e04d      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x41c>
 8003052:	e045      	b.n	80030e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_RCC_OscConfig+0x4dc>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fe fe47 	bl	8001cec <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003062:	f7fe fe43 	bl	8001cec <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e036      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x44a>
 8003080:	e02e      	b.n	80030e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e029      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_RCC_OscConfig+0x4d8>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d115      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10d      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40007000 	.word	0x40007000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	42470060 	.word	0x42470060

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0cc      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d90c      	bls.n	8003134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b65      	ldr	r3, [pc, #404]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b8      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800314c:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800316e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	494d      	ldr	r1, [pc, #308]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d044      	beq.n	8003218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d119      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e067      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d6:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4934      	ldr	r1, [pc, #208]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fd80 	bl	8001cec <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fe fd7c 	bl	8001cec <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e04f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 020c 	and.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	429a      	cmp	r2, r3
 8003216:	d1eb      	bne.n	80031f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d20c      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e032      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	490e      	ldr	r1, [pc, #56]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800327e:	f000 f821 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8003282:	4601      	mov	r1, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	fa21 f303 	lsr.w	r3, r1, r3
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fce0 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023c00 	.word	0x40023c00
 80032b4:	40023800 	.word	0x40023800
 80032b8:	08005930 	.word	0x08005930
 80032bc:	20000014 	.word	0x20000014
 80032c0:	20000018 	.word	0x20000018

080032c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032da:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_GetSysClockFreq+0x158>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d007      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x32>
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d008      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x38>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 808d 	bne.w	800340a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b4b      	ldr	r3, [pc, #300]	; (8003420 <HAL_RCC_GetSysClockFreq+0x15c>)
 80032f2:	60bb      	str	r3, [r7, #8]
       break;
 80032f4:	e08c      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <HAL_RCC_GetSysClockFreq+0x160>)
 80032f8:	60bb      	str	r3, [r7, #8]
      break;
 80032fa:	e089      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_GetSysClockFreq+0x158>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003304:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4b45      	ldr	r3, [pc, #276]	; (800341c <HAL_RCC_GetSysClockFreq+0x158>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d023      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_RCC_GetSysClockFreq+0x158>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	ea03 0501 	and.w	r5, r3, r1
 8003328:	ea04 0602 	and.w	r6, r4, r2
 800332c:	4a3d      	ldr	r2, [pc, #244]	; (8003424 <HAL_RCC_GetSysClockFreq+0x160>)
 800332e:	fb02 f106 	mul.w	r1, r2, r6
 8003332:	2200      	movs	r2, #0
 8003334:	fb02 f205 	mul.w	r2, r2, r5
 8003338:	440a      	add	r2, r1
 800333a:	493a      	ldr	r1, [pc, #232]	; (8003424 <HAL_RCC_GetSysClockFreq+0x160>)
 800333c:	fba5 0101 	umull	r0, r1, r5, r1
 8003340:	1853      	adds	r3, r2, r1
 8003342:	4619      	mov	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f04f 0400 	mov.w	r4, #0
 800334a:	461a      	mov	r2, r3
 800334c:	4623      	mov	r3, r4
 800334e:	f7fd f947 	bl	80005e0 <__aeabi_uldivmod>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e049      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_RCC_GetSysClockFreq+0x158>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	f04f 0400 	mov.w	r4, #0
 8003364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	ea03 0501 	and.w	r5, r3, r1
 8003370:	ea04 0602 	and.w	r6, r4, r2
 8003374:	4629      	mov	r1, r5
 8003376:	4632      	mov	r2, r6
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	f04f 0400 	mov.w	r4, #0
 8003380:	0154      	lsls	r4, r2, #5
 8003382:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003386:	014b      	lsls	r3, r1, #5
 8003388:	4619      	mov	r1, r3
 800338a:	4622      	mov	r2, r4
 800338c:	1b49      	subs	r1, r1, r5
 800338e:	eb62 0206 	sbc.w	r2, r2, r6
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	0194      	lsls	r4, r2, #6
 800339c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033a0:	018b      	lsls	r3, r1, #6
 80033a2:	1a5b      	subs	r3, r3, r1
 80033a4:	eb64 0402 	sbc.w	r4, r4, r2
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	00e2      	lsls	r2, r4, #3
 80033b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033b6:	00d9      	lsls	r1, r3, #3
 80033b8:	460b      	mov	r3, r1
 80033ba:	4614      	mov	r4, r2
 80033bc:	195b      	adds	r3, r3, r5
 80033be:	eb44 0406 	adc.w	r4, r4, r6
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	02a2      	lsls	r2, r4, #10
 80033cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033d0:	0299      	lsls	r1, r3, #10
 80033d2:	460b      	mov	r3, r1
 80033d4:	4614      	mov	r4, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	4621      	mov	r1, r4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f04f 0400 	mov.w	r4, #0
 80033e0:	461a      	mov	r2, r3
 80033e2:	4623      	mov	r3, r4
 80033e4:	f7fd f8fc 	bl	80005e0 <__aeabi_uldivmod>
 80033e8:	4603      	mov	r3, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_GetSysClockFreq+0x158>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	3301      	adds	r3, #1
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	60bb      	str	r3, [r7, #8]
      break;
 8003408:	e002      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetSysClockFreq+0x15c>)
 800340c:	60bb      	str	r3, [r7, #8]
      break;
 800340e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003410:	68bb      	ldr	r3, [r7, #8]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	00b71b00 	.word	0x00b71b00

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_RCC_GetHCLKFreq+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000014 	.word	0x20000014

08003440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003444:	f7ff fff0 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003448:	4601      	mov	r1, r0
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4a03      	ldr	r2, [pc, #12]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	08005940 	.word	0x08005940

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800346c:	f7ff ffdc 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4a03      	ldr	r2, [pc, #12]	; (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08005940 	.word	0x08005940

08003490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e056      	b.n	8003550 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fe f899 	bl	80015f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	ea42 0103 	orr.w	r1, r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	0c1b      	lsrs	r3, r3, #16
 8003520:	f003 0104 	and.w	r1, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_SPI_Transmit+0x22>
 8003576:	2302      	movs	r3, #2
 8003578:	e11e      	b.n	80037b8 <HAL_SPI_Transmit+0x260>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003582:	f7fe fbb3 	bl	8001cec <HAL_GetTick>
 8003586:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d002      	beq.n	800359e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003598:	2302      	movs	r3, #2
 800359a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800359c:	e103      	b.n	80037a6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SPI_Transmit+0x52>
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035ae:	e0fa      	b.n	80037a6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2203      	movs	r2, #3
 80035b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f6:	d107      	bne.n	8003608 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003606:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d007      	beq.n	8003626 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d14b      	bne.n	80036c8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_SPI_Transmit+0xe6>
 8003638:	8afb      	ldrh	r3, [r7, #22]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d13e      	bne.n	80036bc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	1c9a      	adds	r2, r3, #2
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003662:	e02b      	b.n	80036bc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d112      	bne.n	8003698 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	881a      	ldrh	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	86da      	strh	r2, [r3, #54]	; 0x36
 8003696:	e011      	b.n	80036bc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003698:	f7fe fb28 	bl	8001cec <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d803      	bhi.n	80036b0 <HAL_SPI_Transmit+0x158>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Transmit+0x15e>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036ba:	e074      	b.n	80037a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ce      	bne.n	8003664 <HAL_SPI_Transmit+0x10c>
 80036c6:	e04c      	b.n	8003762 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_Transmit+0x17e>
 80036d0:	8afb      	ldrh	r3, [r7, #22]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d140      	bne.n	8003758 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036fc:	e02c      	b.n	8003758 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d113      	bne.n	8003734 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	86da      	strh	r2, [r3, #54]	; 0x36
 8003732:	e011      	b.n	8003758 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003734:	f7fe fada 	bl	8001cec <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d803      	bhi.n	800374c <HAL_SPI_Transmit+0x1f4>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d102      	bne.n	8003752 <HAL_SPI_Transmit+0x1fa>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003756:	e026      	b.n	80037a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cd      	bne.n	80036fe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fcc4 	bl	80040f4 <SPI_EndRxTxTransaction>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e000      	b.n	80037a6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80037a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037dc:	d112      	bne.n	8003804 <HAL_SPI_Receive+0x44>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10e      	bne.n	8003804 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2204      	movs	r2, #4
 80037ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f8e9 	bl	80039d2 <HAL_SPI_TransmitReceive>
 8003800:	4603      	mov	r3, r0
 8003802:	e0e2      	b.n	80039ca <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Receive+0x52>
 800380e:	2302      	movs	r3, #2
 8003810:	e0db      	b.n	80039ca <HAL_SPI_Receive+0x20a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800381a:	f7fe fa67 	bl	8001cec <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800382c:	2302      	movs	r3, #2
 800382e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003830:	e0c2      	b.n	80039b8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_SPI_Receive+0x7e>
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003842:	e0b9      	b.n	80039b8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2204      	movs	r2, #4
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388a:	d107      	bne.n	800389c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d007      	beq.n	80038ba <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d162      	bne.n	8003988 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038c2:	e02e      	b.n	8003922 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d115      	bne.n	80038fe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f103 020c 	add.w	r2, r3, #12
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038fc:	e011      	b.n	8003922 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038fe:	f7fe f9f5 	bl	8001cec <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d803      	bhi.n	8003916 <HAL_SPI_Receive+0x156>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d102      	bne.n	800391c <HAL_SPI_Receive+0x15c>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003920:	e04a      	b.n	80039b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1cb      	bne.n	80038c4 <HAL_SPI_Receive+0x104>
 800392c:	e031      	b.n	8003992 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d113      	bne.n	8003964 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	b292      	uxth	r2, r2
 8003948:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003962:	e011      	b.n	8003988 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003964:	f7fe f9c2 	bl	8001cec <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d803      	bhi.n	800397c <HAL_SPI_Receive+0x1bc>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d102      	bne.n	8003982 <HAL_SPI_Receive+0x1c2>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003986:	e017      	b.n	80039b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1cd      	bne.n	800392e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fb46 	bl	8004028 <SPI_EndRxTransaction>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
 80039b4:	e000      	b.n	80039b8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80039b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08c      	sub	sp, #48	; 0x30
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039e0:	2301      	movs	r3, #1
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x26>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e18a      	b.n	8003d0e <HAL_SPI_TransmitReceive+0x33c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a00:	f7fe f974 	bl	8001cec <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00f      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x70>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a28:	d107      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x68>
 8003a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d003      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a40:	e15b      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x82>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_TransmitReceive+0x82>
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a5a:	e14e      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d003      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	887a      	ldrh	r2, [r7, #2]
 8003a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d007      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	d178      	bne.n	8003bc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x10a>
 8003ad6:	8b7b      	ldrh	r3, [r7, #26]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d166      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	881a      	ldrh	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b00:	e053      	b.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d11b      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d113      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d119      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x1b8>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d014      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b86:	2301      	movs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b8a:	f7fe f8af 	bl	8001cec <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d807      	bhi.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d003      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ba8:	e0a7      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1a6      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x130>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1a1      	bne.n	8003b02 <HAL_SPI_TransmitReceive+0x130>
 8003bbe:	e07c      	b.n	8003cba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x1fc>
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d16b      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	e057      	b.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11c      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d017      	beq.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d114      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d119      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x2ae>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c80:	f7fe f834 	bl	8001cec <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d803      	bhi.n	8003c98 <HAL_SPI_TransmitReceive+0x2c6>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x2cc>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ca4:	e029      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1a2      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x224>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d19d      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fa18 	bl	80040f4 <SPI_EndRxTxTransaction>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cd6:	e010      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	e000      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3730      	adds	r7, #48	; 0x30
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10f      	bne.n	8003d5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
    return;
 8003d5a:	e0d8      	b.n	8003f0e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_SPI_IRQHandler+0x66>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	09db      	lsrs	r3, r3, #7
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
    return;
 8003d7c:	e0c7      	b.n	8003f0e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_SPI_IRQHandler+0x8c>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80b5 	beq.w	8003f0e <HAL_SPI_IRQHandler+0x1f6>
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80ae 	beq.w	8003f0e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d023      	beq.n	8003e06 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d011      	beq.n	8003dee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f043 0204 	orr.w	r2, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	e00b      	b.n	8003e06 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	693b      	ldr	r3, [r7, #16]
        return;
 8003e04:	e083      	b.n	8003f0e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d014      	beq.n	8003e3c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00c      	beq.n	8003e62 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0208 	orr.w	r2, r3, #8
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d050      	beq.n	8003f0c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e78:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_SPI_IRQHandler+0x17e>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d034      	beq.n	8003f00 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0203 	bic.w	r2, r2, #3
 8003ea4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d011      	beq.n	8003ed2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_SPI_IRQHandler+0x1fc>)
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe f934 	bl	8002128 <HAL_DMA_Abort_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <HAL_SPI_IRQHandler+0x1fc>)
 8003ee0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe f91e 	bl	8002128 <HAL_DMA_Abort_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003efe:	e003      	b.n	8003f08 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f809 	bl	8003f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f06:	e000      	b.n	8003f0a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003f08:	bf00      	nop
    return;
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
  }
}
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	08003f2d 	.word	0x08003f2d

08003f18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff ffe6 	bl	8003f18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f64:	e04c      	b.n	8004000 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d048      	beq.n	8004000 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f6e:	f7fd febd 	bl	8001cec <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d902      	bls.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d13d      	bne.n	8004000 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9c:	d111      	bne.n	8003fc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa6:	d004      	beq.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d107      	bne.n	8003fc2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fca:	d10f      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e00f      	b.n	8004020 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	429a      	cmp	r2, r3
 800401c:	d1a3      	bne.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403c:	d111      	bne.n	8004062 <SPI_EndRxTransaction+0x3a>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d004      	beq.n	8004052 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d107      	bne.n	8004062 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800406a:	d12a      	bne.n	80040c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d012      	beq.n	800409c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2200      	movs	r2, #0
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff ff67 	bl	8003f54 <SPI_WaitFlagStateUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02d      	beq.n	80040e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e026      	b.n	80040ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2101      	movs	r1, #1
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff54 	bl	8003f54 <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01a      	beq.n	80040e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e013      	b.n	80040ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2101      	movs	r1, #1
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff ff41 	bl	8003f54 <SPI_WaitFlagStateUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e000      	b.n	80040ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <SPI_EndRxTxTransaction+0x7c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <SPI_EndRxTxTransaction+0x80>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0d5b      	lsrs	r3, r3, #21
 800410c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411e:	d112      	bne.n	8004146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff12 	bl	8003f54 <SPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3b01      	subs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d0f2      	beq.n	8004146 <SPI_EndRxTxTransaction+0x52>
 8004160:	e000      	b.n	8004164 <SPI_EndRxTxTransaction+0x70>
        break;
 8004162:	bf00      	nop
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000014 	.word	0x20000014
 8004174:	165e9f81 	.word	0x165e9f81

08004178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e03f      	b.n	800420a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd fc66 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	; 0x24
 80041a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f829 	bl	8004214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004256:	f023 030c 	bic.w	r3, r3, #12
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	430b      	orrs	r3, r1
 8004262:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004282:	f040 818b 	bne.w	800459c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4ac1      	ldr	r2, [pc, #772]	; (8004590 <UART_SetConfig+0x37c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d005      	beq.n	800429c <UART_SetConfig+0x88>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4abf      	ldr	r2, [pc, #764]	; (8004594 <UART_SetConfig+0x380>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f040 80bd 	bne.w	8004416 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7ff f8e4 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80042a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	461d      	mov	r5, r3
 80042a6:	f04f 0600 	mov.w	r6, #0
 80042aa:	46a8      	mov	r8, r5
 80042ac:	46b1      	mov	r9, r6
 80042ae:	eb18 0308 	adds.w	r3, r8, r8
 80042b2:	eb49 0409 	adc.w	r4, r9, r9
 80042b6:	4698      	mov	r8, r3
 80042b8:	46a1      	mov	r9, r4
 80042ba:	eb18 0805 	adds.w	r8, r8, r5
 80042be:	eb49 0906 	adc.w	r9, r9, r6
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042d6:	4688      	mov	r8, r1
 80042d8:	4691      	mov	r9, r2
 80042da:	eb18 0005 	adds.w	r0, r8, r5
 80042de:	eb49 0106 	adc.w	r1, r9, r6
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	461d      	mov	r5, r3
 80042e8:	f04f 0600 	mov.w	r6, #0
 80042ec:	196b      	adds	r3, r5, r5
 80042ee:	eb46 0406 	adc.w	r4, r6, r6
 80042f2:	461a      	mov	r2, r3
 80042f4:	4623      	mov	r3, r4
 80042f6:	f7fc f973 	bl	80005e0 <__aeabi_uldivmod>
 80042fa:	4603      	mov	r3, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	461a      	mov	r2, r3
 8004300:	4ba5      	ldr	r3, [pc, #660]	; (8004598 <UART_SetConfig+0x384>)
 8004302:	fba3 2302 	umull	r2, r3, r3, r2
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	461d      	mov	r5, r3
 8004310:	f04f 0600 	mov.w	r6, #0
 8004314:	46a9      	mov	r9, r5
 8004316:	46b2      	mov	sl, r6
 8004318:	eb19 0309 	adds.w	r3, r9, r9
 800431c:	eb4a 040a 	adc.w	r4, sl, sl
 8004320:	4699      	mov	r9, r3
 8004322:	46a2      	mov	sl, r4
 8004324:	eb19 0905 	adds.w	r9, r9, r5
 8004328:	eb4a 0a06 	adc.w	sl, sl, r6
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004340:	4689      	mov	r9, r1
 8004342:	4692      	mov	sl, r2
 8004344:	eb19 0005 	adds.w	r0, r9, r5
 8004348:	eb4a 0106 	adc.w	r1, sl, r6
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	461d      	mov	r5, r3
 8004352:	f04f 0600 	mov.w	r6, #0
 8004356:	196b      	adds	r3, r5, r5
 8004358:	eb46 0406 	adc.w	r4, r6, r6
 800435c:	461a      	mov	r2, r3
 800435e:	4623      	mov	r3, r4
 8004360:	f7fc f93e 	bl	80005e0 <__aeabi_uldivmod>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	461a      	mov	r2, r3
 800436a:	4b8b      	ldr	r3, [pc, #556]	; (8004598 <UART_SetConfig+0x384>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a86      	ldr	r2, [pc, #536]	; (8004598 <UART_SetConfig+0x384>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800438c:	4498      	add	r8, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	461d      	mov	r5, r3
 8004392:	f04f 0600 	mov.w	r6, #0
 8004396:	46a9      	mov	r9, r5
 8004398:	46b2      	mov	sl, r6
 800439a:	eb19 0309 	adds.w	r3, r9, r9
 800439e:	eb4a 040a 	adc.w	r4, sl, sl
 80043a2:	4699      	mov	r9, r3
 80043a4:	46a2      	mov	sl, r4
 80043a6:	eb19 0905 	adds.w	r9, r9, r5
 80043aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c2:	4689      	mov	r9, r1
 80043c4:	4692      	mov	sl, r2
 80043c6:	eb19 0005 	adds.w	r0, r9, r5
 80043ca:	eb4a 0106 	adc.w	r1, sl, r6
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	461d      	mov	r5, r3
 80043d4:	f04f 0600 	mov.w	r6, #0
 80043d8:	196b      	adds	r3, r5, r5
 80043da:	eb46 0406 	adc.w	r4, r6, r6
 80043de:	461a      	mov	r2, r3
 80043e0:	4623      	mov	r3, r4
 80043e2:	f7fc f8fd 	bl	80005e0 <__aeabi_uldivmod>
 80043e6:	4603      	mov	r3, r0
 80043e8:	460c      	mov	r4, r1
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <UART_SetConfig+0x384>)
 80043ee:	fba3 1302 	umull	r1, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2164      	movs	r1, #100	; 0x64
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	3332      	adds	r3, #50	; 0x32
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <UART_SetConfig+0x384>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 0207 	and.w	r2, r3, #7
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4442      	add	r2, r8
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	e26f      	b.n	80048f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004416:	f7ff f813 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 800441a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	461d      	mov	r5, r3
 8004420:	f04f 0600 	mov.w	r6, #0
 8004424:	46a8      	mov	r8, r5
 8004426:	46b1      	mov	r9, r6
 8004428:	eb18 0308 	adds.w	r3, r8, r8
 800442c:	eb49 0409 	adc.w	r4, r9, r9
 8004430:	4698      	mov	r8, r3
 8004432:	46a1      	mov	r9, r4
 8004434:	eb18 0805 	adds.w	r8, r8, r5
 8004438:	eb49 0906 	adc.w	r9, r9, r6
 800443c:	f04f 0100 	mov.w	r1, #0
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004448:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800444c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004450:	4688      	mov	r8, r1
 8004452:	4691      	mov	r9, r2
 8004454:	eb18 0005 	adds.w	r0, r8, r5
 8004458:	eb49 0106 	adc.w	r1, r9, r6
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	461d      	mov	r5, r3
 8004462:	f04f 0600 	mov.w	r6, #0
 8004466:	196b      	adds	r3, r5, r5
 8004468:	eb46 0406 	adc.w	r4, r6, r6
 800446c:	461a      	mov	r2, r3
 800446e:	4623      	mov	r3, r4
 8004470:	f7fc f8b6 	bl	80005e0 <__aeabi_uldivmod>
 8004474:	4603      	mov	r3, r0
 8004476:	460c      	mov	r4, r1
 8004478:	461a      	mov	r2, r3
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <UART_SetConfig+0x384>)
 800447c:	fba3 2302 	umull	r2, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	461d      	mov	r5, r3
 800448a:	f04f 0600 	mov.w	r6, #0
 800448e:	46a9      	mov	r9, r5
 8004490:	46b2      	mov	sl, r6
 8004492:	eb19 0309 	adds.w	r3, r9, r9
 8004496:	eb4a 040a 	adc.w	r4, sl, sl
 800449a:	4699      	mov	r9, r3
 800449c:	46a2      	mov	sl, r4
 800449e:	eb19 0905 	adds.w	r9, r9, r5
 80044a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044ba:	4689      	mov	r9, r1
 80044bc:	4692      	mov	sl, r2
 80044be:	eb19 0005 	adds.w	r0, r9, r5
 80044c2:	eb4a 0106 	adc.w	r1, sl, r6
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	461d      	mov	r5, r3
 80044cc:	f04f 0600 	mov.w	r6, #0
 80044d0:	196b      	adds	r3, r5, r5
 80044d2:	eb46 0406 	adc.w	r4, r6, r6
 80044d6:	461a      	mov	r2, r3
 80044d8:	4623      	mov	r3, r4
 80044da:	f7fc f881 	bl	80005e0 <__aeabi_uldivmod>
 80044de:	4603      	mov	r3, r0
 80044e0:	460c      	mov	r4, r1
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <UART_SetConfig+0x384>)
 80044e6:	fba3 1302 	umull	r1, r3, r3, r2
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2164      	movs	r1, #100	; 0x64
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	3332      	adds	r3, #50	; 0x32
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <UART_SetConfig+0x384>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004506:	4498      	add	r8, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	461d      	mov	r5, r3
 800450c:	f04f 0600 	mov.w	r6, #0
 8004510:	46a9      	mov	r9, r5
 8004512:	46b2      	mov	sl, r6
 8004514:	eb19 0309 	adds.w	r3, r9, r9
 8004518:	eb4a 040a 	adc.w	r4, sl, sl
 800451c:	4699      	mov	r9, r3
 800451e:	46a2      	mov	sl, r4
 8004520:	eb19 0905 	adds.w	r9, r9, r5
 8004524:	eb4a 0a06 	adc.w	sl, sl, r6
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004534:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004538:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800453c:	4689      	mov	r9, r1
 800453e:	4692      	mov	sl, r2
 8004540:	eb19 0005 	adds.w	r0, r9, r5
 8004544:	eb4a 0106 	adc.w	r1, sl, r6
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	461d      	mov	r5, r3
 800454e:	f04f 0600 	mov.w	r6, #0
 8004552:	196b      	adds	r3, r5, r5
 8004554:	eb46 0406 	adc.w	r4, r6, r6
 8004558:	461a      	mov	r2, r3
 800455a:	4623      	mov	r3, r4
 800455c:	f7fc f840 	bl	80005e0 <__aeabi_uldivmod>
 8004560:	4603      	mov	r3, r0
 8004562:	460c      	mov	r4, r1
 8004564:	461a      	mov	r2, r3
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <UART_SetConfig+0x384>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	; 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	4a07      	ldr	r2, [pc, #28]	; (8004598 <UART_SetConfig+0x384>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 0207 	and.w	r2, r3, #7
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4442      	add	r2, r8
 800458c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800458e:	e1b2      	b.n	80048f6 <UART_SetConfig+0x6e2>
 8004590:	40011000 	.word	0x40011000
 8004594:	40011400 	.word	0x40011400
 8004598:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4ad7      	ldr	r2, [pc, #860]	; (8004900 <UART_SetConfig+0x6ec>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d005      	beq.n	80045b2 <UART_SetConfig+0x39e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4ad6      	ldr	r2, [pc, #856]	; (8004904 <UART_SetConfig+0x6f0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	f040 80d1 	bne.w	8004754 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80045b2:	f7fe ff59 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80045b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	469a      	mov	sl, r3
 80045bc:	f04f 0b00 	mov.w	fp, #0
 80045c0:	46d0      	mov	r8, sl
 80045c2:	46d9      	mov	r9, fp
 80045c4:	eb18 0308 	adds.w	r3, r8, r8
 80045c8:	eb49 0409 	adc.w	r4, r9, r9
 80045cc:	4698      	mov	r8, r3
 80045ce:	46a1      	mov	r9, r4
 80045d0:	eb18 080a 	adds.w	r8, r8, sl
 80045d4:	eb49 090b 	adc.w	r9, r9, fp
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045ec:	4688      	mov	r8, r1
 80045ee:	4691      	mov	r9, r2
 80045f0:	eb1a 0508 	adds.w	r5, sl, r8
 80045f4:	eb4b 0609 	adc.w	r6, fp, r9
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4619      	mov	r1, r3
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	f04f 0400 	mov.w	r4, #0
 800460a:	0094      	lsls	r4, r2, #2
 800460c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004610:	008b      	lsls	r3, r1, #2
 8004612:	461a      	mov	r2, r3
 8004614:	4623      	mov	r3, r4
 8004616:	4628      	mov	r0, r5
 8004618:	4631      	mov	r1, r6
 800461a:	f7fb ffe1 	bl	80005e0 <__aeabi_uldivmod>
 800461e:	4603      	mov	r3, r0
 8004620:	460c      	mov	r4, r1
 8004622:	461a      	mov	r2, r3
 8004624:	4bb8      	ldr	r3, [pc, #736]	; (8004908 <UART_SetConfig+0x6f4>)
 8004626:	fba3 2302 	umull	r2, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	469b      	mov	fp, r3
 8004634:	f04f 0c00 	mov.w	ip, #0
 8004638:	46d9      	mov	r9, fp
 800463a:	46e2      	mov	sl, ip
 800463c:	eb19 0309 	adds.w	r3, r9, r9
 8004640:	eb4a 040a 	adc.w	r4, sl, sl
 8004644:	4699      	mov	r9, r3
 8004646:	46a2      	mov	sl, r4
 8004648:	eb19 090b 	adds.w	r9, r9, fp
 800464c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004664:	4689      	mov	r9, r1
 8004666:	4692      	mov	sl, r2
 8004668:	eb1b 0509 	adds.w	r5, fp, r9
 800466c:	eb4c 060a 	adc.w	r6, ip, sl
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4619      	mov	r1, r3
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f04f 0400 	mov.w	r4, #0
 8004682:	0094      	lsls	r4, r2, #2
 8004684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004688:	008b      	lsls	r3, r1, #2
 800468a:	461a      	mov	r2, r3
 800468c:	4623      	mov	r3, r4
 800468e:	4628      	mov	r0, r5
 8004690:	4631      	mov	r1, r6
 8004692:	f7fb ffa5 	bl	80005e0 <__aeabi_uldivmod>
 8004696:	4603      	mov	r3, r0
 8004698:	460c      	mov	r4, r1
 800469a:	461a      	mov	r2, r3
 800469c:	4b9a      	ldr	r3, [pc, #616]	; (8004908 <UART_SetConfig+0x6f4>)
 800469e:	fba3 1302 	umull	r1, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2164      	movs	r1, #100	; 0x64
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	3332      	adds	r3, #50	; 0x32
 80046b0:	4a95      	ldr	r2, [pc, #596]	; (8004908 <UART_SetConfig+0x6f4>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046bc:	4498      	add	r8, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	469b      	mov	fp, r3
 80046c2:	f04f 0c00 	mov.w	ip, #0
 80046c6:	46d9      	mov	r9, fp
 80046c8:	46e2      	mov	sl, ip
 80046ca:	eb19 0309 	adds.w	r3, r9, r9
 80046ce:	eb4a 040a 	adc.w	r4, sl, sl
 80046d2:	4699      	mov	r9, r3
 80046d4:	46a2      	mov	sl, r4
 80046d6:	eb19 090b 	adds.w	r9, r9, fp
 80046da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046f2:	4689      	mov	r9, r1
 80046f4:	4692      	mov	sl, r2
 80046f6:	eb1b 0509 	adds.w	r5, fp, r9
 80046fa:	eb4c 060a 	adc.w	r6, ip, sl
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4619      	mov	r1, r3
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	f04f 0400 	mov.w	r4, #0
 8004710:	0094      	lsls	r4, r2, #2
 8004712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004716:	008b      	lsls	r3, r1, #2
 8004718:	461a      	mov	r2, r3
 800471a:	4623      	mov	r3, r4
 800471c:	4628      	mov	r0, r5
 800471e:	4631      	mov	r1, r6
 8004720:	f7fb ff5e 	bl	80005e0 <__aeabi_uldivmod>
 8004724:	4603      	mov	r3, r0
 8004726:	460c      	mov	r4, r1
 8004728:	461a      	mov	r2, r3
 800472a:	4b77      	ldr	r3, [pc, #476]	; (8004908 <UART_SetConfig+0x6f4>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	; 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a72      	ldr	r2, [pc, #456]	; (8004908 <UART_SetConfig+0x6f4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4442      	add	r2, r8
 8004750:	609a      	str	r2, [r3, #8]
 8004752:	e0d0      	b.n	80048f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7fe fe74 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 8004758:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	469a      	mov	sl, r3
 800475e:	f04f 0b00 	mov.w	fp, #0
 8004762:	46d0      	mov	r8, sl
 8004764:	46d9      	mov	r9, fp
 8004766:	eb18 0308 	adds.w	r3, r8, r8
 800476a:	eb49 0409 	adc.w	r4, r9, r9
 800476e:	4698      	mov	r8, r3
 8004770:	46a1      	mov	r9, r4
 8004772:	eb18 080a 	adds.w	r8, r8, sl
 8004776:	eb49 090b 	adc.w	r9, r9, fp
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004786:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800478a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800478e:	4688      	mov	r8, r1
 8004790:	4691      	mov	r9, r2
 8004792:	eb1a 0508 	adds.w	r5, sl, r8
 8004796:	eb4b 0609 	adc.w	r6, fp, r9
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4619      	mov	r1, r3
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	f04f 0400 	mov.w	r4, #0
 80047ac:	0094      	lsls	r4, r2, #2
 80047ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047b2:	008b      	lsls	r3, r1, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4623      	mov	r3, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	4631      	mov	r1, r6
 80047bc:	f7fb ff10 	bl	80005e0 <__aeabi_uldivmod>
 80047c0:	4603      	mov	r3, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b50      	ldr	r3, [pc, #320]	; (8004908 <UART_SetConfig+0x6f4>)
 80047c8:	fba3 2302 	umull	r2, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	469b      	mov	fp, r3
 80047d6:	f04f 0c00 	mov.w	ip, #0
 80047da:	46d9      	mov	r9, fp
 80047dc:	46e2      	mov	sl, ip
 80047de:	eb19 0309 	adds.w	r3, r9, r9
 80047e2:	eb4a 040a 	adc.w	r4, sl, sl
 80047e6:	4699      	mov	r9, r3
 80047e8:	46a2      	mov	sl, r4
 80047ea:	eb19 090b 	adds.w	r9, r9, fp
 80047ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004802:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004806:	4689      	mov	r9, r1
 8004808:	4692      	mov	sl, r2
 800480a:	eb1b 0509 	adds.w	r5, fp, r9
 800480e:	eb4c 060a 	adc.w	r6, ip, sl
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4619      	mov	r1, r3
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	f04f 0400 	mov.w	r4, #0
 8004824:	0094      	lsls	r4, r2, #2
 8004826:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800482a:	008b      	lsls	r3, r1, #2
 800482c:	461a      	mov	r2, r3
 800482e:	4623      	mov	r3, r4
 8004830:	4628      	mov	r0, r5
 8004832:	4631      	mov	r1, r6
 8004834:	f7fb fed4 	bl	80005e0 <__aeabi_uldivmod>
 8004838:	4603      	mov	r3, r0
 800483a:	460c      	mov	r4, r1
 800483c:	461a      	mov	r2, r3
 800483e:	4b32      	ldr	r3, [pc, #200]	; (8004908 <UART_SetConfig+0x6f4>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	; 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	3332      	adds	r3, #50	; 0x32
 8004852:	4a2d      	ldr	r2, [pc, #180]	; (8004908 <UART_SetConfig+0x6f4>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485e:	4498      	add	r8, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	469b      	mov	fp, r3
 8004864:	f04f 0c00 	mov.w	ip, #0
 8004868:	46d9      	mov	r9, fp
 800486a:	46e2      	mov	sl, ip
 800486c:	eb19 0309 	adds.w	r3, r9, r9
 8004870:	eb4a 040a 	adc.w	r4, sl, sl
 8004874:	4699      	mov	r9, r3
 8004876:	46a2      	mov	sl, r4
 8004878:	eb19 090b 	adds.w	r9, r9, fp
 800487c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800488c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004890:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004894:	4689      	mov	r9, r1
 8004896:	4692      	mov	sl, r2
 8004898:	eb1b 0509 	adds.w	r5, fp, r9
 800489c:	eb4c 060a 	adc.w	r6, ip, sl
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4619      	mov	r1, r3
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	f04f 0400 	mov.w	r4, #0
 80048b2:	0094      	lsls	r4, r2, #2
 80048b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048b8:	008b      	lsls	r3, r1, #2
 80048ba:	461a      	mov	r2, r3
 80048bc:	4623      	mov	r3, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	4631      	mov	r1, r6
 80048c2:	f7fb fe8d 	bl	80005e0 <__aeabi_uldivmod>
 80048c6:	4603      	mov	r3, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <UART_SetConfig+0x6f4>)
 80048ce:	fba3 1302 	umull	r1, r3, r3, r2
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	2164      	movs	r1, #100	; 0x64
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	3332      	adds	r3, #50	; 0x32
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <UART_SetConfig+0x6f4>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	f003 020f 	and.w	r2, r3, #15
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4442      	add	r2, r8
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	e7ff      	b.n	80048f6 <UART_SetConfig+0x6e2>
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004900:	40011000 	.word	0x40011000
 8004904:	40011400 	.word	0x40011400
 8004908:	51eb851f 	.word	0x51eb851f

0800490c <asinf>:
 800490c:	b510      	push	{r4, lr}
 800490e:	ed2d 8b02 	vpush	{d8}
 8004912:	4c27      	ldr	r4, [pc, #156]	; (80049b0 <asinf+0xa4>)
 8004914:	b08a      	sub	sp, #40	; 0x28
 8004916:	eeb0 8a40 	vmov.f32	s16, s0
 800491a:	f000 f9b5 	bl	8004c88 <__ieee754_asinf>
 800491e:	f994 3000 	ldrsb.w	r3, [r4]
 8004922:	3301      	adds	r3, #1
 8004924:	eef0 8a40 	vmov.f32	s17, s0
 8004928:	d03c      	beq.n	80049a4 <asinf+0x98>
 800492a:	eeb4 8a48 	vcmp.f32	s16, s16
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	d637      	bvs.n	80049a4 <asinf+0x98>
 8004934:	eeb0 0a48 	vmov.f32	s0, s16
 8004938:	f000 fede 	bl	80056f8 <fabsf>
 800493c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004940:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	dd2c      	ble.n	80049a4 <asinf+0x98>
 800494a:	2301      	movs	r3, #1
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <asinf+0xa8>)
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	ee18 0a10 	vmov	r0, s16
 8004956:	2300      	movs	r3, #0
 8004958:	9308      	str	r3, [sp, #32]
 800495a:	f7fb fd99 	bl	8000490 <__aeabi_f2d>
 800495e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004966:	4814      	ldr	r0, [pc, #80]	; (80049b8 <asinf+0xac>)
 8004968:	f000 fdea 	bl	8005540 <nan>
 800496c:	f994 3000 	ldrsb.w	r3, [r4]
 8004970:	2b02      	cmp	r3, #2
 8004972:	ed8d 0b06 	vstr	d0, [sp, #24]
 8004976:	d104      	bne.n	8004982 <asinf+0x76>
 8004978:	f000 ff9c 	bl	80058b4 <__errno>
 800497c:	2321      	movs	r3, #33	; 0x21
 800497e:	6003      	str	r3, [r0, #0]
 8004980:	e004      	b.n	800498c <asinf+0x80>
 8004982:	4668      	mov	r0, sp
 8004984:	f000 fdd9 	bl	800553a <matherr>
 8004988:	2800      	cmp	r0, #0
 800498a:	d0f5      	beq.n	8004978 <asinf+0x6c>
 800498c:	9b08      	ldr	r3, [sp, #32]
 800498e:	b11b      	cbz	r3, 8004998 <asinf+0x8c>
 8004990:	f000 ff90 	bl	80058b4 <__errno>
 8004994:	9b08      	ldr	r3, [sp, #32]
 8004996:	6003      	str	r3, [r0, #0]
 8004998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800499c:	f7fb fdd0 	bl	8000540 <__aeabi_d2f>
 80049a0:	ee08 0a90 	vmov	s17, r0
 80049a4:	eeb0 0a68 	vmov.f32	s0, s17
 80049a8:	b00a      	add	sp, #40	; 0x28
 80049aa:	ecbd 8b02 	vpop	{d8}
 80049ae:	bd10      	pop	{r4, pc}
 80049b0:	2000001d 	.word	0x2000001d
 80049b4:	08005950 	.word	0x08005950
 80049b8:	08005955 	.word	0x08005955

080049bc <atan2f>:
 80049bc:	f000 ba4c 	b.w	8004e58 <__ieee754_atan2f>

080049c0 <powf>:
 80049c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80049c4:	ed2d 8b04 	vpush	{d8-d9}
 80049c8:	4ca7      	ldr	r4, [pc, #668]	; (8004c68 <powf+0x2a8>)
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	eef0 8a40 	vmov.f32	s17, s0
 80049d0:	eeb0 8a60 	vmov.f32	s16, s1
 80049d4:	f000 faee 	bl	8004fb4 <__ieee754_powf>
 80049d8:	f994 5000 	ldrsb.w	r5, [r4]
 80049dc:	1c6b      	adds	r3, r5, #1
 80049de:	eeb0 9a40 	vmov.f32	s18, s0
 80049e2:	4626      	mov	r6, r4
 80049e4:	d05f      	beq.n	8004aa6 <powf+0xe6>
 80049e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d65a      	bvs.n	8004aa6 <powf+0xe6>
 80049f0:	eef4 8a68 	vcmp.f32	s17, s17
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	d721      	bvc.n	8004a3e <powf+0x7e>
 80049fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80049fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a02:	d150      	bne.n	8004aa6 <powf+0xe6>
 8004a04:	2301      	movs	r3, #1
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	4b98      	ldr	r3, [pc, #608]	; (8004c6c <powf+0x2ac>)
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	ee18 0a90 	vmov	r0, s17
 8004a10:	2300      	movs	r3, #0
 8004a12:	9308      	str	r3, [sp, #32]
 8004a14:	f7fb fd3c 	bl	8000490 <__aeabi_f2d>
 8004a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a1c:	ee18 0a10 	vmov	r0, s16
 8004a20:	f7fb fd36 	bl	8000490 <__aeabi_f2d>
 8004a24:	4b92      	ldr	r3, [pc, #584]	; (8004c70 <powf+0x2b0>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	2d02      	cmp	r5, #2
 8004a2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a32:	d032      	beq.n	8004a9a <powf+0xda>
 8004a34:	4668      	mov	r0, sp
 8004a36:	f000 fd80 	bl	800553a <matherr>
 8004a3a:	bb40      	cbnz	r0, 8004a8e <powf+0xce>
 8004a3c:	e065      	b.n	8004b0a <powf+0x14a>
 8004a3e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8004c74 <powf+0x2b4>
 8004a42:	eef4 8a69 	vcmp.f32	s17, s19
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	d163      	bne.n	8004b14 <powf+0x154>
 8004a4c:	eeb4 8a69 	vcmp.f32	s16, s19
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d12e      	bne.n	8004ab4 <powf+0xf4>
 8004a56:	2301      	movs	r3, #1
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	4b84      	ldr	r3, [pc, #528]	; (8004c6c <powf+0x2ac>)
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	ee18 0a90 	vmov	r0, s17
 8004a62:	2300      	movs	r3, #0
 8004a64:	9308      	str	r3, [sp, #32]
 8004a66:	f7fb fd13 	bl	8000490 <__aeabi_f2d>
 8004a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a6e:	ee18 0a10 	vmov	r0, s16
 8004a72:	f7fb fd0d 	bl	8000490 <__aeabi_f2d>
 8004a76:	2200      	movs	r2, #0
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	d0d6      	beq.n	8004a34 <powf+0x74>
 8004a86:	4b7a      	ldr	r3, [pc, #488]	; (8004c70 <powf+0x2b0>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a8e:	9b08      	ldr	r3, [sp, #32]
 8004a90:	b11b      	cbz	r3, 8004a9a <powf+0xda>
 8004a92:	f000 ff0f 	bl	80058b4 <__errno>
 8004a96:	9b08      	ldr	r3, [sp, #32]
 8004a98:	6003      	str	r3, [r0, #0]
 8004a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a9e:	f7fb fd4f 	bl	8000540 <__aeabi_d2f>
 8004aa2:	ee09 0a10 	vmov	s18, r0
 8004aa6:	eeb0 0a49 	vmov.f32	s0, s18
 8004aaa:	b00a      	add	sp, #40	; 0x28
 8004aac:	ecbd 8b04 	vpop	{d8-d9}
 8004ab0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004ab4:	eeb0 0a48 	vmov.f32	s0, s16
 8004ab8:	f000 fe25 	bl	8005706 <finitef>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d0f2      	beq.n	8004aa6 <powf+0xe6>
 8004ac0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac8:	d5ed      	bpl.n	8004aa6 <powf+0xe6>
 8004aca:	2301      	movs	r3, #1
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4b67      	ldr	r3, [pc, #412]	; (8004c6c <powf+0x2ac>)
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	ee18 0a90 	vmov	r0, s17
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9308      	str	r3, [sp, #32]
 8004ada:	f7fb fcd9 	bl	8000490 <__aeabi_f2d>
 8004ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ae2:	ee18 0a10 	vmov	r0, s16
 8004ae6:	f7fb fcd3 	bl	8000490 <__aeabi_f2d>
 8004aea:	f994 3000 	ldrsb.w	r3, [r4]
 8004aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004af2:	b923      	cbnz	r3, 8004afe <powf+0x13e>
 8004af4:	2200      	movs	r2, #0
 8004af6:	2300      	movs	r3, #0
 8004af8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004afc:	e79a      	b.n	8004a34 <powf+0x74>
 8004afe:	495e      	ldr	r1, [pc, #376]	; (8004c78 <powf+0x2b8>)
 8004b00:	2000      	movs	r0, #0
 8004b02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d194      	bne.n	8004a34 <powf+0x74>
 8004b0a:	f000 fed3 	bl	80058b4 <__errno>
 8004b0e:	2321      	movs	r3, #33	; 0x21
 8004b10:	6003      	str	r3, [r0, #0]
 8004b12:	e7bc      	b.n	8004a8e <powf+0xce>
 8004b14:	f000 fdf7 	bl	8005706 <finitef>
 8004b18:	4605      	mov	r5, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d173      	bne.n	8004c06 <powf+0x246>
 8004b1e:	eeb0 0a68 	vmov.f32	s0, s17
 8004b22:	f000 fdf0 	bl	8005706 <finitef>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d06d      	beq.n	8004c06 <powf+0x246>
 8004b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8004b2e:	f000 fdea 	bl	8005706 <finitef>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d067      	beq.n	8004c06 <powf+0x246>
 8004b36:	ee18 0a90 	vmov	r0, s17
 8004b3a:	f7fb fca9 	bl	8000490 <__aeabi_f2d>
 8004b3e:	4680      	mov	r8, r0
 8004b40:	ee18 0a10 	vmov	r0, s16
 8004b44:	4689      	mov	r9, r1
 8004b46:	f7fb fca3 	bl	8000490 <__aeabi_f2d>
 8004b4a:	eeb4 9a49 	vcmp.f32	s18, s18
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	f994 4000 	ldrsb.w	r4, [r4]
 8004b56:	4b45      	ldr	r3, [pc, #276]	; (8004c6c <powf+0x2ac>)
 8004b58:	d713      	bvc.n	8004b82 <powf+0x1c2>
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	e9cd 2300 	strd	r2, r3, [sp]
 8004b60:	9508      	str	r5, [sp, #32]
 8004b62:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d0c2      	beq.n	8004af4 <powf+0x134>
 8004b6e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8004b72:	ee17 0a90 	vmov	r0, s15
 8004b76:	f7fb fc8b 	bl	8000490 <__aeabi_f2d>
 8004b7a:	2c02      	cmp	r4, #2
 8004b7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b80:	e7c2      	b.n	8004b08 <powf+0x148>
 8004b82:	2203      	movs	r2, #3
 8004b84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004b88:	e9cd 2300 	strd	r2, r3, [sp]
 8004b8c:	9508      	str	r5, [sp, #32]
 8004b8e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004b92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b96:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b9a:	b9fc      	cbnz	r4, 8004bdc <powf+0x21c>
 8004b9c:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <powf+0x2bc>)
 8004b9e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004ba2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004baa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bae:	d553      	bpl.n	8004c58 <powf+0x298>
 8004bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8004bb4:	f000 fdb8 	bl	8005728 <rintf>
 8004bb8:	eeb4 0a48 	vcmp.f32	s0, s16
 8004bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc0:	d004      	beq.n	8004bcc <powf+0x20c>
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	; (8004c80 <powf+0x2c0>)
 8004bc4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004bc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bcc:	f996 3000 	ldrsb.w	r3, [r6]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d141      	bne.n	8004c58 <powf+0x298>
 8004bd4:	f000 fe6e 	bl	80058b4 <__errno>
 8004bd8:	2322      	movs	r3, #34	; 0x22
 8004bda:	e799      	b.n	8004b10 <powf+0x150>
 8004bdc:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <powf+0x2c4>)
 8004bde:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8004be2:	2200      	movs	r2, #0
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bec:	d5ee      	bpl.n	8004bcc <powf+0x20c>
 8004bee:	eeb0 0a48 	vmov.f32	s0, s16
 8004bf2:	f000 fd99 	bl	8005728 <rintf>
 8004bf6:	eeb4 0a48 	vcmp.f32	s0, s16
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	d0e5      	beq.n	8004bcc <powf+0x20c>
 8004c00:	2200      	movs	r2, #0
 8004c02:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <powf+0x2b8>)
 8004c04:	e7e0      	b.n	8004bc8 <powf+0x208>
 8004c06:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	f47f af4a 	bne.w	8004aa6 <powf+0xe6>
 8004c12:	eeb0 0a68 	vmov.f32	s0, s17
 8004c16:	f000 fd76 	bl	8005706 <finitef>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	f43f af43 	beq.w	8004aa6 <powf+0xe6>
 8004c20:	eeb0 0a48 	vmov.f32	s0, s16
 8004c24:	f000 fd6f 	bl	8005706 <finitef>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f43f af3c 	beq.w	8004aa6 <powf+0xe6>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <powf+0x2ac>)
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	ee18 0a90 	vmov	r0, s17
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9308      	str	r3, [sp, #32]
 8004c3e:	f7fb fc27 	bl	8000490 <__aeabi_f2d>
 8004c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c46:	ee18 0a10 	vmov	r0, s16
 8004c4a:	f7fb fc21 	bl	8000490 <__aeabi_f2d>
 8004c4e:	2200      	movs	r2, #0
 8004c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c54:	2300      	movs	r3, #0
 8004c56:	e7b7      	b.n	8004bc8 <powf+0x208>
 8004c58:	4668      	mov	r0, sp
 8004c5a:	f000 fc6e 	bl	800553a <matherr>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f47f af15 	bne.w	8004a8e <powf+0xce>
 8004c64:	e7b6      	b.n	8004bd4 <powf+0x214>
 8004c66:	bf00      	nop
 8004c68:	2000001d 	.word	0x2000001d
 8004c6c:	08005956 	.word	0x08005956
 8004c70:	3ff00000 	.word	0x3ff00000
 8004c74:	00000000 	.word	0x00000000
 8004c78:	fff00000 	.word	0xfff00000
 8004c7c:	47efffff 	.word	0x47efffff
 8004c80:	c7efffff 	.word	0xc7efffff
 8004c84:	7ff00000 	.word	0x7ff00000

08004c88 <__ieee754_asinf>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	ee10 5a10 	vmov	r5, s0
 8004c8e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8004c92:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004c96:	ed2d 8b04 	vpush	{d8-d9}
 8004c9a:	d10c      	bne.n	8004cb6 <__ieee754_asinf+0x2e>
 8004c9c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8004e18 <__ieee754_asinf+0x190>
 8004ca0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004e1c <__ieee754_asinf+0x194>
 8004ca4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ca8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004cac:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb0:	ecbd 8b04 	vpop	{d8-d9}
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	dd04      	ble.n	8004cc2 <__ieee754_asinf+0x3a>
 8004cb8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004cbc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004cc0:	e7f6      	b.n	8004cb0 <__ieee754_asinf+0x28>
 8004cc2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8004cc6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004cca:	da0b      	bge.n	8004ce4 <__ieee754_asinf+0x5c>
 8004ccc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8004cd0:	da52      	bge.n	8004d78 <__ieee754_asinf+0xf0>
 8004cd2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004e20 <__ieee754_asinf+0x198>
 8004cd6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8004cda:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	dce5      	bgt.n	8004cb0 <__ieee754_asinf+0x28>
 8004ce4:	f000 fd08 	bl	80056f8 <fabsf>
 8004ce8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8004cec:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8004cf0:	ee20 8a08 	vmul.f32	s16, s0, s16
 8004cf4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8004e24 <__ieee754_asinf+0x19c>
 8004cf8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004e28 <__ieee754_asinf+0x1a0>
 8004cfc:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8004e2c <__ieee754_asinf+0x1a4>
 8004d00:	eea8 7a27 	vfma.f32	s14, s16, s15
 8004d04:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8004e30 <__ieee754_asinf+0x1a8>
 8004d08:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004d0c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004e34 <__ieee754_asinf+0x1ac>
 8004d10:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004d14:	eddf 7a48 	vldr	s15, [pc, #288]	; 8004e38 <__ieee754_asinf+0x1b0>
 8004d18:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004d1c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004e3c <__ieee754_asinf+0x1b4>
 8004d20:	eea7 9a88 	vfma.f32	s18, s15, s16
 8004d24:	eddf 7a46 	vldr	s15, [pc, #280]	; 8004e40 <__ieee754_asinf+0x1b8>
 8004d28:	eee8 7a07 	vfma.f32	s15, s16, s14
 8004d2c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004e44 <__ieee754_asinf+0x1bc>
 8004d30:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004d34:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004e48 <__ieee754_asinf+0x1c0>
 8004d38:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8004d40:	eee7 8a88 	vfma.f32	s17, s15, s16
 8004d44:	f000 fbf6 	bl	8005534 <__ieee754_sqrtf>
 8004d48:	4b40      	ldr	r3, [pc, #256]	; (8004e4c <__ieee754_asinf+0x1c4>)
 8004d4a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8004d54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004d58:	dd3d      	ble.n	8004dd6 <__ieee754_asinf+0x14e>
 8004d5a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8004d5e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8004e50 <__ieee754_asinf+0x1c8>
 8004d62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004d66:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8004e1c <__ieee754_asinf+0x194>
 8004d6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	bfd8      	it	le
 8004d72:	eeb1 0a40 	vnegle.f32	s0, s0
 8004d76:	e79b      	b.n	8004cb0 <__ieee754_asinf+0x28>
 8004d78:	ee60 7a00 	vmul.f32	s15, s0, s0
 8004d7c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004e24 <__ieee754_asinf+0x19c>
 8004d80:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004e28 <__ieee754_asinf+0x1a0>
 8004d84:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8004e3c <__ieee754_asinf+0x1b4>
 8004d88:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004d8c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8004e30 <__ieee754_asinf+0x1a8>
 8004d90:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004d94:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004e34 <__ieee754_asinf+0x1ac>
 8004d98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004d9c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e38 <__ieee754_asinf+0x1b0>
 8004da0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004da4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e2c <__ieee754_asinf+0x1a4>
 8004da8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004dac:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004e40 <__ieee754_asinf+0x1b8>
 8004db0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8004db4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8004e44 <__ieee754_asinf+0x1bc>
 8004db8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8004dbc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004e48 <__ieee754_asinf+0x1c0>
 8004dc0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dc8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8004dcc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8004dd0:	eea0 0a27 	vfma.f32	s0, s0, s15
 8004dd4:	e76c      	b.n	8004cb0 <__ieee754_asinf+0x28>
 8004dd6:	ee10 3a10 	vmov	r3, s0
 8004dda:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004dde:	f023 030f 	bic.w	r3, r3, #15
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef1 6a67 	vneg.f32	s13, s15
 8004dea:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8004dee:	ee70 5a00 	vadd.f32	s11, s0, s0
 8004df2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004df6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004e18 <__ieee754_asinf+0x190>
 8004dfa:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8004dfe:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8004e54 <__ieee754_asinf+0x1cc>
 8004e02:	eee5 7a47 	vfms.f32	s15, s10, s14
 8004e06:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8004e0a:	eeb0 6a40 	vmov.f32	s12, s0
 8004e0e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004e12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004e16:	e7a8      	b.n	8004d6a <__ieee754_asinf+0xe2>
 8004e18:	b33bbd2e 	.word	0xb33bbd2e
 8004e1c:	3fc90fdb 	.word	0x3fc90fdb
 8004e20:	7149f2ca 	.word	0x7149f2ca
 8004e24:	3811ef08 	.word	0x3811ef08
 8004e28:	3a4f7f04 	.word	0x3a4f7f04
 8004e2c:	3e2aaaab 	.word	0x3e2aaaab
 8004e30:	bd241146 	.word	0xbd241146
 8004e34:	3e4e0aa8 	.word	0x3e4e0aa8
 8004e38:	bea6b090 	.word	0xbea6b090
 8004e3c:	3d9dc62e 	.word	0x3d9dc62e
 8004e40:	bf303361 	.word	0xbf303361
 8004e44:	4001572d 	.word	0x4001572d
 8004e48:	c019d139 	.word	0xc019d139
 8004e4c:	3f799999 	.word	0x3f799999
 8004e50:	333bbd2e 	.word	0x333bbd2e
 8004e54:	3f490fdb 	.word	0x3f490fdb

08004e58 <__ieee754_atan2f>:
 8004e58:	ee10 2a90 	vmov	r2, s1
 8004e5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004e60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004e64:	b510      	push	{r4, lr}
 8004e66:	eef0 7a40 	vmov.f32	s15, s0
 8004e6a:	dc06      	bgt.n	8004e7a <__ieee754_atan2f+0x22>
 8004e6c:	ee10 0a10 	vmov	r0, s0
 8004e70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004e74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e78:	dd04      	ble.n	8004e84 <__ieee754_atan2f+0x2c>
 8004e7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e82:	bd10      	pop	{r4, pc}
 8004e84:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8004e88:	d103      	bne.n	8004e92 <__ieee754_atan2f+0x3a>
 8004e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8e:	f000 bb5f 	b.w	8005550 <atanf>
 8004e92:	1794      	asrs	r4, r2, #30
 8004e94:	f004 0402 	and.w	r4, r4, #2
 8004e98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004e9c:	b943      	cbnz	r3, 8004eb0 <__ieee754_atan2f+0x58>
 8004e9e:	2c02      	cmp	r4, #2
 8004ea0:	d06e      	beq.n	8004f80 <__ieee754_atan2f+0x128>
 8004ea2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004f88 <__ieee754_atan2f+0x130>
 8004ea6:	2c03      	cmp	r4, #3
 8004ea8:	bf08      	it	eq
 8004eaa:	eef0 7a47 	vmoveq.f32	s15, s14
 8004eae:	e7e6      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004eb0:	b941      	cbnz	r1, 8004ec4 <__ieee754_atan2f+0x6c>
 8004eb2:	eddf 7a36 	vldr	s15, [pc, #216]	; 8004f8c <__ieee754_atan2f+0x134>
 8004eb6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004f90 <__ieee754_atan2f+0x138>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	bfb8      	it	lt
 8004ebe:	eef0 7a47 	vmovlt.f32	s15, s14
 8004ec2:	e7dc      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004ec4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004ec8:	d122      	bne.n	8004f10 <__ieee754_atan2f+0xb8>
 8004eca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004ece:	d112      	bne.n	8004ef6 <__ieee754_atan2f+0x9e>
 8004ed0:	2c02      	cmp	r4, #2
 8004ed2:	d00a      	beq.n	8004eea <__ieee754_atan2f+0x92>
 8004ed4:	2c03      	cmp	r4, #3
 8004ed6:	d00b      	beq.n	8004ef0 <__ieee754_atan2f+0x98>
 8004ed8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004f94 <__ieee754_atan2f+0x13c>
 8004edc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004f98 <__ieee754_atan2f+0x140>
 8004ee0:	2c01      	cmp	r4, #1
 8004ee2:	bf18      	it	ne
 8004ee4:	eef0 7a47 	vmovne.f32	s15, s14
 8004ee8:	e7c9      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004eea:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8004f9c <__ieee754_atan2f+0x144>
 8004eee:	e7c6      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004ef0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004fa0 <__ieee754_atan2f+0x148>
 8004ef4:	e7c3      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004ef6:	2c02      	cmp	r4, #2
 8004ef8:	d042      	beq.n	8004f80 <__ieee754_atan2f+0x128>
 8004efa:	2c03      	cmp	r4, #3
 8004efc:	d005      	beq.n	8004f0a <__ieee754_atan2f+0xb2>
 8004efe:	2c01      	cmp	r4, #1
 8004f00:	eddf 7a28 	vldr	s15, [pc, #160]	; 8004fa4 <__ieee754_atan2f+0x14c>
 8004f04:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004fa8 <__ieee754_atan2f+0x150>
 8004f08:	e7eb      	b.n	8004ee2 <__ieee754_atan2f+0x8a>
 8004f0a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004f88 <__ieee754_atan2f+0x130>
 8004f0e:	e7b6      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004f10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f14:	d0cd      	beq.n	8004eb2 <__ieee754_atan2f+0x5a>
 8004f16:	1a5b      	subs	r3, r3, r1
 8004f18:	15db      	asrs	r3, r3, #23
 8004f1a:	2b3c      	cmp	r3, #60	; 0x3c
 8004f1c:	dc1a      	bgt.n	8004f54 <__ieee754_atan2f+0xfc>
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	da01      	bge.n	8004f26 <__ieee754_atan2f+0xce>
 8004f22:	333c      	adds	r3, #60	; 0x3c
 8004f24:	db19      	blt.n	8004f5a <__ieee754_atan2f+0x102>
 8004f26:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8004f2a:	f000 fbe5 	bl	80056f8 <fabsf>
 8004f2e:	f000 fb0f 	bl	8005550 <atanf>
 8004f32:	eef0 7a40 	vmov.f32	s15, s0
 8004f36:	2c01      	cmp	r4, #1
 8004f38:	d012      	beq.n	8004f60 <__ieee754_atan2f+0x108>
 8004f3a:	2c02      	cmp	r4, #2
 8004f3c:	d017      	beq.n	8004f6e <__ieee754_atan2f+0x116>
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	d09d      	beq.n	8004e7e <__ieee754_atan2f+0x26>
 8004f42:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004fac <__ieee754_atan2f+0x154>
 8004f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f4a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004fb0 <__ieee754_atan2f+0x158>
 8004f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f52:	e794      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004f54:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004f8c <__ieee754_atan2f+0x134>
 8004f58:	e7ed      	b.n	8004f36 <__ieee754_atan2f+0xde>
 8004f5a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8004fa8 <__ieee754_atan2f+0x150>
 8004f5e:	e7ea      	b.n	8004f36 <__ieee754_atan2f+0xde>
 8004f60:	ee17 3a90 	vmov	r3, s15
 8004f64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	e787      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004f6e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004fac <__ieee754_atan2f+0x154>
 8004f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f76:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004fb0 <__ieee754_atan2f+0x158>
 8004f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f7e:	e77e      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004f80:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004fb0 <__ieee754_atan2f+0x158>
 8004f84:	e77b      	b.n	8004e7e <__ieee754_atan2f+0x26>
 8004f86:	bf00      	nop
 8004f88:	c0490fdb 	.word	0xc0490fdb
 8004f8c:	3fc90fdb 	.word	0x3fc90fdb
 8004f90:	bfc90fdb 	.word	0xbfc90fdb
 8004f94:	bf490fdb 	.word	0xbf490fdb
 8004f98:	3f490fdb 	.word	0x3f490fdb
 8004f9c:	4016cbe4 	.word	0x4016cbe4
 8004fa0:	c016cbe4 	.word	0xc016cbe4
 8004fa4:	80000000 	.word	0x80000000
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	33bbbd2e 	.word	0x33bbbd2e
 8004fb0:	40490fdb 	.word	0x40490fdb

08004fb4 <__ieee754_powf>:
 8004fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb8:	ee10 5a90 	vmov	r5, s1
 8004fbc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004fc0:	ed2d 8b02 	vpush	{d8}
 8004fc4:	eeb0 8a40 	vmov.f32	s16, s0
 8004fc8:	eef0 8a60 	vmov.f32	s17, s1
 8004fcc:	f000 8293 	beq.w	80054f6 <__ieee754_powf+0x542>
 8004fd0:	ee10 8a10 	vmov	r8, s0
 8004fd4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8004fd8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004fdc:	dc06      	bgt.n	8004fec <__ieee754_powf+0x38>
 8004fde:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004fe2:	dd0a      	ble.n	8004ffa <__ieee754_powf+0x46>
 8004fe4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004fe8:	f000 8285 	beq.w	80054f6 <__ieee754_powf+0x542>
 8004fec:	ecbd 8b02 	vpop	{d8}
 8004ff0:	48d9      	ldr	r0, [pc, #868]	; (8005358 <__ieee754_powf+0x3a4>)
 8004ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff6:	f000 bb91 	b.w	800571c <nanf>
 8004ffa:	f1b8 0f00 	cmp.w	r8, #0
 8004ffe:	da1d      	bge.n	800503c <__ieee754_powf+0x88>
 8005000:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8005004:	da2c      	bge.n	8005060 <__ieee754_powf+0xac>
 8005006:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800500a:	db30      	blt.n	800506e <__ieee754_powf+0xba>
 800500c:	15fb      	asrs	r3, r7, #23
 800500e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005012:	fa47 f603 	asr.w	r6, r7, r3
 8005016:	fa06 f303 	lsl.w	r3, r6, r3
 800501a:	42bb      	cmp	r3, r7
 800501c:	d127      	bne.n	800506e <__ieee754_powf+0xba>
 800501e:	f006 0601 	and.w	r6, r6, #1
 8005022:	f1c6 0602 	rsb	r6, r6, #2
 8005026:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800502a:	d122      	bne.n	8005072 <__ieee754_powf+0xbe>
 800502c:	2d00      	cmp	r5, #0
 800502e:	f280 8268 	bge.w	8005502 <__ieee754_powf+0x54e>
 8005032:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005036:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800503a:	e00d      	b.n	8005058 <__ieee754_powf+0xa4>
 800503c:	2600      	movs	r6, #0
 800503e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005042:	d1f0      	bne.n	8005026 <__ieee754_powf+0x72>
 8005044:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005048:	f000 8255 	beq.w	80054f6 <__ieee754_powf+0x542>
 800504c:	dd0a      	ble.n	8005064 <__ieee754_powf+0xb0>
 800504e:	2d00      	cmp	r5, #0
 8005050:	f280 8254 	bge.w	80054fc <__ieee754_powf+0x548>
 8005054:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800535c <__ieee754_powf+0x3a8>
 8005058:	ecbd 8b02 	vpop	{d8}
 800505c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005060:	2602      	movs	r6, #2
 8005062:	e7ec      	b.n	800503e <__ieee754_powf+0x8a>
 8005064:	2d00      	cmp	r5, #0
 8005066:	daf5      	bge.n	8005054 <__ieee754_powf+0xa0>
 8005068:	eeb1 0a68 	vneg.f32	s0, s17
 800506c:	e7f4      	b.n	8005058 <__ieee754_powf+0xa4>
 800506e:	2600      	movs	r6, #0
 8005070:	e7d9      	b.n	8005026 <__ieee754_powf+0x72>
 8005072:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005076:	d102      	bne.n	800507e <__ieee754_powf+0xca>
 8005078:	ee28 0a08 	vmul.f32	s0, s16, s16
 800507c:	e7ec      	b.n	8005058 <__ieee754_powf+0xa4>
 800507e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005082:	eeb0 0a48 	vmov.f32	s0, s16
 8005086:	d108      	bne.n	800509a <__ieee754_powf+0xe6>
 8005088:	f1b8 0f00 	cmp.w	r8, #0
 800508c:	db05      	blt.n	800509a <__ieee754_powf+0xe6>
 800508e:	ecbd 8b02 	vpop	{d8}
 8005092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005096:	f000 ba4d 	b.w	8005534 <__ieee754_sqrtf>
 800509a:	f000 fb2d 	bl	80056f8 <fabsf>
 800509e:	b124      	cbz	r4, 80050aa <__ieee754_powf+0xf6>
 80050a0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80050a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80050a8:	d117      	bne.n	80050da <__ieee754_powf+0x126>
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	bfbc      	itt	lt
 80050ae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80050b2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80050b6:	f1b8 0f00 	cmp.w	r8, #0
 80050ba:	dacd      	bge.n	8005058 <__ieee754_powf+0xa4>
 80050bc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80050c0:	ea54 0306 	orrs.w	r3, r4, r6
 80050c4:	d104      	bne.n	80050d0 <__ieee754_powf+0x11c>
 80050c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80050ca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80050ce:	e7c3      	b.n	8005058 <__ieee754_powf+0xa4>
 80050d0:	2e01      	cmp	r6, #1
 80050d2:	d1c1      	bne.n	8005058 <__ieee754_powf+0xa4>
 80050d4:	eeb1 0a40 	vneg.f32	s0, s0
 80050d8:	e7be      	b.n	8005058 <__ieee754_powf+0xa4>
 80050da:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80050de:	3801      	subs	r0, #1
 80050e0:	ea56 0300 	orrs.w	r3, r6, r0
 80050e4:	d104      	bne.n	80050f0 <__ieee754_powf+0x13c>
 80050e6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80050ea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80050ee:	e7b3      	b.n	8005058 <__ieee754_powf+0xa4>
 80050f0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80050f4:	dd6d      	ble.n	80051d2 <__ieee754_powf+0x21e>
 80050f6:	4b9a      	ldr	r3, [pc, #616]	; (8005360 <__ieee754_powf+0x3ac>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	dc06      	bgt.n	800510a <__ieee754_powf+0x156>
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	daa9      	bge.n	8005054 <__ieee754_powf+0xa0>
 8005100:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8005364 <__ieee754_powf+0x3b0>
 8005104:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005108:	e7a6      	b.n	8005058 <__ieee754_powf+0xa4>
 800510a:	4b97      	ldr	r3, [pc, #604]	; (8005368 <__ieee754_powf+0x3b4>)
 800510c:	429c      	cmp	r4, r3
 800510e:	dd02      	ble.n	8005116 <__ieee754_powf+0x162>
 8005110:	2d00      	cmp	r5, #0
 8005112:	dcf5      	bgt.n	8005100 <__ieee754_powf+0x14c>
 8005114:	e79e      	b.n	8005054 <__ieee754_powf+0xa0>
 8005116:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800511a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800511e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800536c <__ieee754_powf+0x3b8>
 8005122:	eef1 6a40 	vneg.f32	s13, s0
 8005126:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800512a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800512e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005132:	eee7 7a40 	vfms.f32	s15, s14, s0
 8005136:	ee60 0a00 	vmul.f32	s1, s0, s0
 800513a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8005370 <__ieee754_powf+0x3bc>
 800513e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8005142:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8005374 <__ieee754_powf+0x3c0>
 8005146:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800514a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800514e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005378 <__ieee754_powf+0x3c4>
 8005152:	eeb0 6a67 	vmov.f32	s12, s15
 8005156:	eea0 6a07 	vfma.f32	s12, s0, s14
 800515a:	ee16 3a10 	vmov	r3, s12
 800515e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005162:	f023 030f 	bic.w	r3, r3, #15
 8005166:	ee00 3a90 	vmov	s1, r3
 800516a:	eee6 0a87 	vfma.f32	s1, s13, s14
 800516e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005172:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8005176:	f025 050f 	bic.w	r5, r5, #15
 800517a:	ee07 5a10 	vmov	s14, r5
 800517e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005182:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800518e:	3e01      	subs	r6, #1
 8005190:	ea56 0200 	orrs.w	r2, r6, r0
 8005194:	ee07 5a10 	vmov	s14, r5
 8005198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800519c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80051a0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80051a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80051a8:	ee17 4a10 	vmov	r4, s14
 80051ac:	bf08      	it	eq
 80051ae:	eeb0 8a40 	vmoveq.f32	s16, s0
 80051b2:	2c00      	cmp	r4, #0
 80051b4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80051b8:	f340 8184 	ble.w	80054c4 <__ieee754_powf+0x510>
 80051bc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80051c0:	f340 80fc 	ble.w	80053bc <__ieee754_powf+0x408>
 80051c4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005364 <__ieee754_powf+0x3b0>
 80051c8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80051cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80051d0:	e742      	b.n	8005058 <__ieee754_powf+0xa4>
 80051d2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80051d6:	bfbf      	itttt	lt
 80051d8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800537c <__ieee754_powf+0x3c8>
 80051dc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80051e0:	f06f 0217 	mvnlt.w	r2, #23
 80051e4:	ee17 4a90 	vmovlt	r4, s15
 80051e8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80051ec:	bfa8      	it	ge
 80051ee:	2200      	movge	r2, #0
 80051f0:	3b7f      	subs	r3, #127	; 0x7f
 80051f2:	4413      	add	r3, r2
 80051f4:	4a62      	ldr	r2, [pc, #392]	; (8005380 <__ieee754_powf+0x3cc>)
 80051f6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80051fa:	4294      	cmp	r4, r2
 80051fc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8005200:	dd06      	ble.n	8005210 <__ieee754_powf+0x25c>
 8005202:	4a60      	ldr	r2, [pc, #384]	; (8005384 <__ieee754_powf+0x3d0>)
 8005204:	4294      	cmp	r4, r2
 8005206:	f340 80a5 	ble.w	8005354 <__ieee754_powf+0x3a0>
 800520a:	3301      	adds	r3, #1
 800520c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005210:	2400      	movs	r4, #0
 8005212:	4a5d      	ldr	r2, [pc, #372]	; (8005388 <__ieee754_powf+0x3d4>)
 8005214:	00a7      	lsls	r7, r4, #2
 8005216:	443a      	add	r2, r7
 8005218:	ee07 1a90 	vmov	s15, r1
 800521c:	ed92 7a00 	vldr	s14, [r2]
 8005220:	4a5a      	ldr	r2, [pc, #360]	; (800538c <__ieee754_powf+0x3d8>)
 8005222:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005226:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800522a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800522e:	1049      	asrs	r1, r1, #1
 8005230:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005234:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005238:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800523c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005240:	ee06 1a10 	vmov	s12, r1
 8005244:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8005248:	ee14 ca90 	vmov	ip, s9
 800524c:	ea02 0c0c 	and.w	ip, r2, ip
 8005250:	ee05 ca10 	vmov	s10, ip
 8005254:	eeb1 4a45 	vneg.f32	s8, s10
 8005258:	eee4 5a06 	vfma.f32	s11, s8, s12
 800525c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005260:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005390 <__ieee754_powf+0x3dc>
 8005264:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8005268:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800526c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8005270:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8005274:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8005278:	eddf 5a46 	vldr	s11, [pc, #280]	; 8005394 <__ieee754_powf+0x3e0>
 800527c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005280:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005398 <__ieee754_powf+0x3e4>
 8005284:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005288:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800536c <__ieee754_powf+0x3b8>
 800528c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005290:	eddf 5a42 	vldr	s11, [pc, #264]	; 800539c <__ieee754_powf+0x3e8>
 8005294:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005298:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80053a0 <__ieee754_powf+0x3ec>
 800529c:	ee75 6a24 	vadd.f32	s13, s10, s9
 80052a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80052a4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80052a8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80052ac:	eef0 7a65 	vmov.f32	s15, s11
 80052b0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80052b4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80052b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052bc:	ee17 1a90 	vmov	r1, s15
 80052c0:	4011      	ands	r1, r2
 80052c2:	ee07 1a90 	vmov	s15, r1
 80052c6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80052ca:	eddf 5a36 	vldr	s11, [pc, #216]	; 80053a4 <__ieee754_powf+0x3f0>
 80052ce:	eea4 7a05 	vfma.f32	s14, s8, s10
 80052d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80052d6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80052da:	eea7 7a86 	vfma.f32	s14, s15, s12
 80052de:	eeb0 6a47 	vmov.f32	s12, s14
 80052e2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80052e6:	ee16 1a10 	vmov	r1, s12
 80052ea:	4011      	ands	r1, r2
 80052ec:	ee06 1a90 	vmov	s13, r1
 80052f0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80052f4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80053a8 <__ieee754_powf+0x3f4>
 80052f8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80052fc:	ee06 1a10 	vmov	s12, r1
 8005300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005304:	eddf 7a29 	vldr	s15, [pc, #164]	; 80053ac <__ieee754_powf+0x3f8>
 8005308:	4929      	ldr	r1, [pc, #164]	; (80053b0 <__ieee754_powf+0x3fc>)
 800530a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800530e:	4439      	add	r1, r7
 8005310:	edd1 7a00 	vldr	s15, [r1]
 8005314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef0 0a47 	vmov.f32	s1, s14
 8005320:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <__ieee754_powf+0x400>)
 8005322:	eee6 0a25 	vfma.f32	s1, s12, s11
 8005326:	443b      	add	r3, r7
 8005328:	ed93 5a00 	vldr	s10, [r3]
 800532c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005330:	ee70 0a85 	vadd.f32	s1, s1, s10
 8005334:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8005338:	ee17 3a90 	vmov	r3, s15
 800533c:	4013      	ands	r3, r2
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005346:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800534a:	eee6 7a65 	vfms.f32	s15, s12, s11
 800534e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005352:	e70e      	b.n	8005172 <__ieee754_powf+0x1be>
 8005354:	2401      	movs	r4, #1
 8005356:	e75c      	b.n	8005212 <__ieee754_powf+0x25e>
 8005358:	08005955 	.word	0x08005955
 800535c:	00000000 	.word	0x00000000
 8005360:	3f7ffff7 	.word	0x3f7ffff7
 8005364:	7149f2ca 	.word	0x7149f2ca
 8005368:	3f800007 	.word	0x3f800007
 800536c:	3eaaaaab 	.word	0x3eaaaaab
 8005370:	36eca570 	.word	0x36eca570
 8005374:	3fb8aa3b 	.word	0x3fb8aa3b
 8005378:	3fb8aa00 	.word	0x3fb8aa00
 800537c:	4b800000 	.word	0x4b800000
 8005380:	001cc471 	.word	0x001cc471
 8005384:	005db3d6 	.word	0x005db3d6
 8005388:	0800595c 	.word	0x0800595c
 800538c:	fffff000 	.word	0xfffff000
 8005390:	3e6c3255 	.word	0x3e6c3255
 8005394:	3e53f142 	.word	0x3e53f142
 8005398:	3e8ba305 	.word	0x3e8ba305
 800539c:	3edb6db7 	.word	0x3edb6db7
 80053a0:	3f19999a 	.word	0x3f19999a
 80053a4:	3f763800 	.word	0x3f763800
 80053a8:	3f76384f 	.word	0x3f76384f
 80053ac:	369dc3a0 	.word	0x369dc3a0
 80053b0:	0800596c 	.word	0x0800596c
 80053b4:	08005964 	.word	0x08005964
 80053b8:	3338aa3c 	.word	0x3338aa3c
 80053bc:	f040 8092 	bne.w	80054e4 <__ieee754_powf+0x530>
 80053c0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80053b8 <__ieee754_powf+0x404>
 80053c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053c8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80053cc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80053d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d4:	f73f aef6 	bgt.w	80051c4 <__ieee754_powf+0x210>
 80053d8:	15db      	asrs	r3, r3, #23
 80053da:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80053de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80053e2:	4103      	asrs	r3, r0
 80053e4:	4423      	add	r3, r4
 80053e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80053ea:	4947      	ldr	r1, [pc, #284]	; (8005508 <__ieee754_powf+0x554>)
 80053ec:	3a7f      	subs	r2, #127	; 0x7f
 80053ee:	4111      	asrs	r1, r2
 80053f0:	ea23 0101 	bic.w	r1, r3, r1
 80053f4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80053f8:	ee07 1a10 	vmov	s14, r1
 80053fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005400:	f1c2 0217 	rsb	r2, r2, #23
 8005404:	4110      	asrs	r0, r2
 8005406:	2c00      	cmp	r4, #0
 8005408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800540c:	bfb8      	it	lt
 800540e:	4240      	neglt	r0, r0
 8005410:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005414:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800550c <__ieee754_powf+0x558>
 8005418:	ee17 3a10 	vmov	r3, s14
 800541c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005420:	f023 030f 	bic.w	r3, r3, #15
 8005424:	ee07 3a10 	vmov	s14, r3
 8005428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800542c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005430:	eddf 7a37 	vldr	s15, [pc, #220]	; 8005510 <__ieee754_powf+0x55c>
 8005434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005438:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800543c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8005514 <__ieee754_powf+0x560>
 8005440:	eeb0 0a67 	vmov.f32	s0, s15
 8005444:	eea7 0a26 	vfma.f32	s0, s14, s13
 8005448:	eeb0 6a40 	vmov.f32	s12, s0
 800544c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005450:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005454:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005458:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005518 <__ieee754_powf+0x564>
 800545c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800551c <__ieee754_powf+0x568>
 8005460:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005464:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8005520 <__ieee754_powf+0x56c>
 8005468:	eee6 6a07 	vfma.f32	s13, s12, s14
 800546c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8005524 <__ieee754_powf+0x570>
 8005470:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005474:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8005528 <__ieee754_powf+0x574>
 8005478:	eee6 6a07 	vfma.f32	s13, s12, s14
 800547c:	eeb0 6a40 	vmov.f32	s12, s0
 8005480:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005484:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005488:	eeb0 7a46 	vmov.f32	s14, s12
 800548c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005490:	ee20 6a06 	vmul.f32	s12, s0, s12
 8005494:	eee0 7a27 	vfma.f32	s15, s0, s15
 8005498:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800549c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80054a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80054a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80054ac:	ee10 3a10 	vmov	r3, s0
 80054b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80054b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054b8:	da1a      	bge.n	80054f0 <__ieee754_powf+0x53c>
 80054ba:	f000 f98f 	bl	80057dc <scalbnf>
 80054be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80054c2:	e5c9      	b.n	8005058 <__ieee754_powf+0xa4>
 80054c4:	4a19      	ldr	r2, [pc, #100]	; (800552c <__ieee754_powf+0x578>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	dd02      	ble.n	80054d0 <__ieee754_powf+0x51c>
 80054ca:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005530 <__ieee754_powf+0x57c>
 80054ce:	e67b      	b.n	80051c8 <__ieee754_powf+0x214>
 80054d0:	d108      	bne.n	80054e4 <__ieee754_powf+0x530>
 80054d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054d6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	f6ff af7b 	blt.w	80053d8 <__ieee754_powf+0x424>
 80054e2:	e7f2      	b.n	80054ca <__ieee754_powf+0x516>
 80054e4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80054e8:	f73f af76 	bgt.w	80053d8 <__ieee754_powf+0x424>
 80054ec:	2000      	movs	r0, #0
 80054ee:	e78f      	b.n	8005410 <__ieee754_powf+0x45c>
 80054f0:	ee00 3a10 	vmov	s0, r3
 80054f4:	e7e3      	b.n	80054be <__ieee754_powf+0x50a>
 80054f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80054fa:	e5ad      	b.n	8005058 <__ieee754_powf+0xa4>
 80054fc:	eeb0 0a68 	vmov.f32	s0, s17
 8005500:	e5aa      	b.n	8005058 <__ieee754_powf+0xa4>
 8005502:	eeb0 0a48 	vmov.f32	s0, s16
 8005506:	e5a7      	b.n	8005058 <__ieee754_powf+0xa4>
 8005508:	007fffff 	.word	0x007fffff
 800550c:	3f317218 	.word	0x3f317218
 8005510:	35bfbe8c 	.word	0x35bfbe8c
 8005514:	3f317200 	.word	0x3f317200
 8005518:	3331bb4c 	.word	0x3331bb4c
 800551c:	b5ddea0e 	.word	0xb5ddea0e
 8005520:	388ab355 	.word	0x388ab355
 8005524:	bb360b61 	.word	0xbb360b61
 8005528:	3e2aaaab 	.word	0x3e2aaaab
 800552c:	43160000 	.word	0x43160000
 8005530:	0da24260 	.word	0x0da24260

08005534 <__ieee754_sqrtf>:
 8005534:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005538:	4770      	bx	lr

0800553a <matherr>:
 800553a:	2000      	movs	r0, #0
 800553c:	4770      	bx	lr
	...

08005540 <nan>:
 8005540:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005548 <nan+0x8>
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	00000000 	.word	0x00000000
 800554c:	7ff80000 	.word	0x7ff80000

08005550 <atanf>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	ee10 5a10 	vmov	r5, s0
 8005556:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800555a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800555e:	eef0 7a40 	vmov.f32	s15, s0
 8005562:	db10      	blt.n	8005586 <atanf+0x36>
 8005564:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005568:	dd04      	ble.n	8005574 <atanf+0x24>
 800556a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800556e:	eeb0 0a67 	vmov.f32	s0, s15
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80056ac <atanf+0x15c>
 8005578:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80056b0 <atanf+0x160>
 800557c:	2d00      	cmp	r5, #0
 800557e:	bfd8      	it	le
 8005580:	eef0 7a47 	vmovle.f32	s15, s14
 8005584:	e7f3      	b.n	800556e <atanf+0x1e>
 8005586:	4b4b      	ldr	r3, [pc, #300]	; (80056b4 <atanf+0x164>)
 8005588:	429c      	cmp	r4, r3
 800558a:	dc10      	bgt.n	80055ae <atanf+0x5e>
 800558c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005590:	da0a      	bge.n	80055a8 <atanf+0x58>
 8005592:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80056b8 <atanf+0x168>
 8005596:	ee30 7a07 	vadd.f32	s14, s0, s14
 800559a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80055a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a6:	dce2      	bgt.n	800556e <atanf+0x1e>
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ac:	e013      	b.n	80055d6 <atanf+0x86>
 80055ae:	f000 f8a3 	bl	80056f8 <fabsf>
 80055b2:	4b42      	ldr	r3, [pc, #264]	; (80056bc <atanf+0x16c>)
 80055b4:	429c      	cmp	r4, r3
 80055b6:	dc4f      	bgt.n	8005658 <atanf+0x108>
 80055b8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80055bc:	429c      	cmp	r4, r3
 80055be:	dc41      	bgt.n	8005644 <atanf+0xf4>
 80055c0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80055c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80055c8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80055cc:	2300      	movs	r3, #0
 80055ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80055d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80055dc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80056c0 <atanf+0x170>
 80055e0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80056c4 <atanf+0x174>
 80055e4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80056c8 <atanf+0x178>
 80055e8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80055ec:	eee6 5a87 	vfma.f32	s11, s13, s14
 80055f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80056cc <atanf+0x17c>
 80055f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80055f8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80056d0 <atanf+0x180>
 80055fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005600:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80056d4 <atanf+0x184>
 8005604:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005608:	eddf 5a33 	vldr	s11, [pc, #204]	; 80056d8 <atanf+0x188>
 800560c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005610:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80056dc <atanf+0x18c>
 8005614:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005618:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80056e0 <atanf+0x190>
 800561c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005620:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80056e4 <atanf+0x194>
 8005624:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005628:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80056e8 <atanf+0x198>
 800562c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005630:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005634:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800563c:	d121      	bne.n	8005682 <atanf+0x132>
 800563e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005642:	e794      	b.n	800556e <atanf+0x1e>
 8005644:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005648:	ee30 7a67 	vsub.f32	s14, s0, s15
 800564c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005650:	2301      	movs	r3, #1
 8005652:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005656:	e7be      	b.n	80055d6 <atanf+0x86>
 8005658:	4b24      	ldr	r3, [pc, #144]	; (80056ec <atanf+0x19c>)
 800565a:	429c      	cmp	r4, r3
 800565c:	dc0b      	bgt.n	8005676 <atanf+0x126>
 800565e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005666:	eea0 7a27 	vfma.f32	s14, s0, s15
 800566a:	2302      	movs	r3, #2
 800566c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005674:	e7af      	b.n	80055d6 <atanf+0x86>
 8005676:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800567a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800567e:	2303      	movs	r3, #3
 8005680:	e7a9      	b.n	80055d6 <atanf+0x86>
 8005682:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <atanf+0x1a0>)
 8005684:	491b      	ldr	r1, [pc, #108]	; (80056f4 <atanf+0x1a4>)
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	440b      	add	r3, r1
 800568c:	edd3 6a00 	vldr	s13, [r3]
 8005690:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005694:	2d00      	cmp	r5, #0
 8005696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800569a:	ed92 7a00 	vldr	s14, [r2]
 800569e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056a2:	bfb8      	it	lt
 80056a4:	eef1 7a67 	vneglt.f32	s15, s15
 80056a8:	e761      	b.n	800556e <atanf+0x1e>
 80056aa:	bf00      	nop
 80056ac:	bfc90fdb 	.word	0xbfc90fdb
 80056b0:	3fc90fdb 	.word	0x3fc90fdb
 80056b4:	3edfffff 	.word	0x3edfffff
 80056b8:	7149f2ca 	.word	0x7149f2ca
 80056bc:	3f97ffff 	.word	0x3f97ffff
 80056c0:	3c8569d7 	.word	0x3c8569d7
 80056c4:	3d4bda59 	.word	0x3d4bda59
 80056c8:	bd6ef16b 	.word	0xbd6ef16b
 80056cc:	3d886b35 	.word	0x3d886b35
 80056d0:	3dba2e6e 	.word	0x3dba2e6e
 80056d4:	3e124925 	.word	0x3e124925
 80056d8:	3eaaaaab 	.word	0x3eaaaaab
 80056dc:	bd15a221 	.word	0xbd15a221
 80056e0:	bd9d8795 	.word	0xbd9d8795
 80056e4:	bde38e38 	.word	0xbde38e38
 80056e8:	be4ccccd 	.word	0xbe4ccccd
 80056ec:	401bffff 	.word	0x401bffff
 80056f0:	08005974 	.word	0x08005974
 80056f4:	08005984 	.word	0x08005984

080056f8 <fabsf>:
 80056f8:	ee10 3a10 	vmov	r3, s0
 80056fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005700:	ee00 3a10 	vmov	s0, r3
 8005704:	4770      	bx	lr

08005706 <finitef>:
 8005706:	ee10 3a10 	vmov	r3, s0
 800570a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800570e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005712:	bfac      	ite	ge
 8005714:	2000      	movge	r0, #0
 8005716:	2001      	movlt	r0, #1
 8005718:	4770      	bx	lr
	...

0800571c <nanf>:
 800571c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005724 <nanf+0x8>
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	7fc00000 	.word	0x7fc00000

08005728 <rintf>:
 8005728:	b513      	push	{r0, r1, r4, lr}
 800572a:	ee10 1a10 	vmov	r1, s0
 800572e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005732:	0ddc      	lsrs	r4, r3, #23
 8005734:	3c7f      	subs	r4, #127	; 0x7f
 8005736:	2c16      	cmp	r4, #22
 8005738:	dc46      	bgt.n	80057c8 <rintf+0xa0>
 800573a:	b32b      	cbz	r3, 8005788 <rintf+0x60>
 800573c:	2c00      	cmp	r4, #0
 800573e:	ee10 2a10 	vmov	r2, s0
 8005742:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8005746:	da21      	bge.n	800578c <rintf+0x64>
 8005748:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800574c:	425b      	negs	r3, r3
 800574e:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <rintf+0xac>)
 8005750:	0a5b      	lsrs	r3, r3, #9
 8005752:	0d09      	lsrs	r1, r1, #20
 8005754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005758:	0509      	lsls	r1, r1, #20
 800575a:	430b      	orrs	r3, r1
 800575c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	edd2 6a00 	vldr	s13, [r2]
 8005768:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800576c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8005770:	eddd 7a01 	vldr	s15, [sp, #4]
 8005774:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005778:	ee17 3a90 	vmov	r3, s15
 800577c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005780:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005784:	ee00 3a10 	vmov	s0, r3
 8005788:	b002      	add	sp, #8
 800578a:	bd10      	pop	{r4, pc}
 800578c:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <rintf+0xb0>)
 800578e:	4123      	asrs	r3, r4
 8005790:	4219      	tst	r1, r3
 8005792:	d0f9      	beq.n	8005788 <rintf+0x60>
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	4219      	tst	r1, r3
 8005798:	d006      	beq.n	80057a8 <rintf+0x80>
 800579a:	ea21 0203 	bic.w	r2, r1, r3
 800579e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057a2:	fa43 f404 	asr.w	r4, r3, r4
 80057a6:	4322      	orrs	r2, r4
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <rintf+0xac>)
 80057aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80057ae:	ed90 7a00 	vldr	s14, [r0]
 80057b2:	ee07 2a90 	vmov	s15, r2
 80057b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80057be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80057c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80057c6:	e7df      	b.n	8005788 <rintf+0x60>
 80057c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80057cc:	d3dc      	bcc.n	8005788 <rintf+0x60>
 80057ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80057d2:	e7d9      	b.n	8005788 <rintf+0x60>
 80057d4:	08005994 	.word	0x08005994
 80057d8:	007fffff 	.word	0x007fffff

080057dc <scalbnf>:
 80057dc:	b508      	push	{r3, lr}
 80057de:	ee10 2a10 	vmov	r2, s0
 80057e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80057e6:	ed2d 8b02 	vpush	{d8}
 80057ea:	eef0 0a40 	vmov.f32	s1, s0
 80057ee:	d004      	beq.n	80057fa <scalbnf+0x1e>
 80057f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80057f4:	d306      	bcc.n	8005804 <scalbnf+0x28>
 80057f6:	ee70 0a00 	vadd.f32	s1, s0, s0
 80057fa:	ecbd 8b02 	vpop	{d8}
 80057fe:	eeb0 0a60 	vmov.f32	s0, s1
 8005802:	bd08      	pop	{r3, pc}
 8005804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005808:	d21c      	bcs.n	8005844 <scalbnf+0x68>
 800580a:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <scalbnf+0xac>)
 800580c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800588c <scalbnf+0xb0>
 8005810:	4298      	cmp	r0, r3
 8005812:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005816:	db10      	blt.n	800583a <scalbnf+0x5e>
 8005818:	ee10 2a90 	vmov	r2, s1
 800581c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005820:	3b19      	subs	r3, #25
 8005822:	4403      	add	r3, r0
 8005824:	2bfe      	cmp	r3, #254	; 0xfe
 8005826:	dd0f      	ble.n	8005848 <scalbnf+0x6c>
 8005828:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005890 <scalbnf+0xb4>
 800582c:	eeb0 0a48 	vmov.f32	s0, s16
 8005830:	f000 f834 	bl	800589c <copysignf>
 8005834:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005838:	e7df      	b.n	80057fa <scalbnf+0x1e>
 800583a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005894 <scalbnf+0xb8>
 800583e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005842:	e7da      	b.n	80057fa <scalbnf+0x1e>
 8005844:	0ddb      	lsrs	r3, r3, #23
 8005846:	e7ec      	b.n	8005822 <scalbnf+0x46>
 8005848:	2b00      	cmp	r3, #0
 800584a:	dd06      	ble.n	800585a <scalbnf+0x7e>
 800584c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005850:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005854:	ee00 3a90 	vmov	s1, r3
 8005858:	e7cf      	b.n	80057fa <scalbnf+0x1e>
 800585a:	f113 0f16 	cmn.w	r3, #22
 800585e:	da06      	bge.n	800586e <scalbnf+0x92>
 8005860:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005864:	4298      	cmp	r0, r3
 8005866:	dcdf      	bgt.n	8005828 <scalbnf+0x4c>
 8005868:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005894 <scalbnf+0xb8>
 800586c:	e7de      	b.n	800582c <scalbnf+0x50>
 800586e:	3319      	adds	r3, #25
 8005870:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005874:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005878:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005898 <scalbnf+0xbc>
 800587c:	ee07 3a10 	vmov	s14, r3
 8005880:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005884:	e7b9      	b.n	80057fa <scalbnf+0x1e>
 8005886:	bf00      	nop
 8005888:	ffff3cb0 	.word	0xffff3cb0
 800588c:	4c000000 	.word	0x4c000000
 8005890:	7149f2ca 	.word	0x7149f2ca
 8005894:	0da24260 	.word	0x0da24260
 8005898:	33000000 	.word	0x33000000

0800589c <copysignf>:
 800589c:	ee10 3a10 	vmov	r3, s0
 80058a0:	ee10 2a90 	vmov	r2, s1
 80058a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058ac:	4313      	orrs	r3, r2
 80058ae:	ee00 3a10 	vmov	s0, r3
 80058b2:	4770      	bx	lr

080058b4 <__errno>:
 80058b4:	4b01      	ldr	r3, [pc, #4]	; (80058bc <__errno+0x8>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000020 	.word	0x20000020

080058c0 <__libc_init_array>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	4e0d      	ldr	r6, [pc, #52]	; (80058f8 <__libc_init_array+0x38>)
 80058c4:	4c0d      	ldr	r4, [pc, #52]	; (80058fc <__libc_init_array+0x3c>)
 80058c6:	1ba4      	subs	r4, r4, r6
 80058c8:	10a4      	asrs	r4, r4, #2
 80058ca:	2500      	movs	r5, #0
 80058cc:	42a5      	cmp	r5, r4
 80058ce:	d109      	bne.n	80058e4 <__libc_init_array+0x24>
 80058d0:	4e0b      	ldr	r6, [pc, #44]	; (8005900 <__libc_init_array+0x40>)
 80058d2:	4c0c      	ldr	r4, [pc, #48]	; (8005904 <__libc_init_array+0x44>)
 80058d4:	f000 f820 	bl	8005918 <_init>
 80058d8:	1ba4      	subs	r4, r4, r6
 80058da:	10a4      	asrs	r4, r4, #2
 80058dc:	2500      	movs	r5, #0
 80058de:	42a5      	cmp	r5, r4
 80058e0:	d105      	bne.n	80058ee <__libc_init_array+0x2e>
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058e8:	4798      	blx	r3
 80058ea:	3501      	adds	r5, #1
 80058ec:	e7ee      	b.n	80058cc <__libc_init_array+0xc>
 80058ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058f2:	4798      	blx	r3
 80058f4:	3501      	adds	r5, #1
 80058f6:	e7f2      	b.n	80058de <__libc_init_array+0x1e>
 80058f8:	080059a4 	.word	0x080059a4
 80058fc:	080059a4 	.word	0x080059a4
 8005900:	080059a4 	.word	0x080059a4
 8005904:	080059ac 	.word	0x080059ac

08005908 <memset>:
 8005908:	4402      	add	r2, r0
 800590a:	4603      	mov	r3, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	d100      	bne.n	8005912 <memset+0xa>
 8005910:	4770      	bx	lr
 8005912:	f803 1b01 	strb.w	r1, [r3], #1
 8005916:	e7f9      	b.n	800590c <memset+0x4>

08005918 <_init>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	bf00      	nop
 800591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591e:	bc08      	pop	{r3}
 8005920:	469e      	mov	lr, r3
 8005922:	4770      	bx	lr

08005924 <_fini>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	bf00      	nop
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr
